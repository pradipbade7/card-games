{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/ui/Confetti.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../../styles/confetti.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Confetti = ({\n  show,\n  duration = 5000,\n  count = 200\n}) => {\n  _s();\n  const [pieces, setPieces] = useState([]);\n  useEffect(() => {\n    if (show) {\n      // Create confetti pieces when shown\n      const newPieces = [];\n      for (let i = 0; i < count; i++) {\n        const isMetallic = Math.random() < 0.3; // 30% chance for metallic effect\n        const angle = Math.random() * Math.PI * 2; // Random angle in radians (0 to 2π)\n        const distance = 30 + Math.random() * 70; // Random distance from center (30-100%)\n\n        // Convert polar coordinates to cartesian for final position\n        const finalX = Math.cos(angle) * distance;\n        const finalY = Math.sin(angle) * distance;\n        newPieces.push({\n          id: i,\n          finalX: finalX,\n          finalY: finalY,\n          finalRotation: Math.random() * 720 - 360,\n          // -360 to 360 degrees\n          size: 5 + Math.random() * 10,\n          // Random size (5-15px)\n          color: getRandomColor(),\n          shape: getRandomShape(),\n          isMetallic: isMetallic,\n          animationDuration: 1.5 + Math.random() * 3.5,\n          // 1.5 to 5 seconds\n          animationDelay: Math.random() * 0.5 // 0 to 0.5 seconds\n        });\n      }\n      setPieces(newPieces);\n\n      // Clean up confetti after duration\n      const timer = setTimeout(() => {\n        setPieces([]);\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [show, count, duration]);\n  // Get random color for confetti\n  const getRandomColor = () => {\n    const colors = ['#FFD700',\n    // Gold\n    '#FFC0CB',\n    // Pink\n    '#87CEFA',\n    // Light Sky Blue\n    '#00FFFF',\n    // Cyan\n    '#7FFFD4',\n    // Aquamarine\n    '#FF1493',\n    // Deep Pink\n    '#00FA9A',\n    // Medium Spring Green\n    '#FF7F50',\n    // Coral\n    '#E6E6FA',\n    // Lavender\n    '#FFFF00',\n    // Yellow\n    '#FF00FF',\n    // Magenta\n    '#F0E68C',\n    // Khaki\n    '#B0E0E6',\n    // Powder Blue\n    '#32CD32',\n    // Lime Green\n    '#FF4500',\n    // Orange Red\n    '#C0C0C0',\n    // Silver\n    '#FFFFFF',\n    // White\n    '#D8BFD8',\n    // Thistle\n    '#40E0D0',\n    // Turquoise\n    '#EE82EE' // Violet\n    ];\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  // Get random shape for confetti\n  const getRandomShape = () => {\n    const shapes = ['rectangle', 'rectangle-h', 'rectangle-v', 'circle', 'square', 'strip'];\n    return shapes[Math.floor(Math.random() * shapes.length)];\n  };\n  if (!show || pieces.length === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"confetti-container\",\n    children: pieces.map(piece => {\n      const style = {\n        '--final-x': `${piece.finalX}vw`,\n        '--final-y': `${piece.finalY}vh`,\n        '--final-rotation': `${piece.finalRotation}deg`,\n        width: piece.shape.includes('rectangle') ? `${piece.size * 3}px` : `${piece.size}px`,\n        height: piece.shape.includes('rectangle') ? `${piece.size * 0.5}px` : `${piece.size}px`,\n        backgroundColor: piece.color,\n        animation: `${piece.isMetallic ? 'confetti-burst-shine' : 'confetti-burst'} ${piece.animationDuration}s cubic-bezier(0.21, 0.98, 0.6, 0.99) forwards`,\n        animationDelay: `${piece.animationDelay}s`,\n        borderRadius: piece.shape === 'circle' ? '50%' : ''\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `confetti-piece ${piece.isMetallic ? 'metallic' : ''}`,\n        style: style\n      }, piece.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Confetti, \"dst5rWbiaTb9BsiZiBj3FczSZXg=\");\n_c = Confetti;\nexport default Confetti;\nvar _c;\n$RefreshReg$(_c, \"Confetti\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Confetti","show","duration","count","_s","pieces","setPieces","newPieces","i","isMetallic","Math","random","angle","PI","distance","finalX","cos","finalY","sin","push","id","finalRotation","size","color","getRandomColor","shape","getRandomShape","animationDuration","animationDelay","timer","setTimeout","clearTimeout","colors","floor","length","shapes","className","children","map","piece","style","width","includes","height","backgroundColor","animation","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/ui/Confetti.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../../styles/confetti.css';\n\nconst Confetti = ({ show, duration = 5000, count = 200 }) => {\n  const [pieces, setPieces] = useState([]);\n  \n  useEffect(() => {\n    if (show) {\n      // Create confetti pieces when shown\n      const newPieces = [];\n      \n      for (let i = 0; i < count; i++) {\n        const isMetallic = Math.random() < 0.3; // 30% chance for metallic effect\n        const angle = Math.random() * Math.PI * 2; // Random angle in radians (0 to 2π)\n        const distance = 30 + Math.random() * 70; // Random distance from center (30-100%)\n        \n        // Convert polar coordinates to cartesian for final position\n        const finalX = Math.cos(angle) * distance;\n        const finalY = Math.sin(angle) * distance;\n        \n        newPieces.push({\n          id: i,\n          finalX: finalX,\n          finalY: finalY,\n          finalRotation: Math.random() * 720 - 360, // -360 to 360 degrees\n          size: 5 + Math.random() * 10, // Random size (5-15px)\n          color: getRandomColor(),\n          shape: getRandomShape(),\n          isMetallic: isMetallic,\n          animationDuration: 1.5 + Math.random() * 3.5, // 1.5 to 5 seconds\n          animationDelay: Math.random() * 0.5, // 0 to 0.5 seconds\n        });\n      }\n      \n      setPieces(newPieces);\n      \n      // Clean up confetti after duration\n      const timer = setTimeout(() => {\n        setPieces([]);\n      }, duration);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [show, count, duration]);\n  // Get random color for confetti\nconst getRandomColor = () => {\n  const colors = [\n    '#FFD700', // Gold\n    '#FFC0CB', // Pink\n    '#87CEFA', // Light Sky Blue\n    '#00FFFF', // Cyan\n    '#7FFFD4', // Aquamarine\n    '#FF1493', // Deep Pink\n    '#00FA9A', // Medium Spring Green\n    '#FF7F50', // Coral\n    '#E6E6FA', // Lavender\n    '#FFFF00', // Yellow\n    '#FF00FF', // Magenta\n    '#F0E68C', // Khaki\n    '#B0E0E6', // Powder Blue\n    '#32CD32', // Lime Green\n    '#FF4500', // Orange Red\n    '#C0C0C0', // Silver\n    '#FFFFFF', // White\n    '#D8BFD8', // Thistle\n    '#40E0D0', // Turquoise\n    '#EE82EE'  // Violet\n  ];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\n  \n  // Get random shape for confetti\n  const getRandomShape = () => {\n    const shapes = ['rectangle', 'rectangle-h', 'rectangle-v', 'circle', 'square', 'strip'];\n    return shapes[Math.floor(Math.random() * shapes.length)];\n  };\n  \n  if (!show || pieces.length === 0) {\n    return null;\n  }\n  \n  return (\n    <div className=\"confetti-container\">\n      {pieces.map((piece) => {\n        const style = {\n          '--final-x': `${piece.finalX}vw`,\n          '--final-y': `${piece.finalY}vh`,\n          '--final-rotation': `${piece.finalRotation}deg`,\n          width: piece.shape.includes('rectangle') ? `${piece.size * 3}px` : `${piece.size}px`,\n          height: piece.shape.includes('rectangle') ? `${piece.size * 0.5}px` : `${piece.size}px`,\n          backgroundColor: piece.color,\n          animation: `${piece.isMetallic ? 'confetti-burst-shine' : 'confetti-burst'} ${piece.animationDuration}s cubic-bezier(0.21, 0.98, 0.6, 0.99) forwards`,\n          animationDelay: `${piece.animationDelay}s`,\n          borderRadius: piece.shape === 'circle' ? '50%' : '',\n        };\n        \n        return (\n          <div \n            key={piece.id} \n            className={`confetti-piece ${piece.isMetallic ? 'metallic' : ''}`}\n            style={style} \n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Confetti;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}