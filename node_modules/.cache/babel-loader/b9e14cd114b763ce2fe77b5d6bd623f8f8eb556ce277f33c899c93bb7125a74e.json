{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/cards/CardScene.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { useLoader } from '@react-three/fiber';\nimport { useSpring, animated } from '@react-spring/three';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CardMesh({\n  suit,\n  value,\n  flipped,\n  position,\n  rotation,\n  scale,\n  cardBackStyle,\n  delay = 0,\n  animated = false\n}) {\n  _s();\n  const frontTexture = useLoader(THREE.TextureLoader, `/cards/${suit}_${value}.png`);\n  const backTexture = useLoader(THREE.TextureLoader, `/cards/${cardBackStyle}.png`);\n\n  // Animation spring for card dealing\n  const {\n    pos,\n    rot\n  } = useSpring({\n    from: animated ? {\n      pos: [0, 10, 0],\n      rot: [0, 0, Math.PI]\n    } : {\n      pos: position,\n      rot: rotation\n    },\n    to: {\n      pos: position,\n      rot: rotation\n    },\n    delay: delay,\n    config: {\n      mass: 1,\n      tension: 180,\n      friction: 12\n    }\n  });\n  useEffect(() => {\n    [frontTexture, backTexture].forEach(texture => {\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      texture.needsUpdate = true;\n    });\n  }, [frontTexture, backTexture]);\n  const MeshComponent = animated ? animated.mesh : 'mesh';\n  return /*#__PURE__*/_jsxDEV(MeshComponent, {\n    position: animated ? pos : position,\n    rotation: animated ? rot : rotation,\n    scale: scale,\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [1, 1.4]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: flipped ? backTexture : frontTexture,\n      side: THREE.DoubleSide,\n      transparent: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(CardMesh, \"J1oUnNBPSOnScMe47CMdmY9Kpq0=\", false, function () {\n  return [useLoader, useLoader, useSpring];\n});\n_c = CardMesh;\nexport default function CardScene({\n  cards = [],\n  cardBackStyle = 'cardback',\n  animatingDeal = false\n}) {\n  // Log the cards being rendered\n  console.log(\"CardScene rendering cards:\", cards.length);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(CardMesh, {\n      suit: card.suit,\n      value: card.value,\n      flipped: card.flipped,\n      position: card.position,\n      rotation: card.rotation,\n      scale: card.scale,\n      cardBackStyle: cardBackStyle,\n      delay: animatingDeal ? card.delay || 0 : 0,\n      animated: animatingDeal\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n_c2 = CardScene;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardMesh\");\n$RefreshReg$(_c2, \"CardScene\");","map":{"version":3,"names":["React","useEffect","THREE","useLoader","useSpring","animated","jsxDEV","_jsxDEV","Fragment","_Fragment","CardMesh","suit","value","flipped","position","rotation","scale","cardBackStyle","delay","_s","frontTexture","TextureLoader","backTexture","pos","rot","from","Math","PI","to","config","mass","tension","friction","forEach","texture","minFilter","LinearFilter","magFilter","needsUpdate","MeshComponent","mesh","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","DoubleSide","transparent","_c","CardScene","cards","animatingDeal","console","log","length","card","id","_c2","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/cards/CardScene.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { useLoader } from '@react-three/fiber';\nimport { useSpring, animated } from '@react-spring/three';\n\nfunction CardMesh({ suit, value, flipped, position, rotation, scale, cardBackStyle, delay = 0, animated = false }) {\n    const frontTexture = useLoader(THREE.TextureLoader, `/cards/${suit}_${value}.png`);\n    const backTexture = useLoader(THREE.TextureLoader, `/cards/${cardBackStyle}.png`);\n    \n    // Animation spring for card dealing\n    const { pos, rot } = useSpring({\n        from: animated ? { pos: [0, 10, 0], rot: [0, 0, Math.PI] } : { pos: position, rot: rotation },\n        to: { pos: position, rot: rotation },\n        delay: delay,\n        config: { mass: 1, tension: 180, friction: 12 }\n    });\n    \n    useEffect(() => {\n        [frontTexture, backTexture].forEach(texture => {\n            texture.minFilter = THREE.LinearFilter;\n            texture.magFilter = THREE.LinearFilter;\n            texture.needsUpdate = true;\n        });\n    }, [frontTexture, backTexture]);\n    \n    const MeshComponent = animated ? animated.mesh : 'mesh';\n    \n    return (\n        <MeshComponent position={animated ? pos : position} rotation={animated ? rot : rotation} scale={scale}>\n            <planeGeometry args={[1, 1.4]} />\n            <meshBasicMaterial \n                map={flipped ? backTexture : frontTexture}\n                side={THREE.DoubleSide}\n                transparent={false}\n            />\n        </MeshComponent>\n    );\n}\n\nexport default function CardScene({ cards = [], cardBackStyle = 'cardback', animatingDeal = false }) {\n    // Log the cards being rendered\n    console.log(\"CardScene rendering cards:\", cards.length);\n    \n    return (\n        <>\n            {cards.map((card) => (\n                <CardMesh\n                    key={card.id}\n                    suit={card.suit}\n                    value={card.value}\n                    flipped={card.flipped}\n                    position={card.position}\n                    rotation={card.rotation}\n                    scale={card.scale}\n                    cardBackStyle={cardBackStyle}\n                    delay={animatingDeal ? card.delay || 0 : 0}\n                    animated={animatingDeal}\n                />\n            ))}\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}