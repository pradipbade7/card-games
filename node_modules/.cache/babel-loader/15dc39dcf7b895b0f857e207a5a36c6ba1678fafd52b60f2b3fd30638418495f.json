{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Canvas, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Debug helper to visualize the camera position and frustum\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DebugCamera() {\n  _s();\n  const {\n    camera\n  } = useThree();\n  useEffect(() => {\n    console.log(\"Camera position:\", camera.position);\n    console.log(\"Cards should be visible if positioned within camera view\");\n  }, [camera]);\n  return null;\n}\n\n// Card mesh component to be used within the shared canvas\n_s(DebugCamera, \"Wo14/kl28HhoRfDX+Cg7MK2EhFU=\", false, function () {\n  return [useThree];\n});\n_c = DebugCamera;\nfunction CardMesh({\n  suit,\n  value,\n  flipped,\n  position,\n  rotation,\n  scale\n}) {\n  _s2();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(false);\n\n  // Use a simple colored material as fallback\n  const fallbackMaterial = useMemo(() => new THREE.MeshBasicMaterial({\n    color: flipped ? 0x234567 : 0x987654,\n    side: THREE.DoubleSide\n  }), [flipped]);\n\n  // Load textures\n  const [frontTexture, backTexture] = useMemo(() => {\n    const loader = new THREE.TextureLoader();\n\n    // Display loading progress for debugging\n    loader.manager.onProgress = (url, loaded, total) => {\n      console.log(`Loading texture: ${url} (${Math.round(loaded / total * 100)}%)`);\n    };\n    const frontPath = `/assets/cards/faces/${suit}/${value}.png`;\n    const backPath = `/assets/cards/backs/cardback.png`;\n    const front = loader.load(frontPath, () => setIsLoaded(true), undefined, err => {\n      console.error(\"Error loading front texture:\", err);\n      setError(true);\n    });\n    const back = loader.load(backPath, () => setIsLoaded(true), undefined, err => {\n      console.error(\"Error loading back texture:\", err);\n      setError(true);\n    });\n    front.minFilter = THREE.LinearFilter;\n    back.minFilter = THREE.LinearFilter;\n    return [front, back];\n  }, [suit, value]);\n\n  // Material that uses textures when loaded, fallback otherwise\n  const material = useMemo(() => {\n    if (error) return fallbackMaterial;\n    return new THREE.MeshBasicMaterial({\n      map: flipped ? backTexture : frontTexture,\n      side: THREE.DoubleSide,\n      transparent: true\n    });\n  }, [frontTexture, backTexture, flipped, fallbackMaterial, error]);\n\n  // Add a default scale if none provided\n  const finalScale = scale || [1, 1, 1];\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    rotation: rotation || [0, 0, 0],\n    scale: finalScale,\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [1, 1.4]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: material\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n// The shared canvas for all cards\n_s2(CardMesh, \"7w9++oJTeR0YGnZ8iMHLnhMB34Y=\");\n_c2 = CardMesh;\nexport default function CardScene({\n  cards\n}) {\n  _s3();\n  // Log cards for debugging\n  useEffect(() => {\n    console.log(\"Rendering cards:\", cards);\n  }, [cards]);\n\n  // Return early with an error message if no cards\n  if (!cards || cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        padding: '20px'\n      },\n      children: \"No cards to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [0, 0, 15],\n      fov: 45\n    },\n    style: {\n      background: '#2a2a2a'\n    },\n    gl: {\n      preserveDrawingBuffer: true,\n      antialias: true\n    },\n    shadows: true,\n    children: [/*#__PURE__*/_jsxDEV(\"color\", {\n      attach: \"background\",\n      args: ['#2a2a2a']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 1.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"axesHelper\", {\n      args: [10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DebugCamera, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), cards.map(card => /*#__PURE__*/_jsxDEV(CardMesh, {\n      suit: card.suit,\n      value: card.value,\n      flipped: card.flipped,\n      position: card.position,\n      rotation: card.rotation,\n      scale: card.scale\n    }, `card-${card.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s3(CardScene, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c3 = CardScene;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DebugCamera\");\n$RefreshReg$(_c2, \"CardMesh\");\n$RefreshReg$(_c3, \"CardScene\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Canvas","useThree","THREE","jsxDEV","_jsxDEV","DebugCamera","_s","camera","console","log","position","_c","CardMesh","suit","value","flipped","rotation","scale","_s2","isLoaded","setIsLoaded","error","setError","fallbackMaterial","MeshBasicMaterial","color","side","DoubleSide","frontTexture","backTexture","loader","TextureLoader","manager","onProgress","url","loaded","total","Math","round","frontPath","backPath","front","load","undefined","err","back","minFilter","LinearFilter","material","map","transparent","finalScale","children","args","fileName","_jsxFileName","lineNumber","columnNumber","object","_c2","CardScene","cards","_s3","length","style","padding","fov","background","gl","preserveDrawingBuffer","antialias","shadows","attach","intensity","card","id","_c3","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Canvas, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Debug helper to visualize the camera position and frustum\nfunction DebugCamera() {\n  const { camera } = useThree();\n  \n  useEffect(() => {\n    console.log(\"Camera position:\", camera.position);\n    console.log(\"Cards should be visible if positioned within camera view\");\n  }, [camera]);\n  \n  return null;\n}\n\n// Card mesh component to be used within the shared canvas\nfunction CardMesh({ suit, value, flipped, position, rotation, scale }) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  \n  // Use a simple colored material as fallback\n  const fallbackMaterial = useMemo(() => \n    new THREE.MeshBasicMaterial({ \n      color: flipped ? 0x234567 : 0x987654,\n      side: THREE.DoubleSide \n    }), [flipped]);\n  \n  // Load textures\n  const [frontTexture, backTexture] = useMemo(() => {\n    const loader = new THREE.TextureLoader();\n    \n    // Display loading progress for debugging\n    loader.manager.onProgress = (url, loaded, total) => {\n      console.log(`Loading texture: ${url} (${Math.round(loaded/total*100)}%)`);\n    };\n    \n    const frontPath = `/assets/cards/faces/${suit}/${value}.png`;\n    const backPath = `/assets/cards/backs/cardback.png`;\n    \n    const front = loader.load(\n      frontPath, \n      () => setIsLoaded(true),\n      undefined,\n      (err) => {\n        console.error(\"Error loading front texture:\", err);\n        setError(true);\n      }\n    );\n    \n    const back = loader.load(\n      backPath,\n      () => setIsLoaded(true),\n      undefined,\n      (err) => {\n        console.error(\"Error loading back texture:\", err);\n        setError(true);\n      }\n    );\n    \n    front.minFilter = THREE.LinearFilter;\n    back.minFilter = THREE.LinearFilter;\n    \n    return [front, back];\n  }, [suit, value]);\n  \n  // Material that uses textures when loaded, fallback otherwise\n  const material = useMemo(() => {\n    if (error) return fallbackMaterial;\n    \n    return new THREE.MeshBasicMaterial({\n      map: flipped ? backTexture : frontTexture,\n      side: THREE.DoubleSide,\n      transparent: true\n    });\n  }, [frontTexture, backTexture, flipped, fallbackMaterial, error]);\n  \n  // Add a default scale if none provided\n  const finalScale = scale || [1, 1, 1];\n  \n  return (\n    <mesh position={position} rotation={rotation || [0, 0, 0]} scale={finalScale}>\n      <planeGeometry args={[1, 1.4]} />\n      <primitive object={material} />\n    </mesh>\n  );\n}\n\n// The shared canvas for all cards\nexport default function CardScene({ cards }) {\n  // Log cards for debugging\n  useEffect(() => {\n    console.log(\"Rendering cards:\", cards);\n  }, [cards]);\n  \n  // Return early with an error message if no cards\n  if (!cards || cards.length === 0) {\n    return <div style={{color: 'red', padding: '20px'}}>No cards to display</div>;\n  }\n  \n  return (\n    <Canvas\n      camera={{ position: [0, 0, 15], fov: 45 }}\n      style={{ background: '#2a2a2a' }}\n      gl={{ preserveDrawingBuffer: true, antialias: true }}\n      shadows\n    >\n      <color attach=\"background\" args={['#2a2a2a']} />\n      <ambientLight intensity={1.0} />\n      <pointLight position={[10, 10, 10]} intensity={1.5} />\n      \n      {/* Add axes helper to visualize 3D space */}\n      <axesHelper args={[10]} />\n      \n      {/* Add camera debug helper */}\n      <DebugCamera />\n      \n      {/* Render cards only if they exist */}\n      {cards.map((card) => (\n        <CardMesh\n          key={`card-${card.id}`}\n          suit={card.suit}\n          value={card.value}\n          flipped={card.flipped}\n          position={card.position}\n          rotation={card.rotation}\n          scale={card.scale}\n        />\n      ))}\n    </Canvas>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}