{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/PlayerHand.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, Suspense } from 'react';\nimport { Canvas, useThree, useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useSpring, animated } from '@react-spring/three';\n\n// Camera controller component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CameraController() {\n  _s();\n  const {\n    camera\n  } = useThree();\n  useEffect(() => {\n    camera.position.set(0, 8, 2);\n    camera.lookAt(0, 0, 0);\n    camera.fov = 45;\n    camera.updateProjectionMatrix();\n  }, [camera]);\n  return null;\n}\n\n// Card mesh component\n_s(CameraController, \"Wo14/kl28HhoRfDX+Cg7MK2EhFU=\", false, function () {\n  return [useThree];\n});\n_c = CameraController;\nfunction CardMesh({\n  suit,\n  value,\n  flipped,\n  position,\n  rotation,\n  scale,\n  cardBackStyle,\n  delay = 0,\n  animated: isAnimated = false\n}) {\n  _s2();\n  // Load textures with proper paths\n  const frontTexture = useLoader(THREE.TextureLoader, `/assets/cards/faces/${suit}/${value}.png`);\n  const backTexture = useLoader(THREE.TextureLoader, `/assets/cards/backs/${cardBackStyle}.png`);\n  useEffect(() => {\n    frontTexture.minFilter = THREE.LinearFilter;\n    frontTexture.magFilter = THREE.LinearFilter;\n    backTexture.minFilter = THREE.LinearFilter;\n    backTexture.magFilter = THREE.LinearFilter;\n    frontTexture.needsUpdate = true;\n    backTexture.needsUpdate = true;\n  }, [frontTexture, backTexture]);\n\n  // Animation spring for card dealing\n  const {\n    pos,\n    rot\n  } = useSpring({\n    from: isAnimated ? {\n      pos: [0, 10, 0],\n      rot: [0, 0, Math.PI]\n    } : {\n      pos: position,\n      rot: rotation\n    },\n    to: {\n      pos: position,\n      rot: rotation\n    },\n    delay: delay,\n    config: {\n      mass: 1,\n      tension: 180,\n      friction: 12\n    }\n  });\n  if (isAnimated) {\n    return /*#__PURE__*/_jsxDEV(animated.mesh, {\n      position: pos,\n      rotation: rot,\n      scale: scale,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1, 1.4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: flipped ? backTexture : frontTexture,\n        side: THREE.DoubleSide,\n        transparent: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: position,\n      rotation: rotation,\n      scale: scale,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1, 1.4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: flipped ? backTexture : frontTexture,\n        side: THREE.DoubleSide,\n        transparent: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// Card scene component\n_s2(CardMesh, \"ZqYwsxtIDaNHFeGzGOmhjJZHLf0=\", false, function () {\n  return [useLoader, useLoader, useSpring];\n});\n_c2 = CardMesh;\nfunction CardScene({\n  cards = [],\n  cardBackStyle = 'cardback',\n  animatingDeal = false\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(CardMesh, {\n      suit: card.suit,\n      value: card.value,\n      flipped: card.flipped,\n      position: card.position,\n      rotation: card.rotation,\n      scale: card.scale,\n      cardBackStyle: cardBackStyle,\n      delay: animatingDeal && card.delay ? card.delay : 0,\n      animated: animatingDeal\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n_c3 = CardScene;\nexport default function PlayerHand({\n  player,\n  isCurrentTurn,\n  isHumanPlayer,\n  gamePhase,\n  showTotal,\n  isWinner,\n  gameId,\n  cardBackStyle = 'cardback'\n}) {\n  _s3();\n  const {\n    name,\n    cards,\n    visibleCards,\n    hiddenCards,\n    total,\n    status\n  } = player;\n  const canvasRef = useRef();\n  const [animatingDeal, setAnimatingDeal] = useState(true);\n\n  // This effect runs once when the component mounts to set up card dealing animation\n  useEffect(() => {\n    const dealTimer = setTimeout(() => {\n      setAnimatingDeal(false);\n    }, 2000); // Animation completes after 2 seconds\n\n    return () => clearTimeout(dealTimer);\n  }, []);\n\n  // Clean up canvas WebGL context\n  useEffect(() => {\n    return () => {\n      if (canvasRef.current) {\n        var _canvasRef$current$__;\n        const gl = (_canvasRef$current$__ = canvasRef.current.__r3f) === null || _canvasRef$current$__ === void 0 ? void 0 : _canvasRef$current$__.gl;\n        if (gl) {\n          gl.dispose();\n          gl.forceContextLoss();\n          const canvas = gl.domElement;\n          if (canvas && canvas.parentElement) {\n            canvas.parentElement.removeChild(canvas);\n          }\n        }\n      }\n    };\n  }, [gameId]);\n\n  // Prepare cards data for the scene with appropriate position and rotation\n  const prepareCardsForScene = () => {\n    const allCards = [];\n\n    // Determine whether to show hidden cards\n    const showAllCards = gamePhase === 'gameOver' || status === 'eliminated' || status === 'winner' || gamePhase === 'revealing';\n\n    // Calculate spacing based on number of cards\n    const totalCards = hiddenCards.length + visibleCards.length;\n\n    // Use consistent spacing for all players\n    let cardSpacing = totalCards > 5 ? 0.2 : totalCards === 4 ? 0.22 : totalCards === 3 ? 0.25 : 0.5;\n\n    // Use consistent scale for all players\n    const scale = [0.6, 0.6, 1];\n\n    // Add hidden cards first\n    hiddenCards.forEach((card, index) => {\n      // Position cards in a horizontal row\n      const xPos = (index - (totalCards - 1) / 2) * cardSpacing;\n      allCards.push({\n        id: `hidden-${player.id}-${index}-${gameId}`,\n        suit: card.suit,\n        value: card.value,\n        flipped: !showAllCards,\n        position: [xPos, 0, 0],\n        rotation: [0, 0, 0],\n        scale,\n        delay: index * 300 // Stagger the animation\n      });\n    });\n\n    // Add visible cards after hidden cards\n    visibleCards.forEach((card, index) => {\n      const startIndex = hiddenCards.length;\n      const xPos = (startIndex + index - (totalCards - 1) / 2) * cardSpacing;\n      allCards.push({\n        id: `visible-${player.id}-${index}-${gameId}`,\n        suit: card.suit,\n        value: card.value,\n        flipped: false,\n        position: [xPos, 0, 0],\n        rotation: [0, 0, 0],\n        scale,\n        delay: (hiddenCards.length + index) * 300 // Continue staggered animation\n      });\n    });\n    return allCards;\n  };\n  const getContainerClass = () => {\n    const baseClass = `player-hand-container`;\n    const statusClass = status;\n    const activeClass = isCurrentTurn ? 'active-turn' : '';\n    const winnerClass = isWinner ? 'winning-player' : '';\n    const playerTypeClass = isHumanPlayer ? 'human-player' : 'bot-player';\n    const animatingClass = animatingDeal ? 'dealing-animation' : '';\n    return `${baseClass} ${statusClass} ${activeClass} ${winnerClass} ${playerTypeClass} ${animatingClass}`;\n  };\n  const getStatusText = () => {\n    switch (status) {\n      case 'active':\n        return isCurrentTurn ? 'Playing...' : 'Waiting';\n      case 'holding':\n        return `Holding${showTotal ? ` at ${total}` : ''}`;\n      case 'eliminated':\n        return 'Busted!';\n      case 'winner':\n        return 'Winner!';\n      default:\n        return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: getContainerClass(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [name, \" \", isWinner && gamePhase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"winner-badge\",\n          children: \"\\uD83D\\uDC51\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: getStatusText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Total: \", showTotal ? total : '?']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-cards-canvas\",\n      children: /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-cards\",\n          children: \"Loading cards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 37\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Canvas, {\n          ref: canvasRef,\n          shadows: true,\n          children: [/*#__PURE__*/_jsxDEV(CameraController, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n            intensity: 0.8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n            position: [10, 10, 10],\n            intensity: 1.5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardScene, {\n            cards: prepareCardsForScene(),\n            cardBackStyle: cardBackStyle,\n            animatingDeal: animatingDeal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this)]\n        }, `canvas-player-${player.id}-${gameId}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n_s3(PlayerHand, \"imOKZAaPOHn7kgQiQWXdXhSgoJU=\");\n_c4 = PlayerHand;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CameraController\");\n$RefreshReg$(_c2, \"CardMesh\");\n$RefreshReg$(_c3, \"CardScene\");\n$RefreshReg$(_c4, \"PlayerHand\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Suspense","Canvas","useThree","useLoader","THREE","useSpring","animated","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraController","_s","camera","position","set","lookAt","fov","updateProjectionMatrix","_c","CardMesh","suit","value","flipped","rotation","scale","cardBackStyle","delay","isAnimated","_s2","frontTexture","TextureLoader","backTexture","minFilter","LinearFilter","magFilter","needsUpdate","pos","rot","from","Math","PI","to","config","mass","tension","friction","mesh","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","DoubleSide","transparent","_c2","CardScene","cards","animatingDeal","card","id","_c3","PlayerHand","player","isCurrentTurn","isHumanPlayer","gamePhase","showTotal","isWinner","gameId","_s3","name","visibleCards","hiddenCards","total","status","canvasRef","setAnimatingDeal","dealTimer","setTimeout","clearTimeout","current","_canvasRef$current$__","gl","__r3f","dispose","forceContextLoss","canvas","domElement","parentElement","removeChild","prepareCardsForScene","allCards","showAllCards","totalCards","length","cardSpacing","forEach","index","xPos","push","startIndex","getContainerClass","baseClass","statusClass","activeClass","winnerClass","playerTypeClass","animatingClass","getStatusText","className","fallback","ref","shadows","intensity","_c4","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/PlayerHand.js"],"sourcesContent":["import React, { useState, useEffect, useRef, Suspense } from 'react';\nimport { Canvas, useThree, useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useSpring, animated } from '@react-spring/three';\n\n// Camera controller component\nfunction CameraController() {\n    const { camera } = useThree();\n\n    useEffect(() => {\n        camera.position.set(0, 8, 2);\n        camera.lookAt(0, 0, 0);\n        camera.fov = 45;\n        camera.updateProjectionMatrix();\n    }, [camera]);\n\n    return null;\n}\n\n// Card mesh component\nfunction CardMesh({ suit, value, flipped, position, rotation, scale, cardBackStyle, delay = 0, animated: isAnimated = false }) {\n    // Load textures with proper paths\n    const frontTexture = useLoader(THREE.TextureLoader, `/assets/cards/faces/${suit}/${value}.png`);\n    const backTexture = useLoader(THREE.TextureLoader, `/assets/cards/backs/${cardBackStyle}.png`);\n    \n    useEffect(() => {\n        frontTexture.minFilter = THREE.LinearFilter;\n        frontTexture.magFilter = THREE.LinearFilter;\n        backTexture.minFilter = THREE.LinearFilter;\n        backTexture.magFilter = THREE.LinearFilter;\n        frontTexture.needsUpdate = true;\n        backTexture.needsUpdate = true;\n    }, [frontTexture, backTexture]);\n    \n    // Animation spring for card dealing\n    const { pos, rot } = useSpring({\n        from: isAnimated ? { pos: [0, 10, 0], rot: [0, 0, Math.PI] } : { pos: position, rot: rotation },\n        to: { pos: position, rot: rotation },\n        delay: delay,\n        config: { mass: 1, tension: 180, friction: 12 }\n    });\n    \n    if (isAnimated) {\n        return (\n            <animated.mesh position={pos} rotation={rot} scale={scale}>\n                <planeGeometry args={[1, 1.4]} />\n                <meshBasicMaterial \n                    map={flipped ? backTexture : frontTexture}\n                    side={THREE.DoubleSide}\n                    transparent={false}\n                />\n            </animated.mesh>\n        );\n    } else {\n        return (\n            <mesh position={position} rotation={rotation} scale={scale}>\n                <planeGeometry args={[1, 1.4]} />\n                <meshBasicMaterial \n                    map={flipped ? backTexture : frontTexture}\n                    side={THREE.DoubleSide}\n                    transparent={false}\n                />\n            </mesh>\n        );\n    }\n}\n\n// Card scene component\nfunction CardScene({ cards = [], cardBackStyle = 'cardback', animatingDeal = false }) {\n    return (\n        <>\n            {cards.map((card) => (\n                <CardMesh\n                    key={card.id}\n                    suit={card.suit}\n                    value={card.value}\n                    flipped={card.flipped}\n                    position={card.position}\n                    rotation={card.rotation}\n                    scale={card.scale}\n                    cardBackStyle={cardBackStyle}\n                    delay={animatingDeal && card.delay ? card.delay : 0}\n                    animated={animatingDeal}\n                />\n            ))}\n        </>\n    );\n}\n\nexport default function PlayerHand({\n    player,\n    isCurrentTurn,\n    isHumanPlayer,\n    gamePhase,\n    showTotal,\n    isWinner,\n    gameId,\n    cardBackStyle = 'cardback'\n}) {\n    const { name, cards, visibleCards, hiddenCards, total, status } = player;\n    const canvasRef = useRef();\n    const [animatingDeal, setAnimatingDeal] = useState(true);\n\n    // This effect runs once when the component mounts to set up card dealing animation\n    useEffect(() => {\n        const dealTimer = setTimeout(() => {\n            setAnimatingDeal(false);\n        }, 2000); // Animation completes after 2 seconds\n\n        return () => clearTimeout(dealTimer);\n    }, []);\n\n    // Clean up canvas WebGL context\n    useEffect(() => {\n        return () => {\n            if (canvasRef.current) {\n                const gl = canvasRef.current.__r3f?.gl;\n                if (gl) {\n                    gl.dispose();\n                    gl.forceContextLoss();\n                    const canvas = gl.domElement;\n                    if (canvas && canvas.parentElement) {\n                        canvas.parentElement.removeChild(canvas);\n                    }\n                }\n            }\n        };\n    }, [gameId]);\n\n    // Prepare cards data for the scene with appropriate position and rotation\n    const prepareCardsForScene = () => {\n        const allCards = [];\n        \n        // Determine whether to show hidden cards\n        const showAllCards = gamePhase === 'gameOver' || \n                            status === 'eliminated' || \n                            status === 'winner' || \n                            gamePhase === 'revealing';\n        \n        // Calculate spacing based on number of cards\n        const totalCards = hiddenCards.length + visibleCards.length;\n        \n        // Use consistent spacing for all players\n        let cardSpacing = totalCards > 5 ? 0.2 : totalCards === 4 ? 0.22 : totalCards === 3 ? 0.25 : 0.5;\n        \n        // Use consistent scale for all players\n        const scale = [0.6, 0.6, 1];\n        \n        // Add hidden cards first\n        hiddenCards.forEach((card, index) => {\n            // Position cards in a horizontal row\n            const xPos = (index - (totalCards - 1) / 2) * cardSpacing;\n            \n            allCards.push({\n                id: `hidden-${player.id}-${index}-${gameId}`,\n                suit: card.suit,\n                value: card.value,\n                flipped: !showAllCards,\n                position: [xPos, 0, 0],\n                rotation: [0, 0, 0],\n                scale,\n                delay: index * 300 // Stagger the animation\n            });\n        });\n        \n        // Add visible cards after hidden cards\n        visibleCards.forEach((card, index) => {\n            const startIndex = hiddenCards.length;\n            const xPos = (startIndex + index - (totalCards - 1) / 2) * cardSpacing;\n            \n            allCards.push({\n                id: `visible-${player.id}-${index}-${gameId}`,\n                suit: card.suit,\n                value: card.value,\n                flipped: false,\n                position: [xPos, 0, 0],\n                rotation: [0, 0, 0],\n                scale,\n                delay: (hiddenCards.length + index) * 300 // Continue staggered animation\n            });\n        });\n        \n        return allCards;\n    };\n\n    const getContainerClass = () => {\n        const baseClass = `player-hand-container`;\n        const statusClass = status;\n        const activeClass = isCurrentTurn ? 'active-turn' : '';\n        const winnerClass = isWinner ? 'winning-player' : '';\n        const playerTypeClass = isHumanPlayer ? 'human-player' : 'bot-player';\n        const animatingClass = animatingDeal ? 'dealing-animation' : '';\n        \n        return `${baseClass} ${statusClass} ${activeClass} ${winnerClass} ${playerTypeClass} ${animatingClass}`;\n    };\n    \n    const getStatusText = () => {\n        switch (status) {\n            case 'active': return isCurrentTurn ? 'Playing...' : 'Waiting';\n            case 'holding': return `Holding${showTotal ? ` at ${total}` : ''}`;\n            case 'eliminated': return 'Busted!';\n            case 'winner': return 'Winner!';\n            default: return '';\n        }\n    };\n\n    return (\n        <div className={getContainerClass()}>\n            <div className=\"player-info\">\n                <h3>{name} {isWinner && gamePhase === 'gameOver' && <span className=\"winner-badge\">👑</span>}</h3>\n                <div className=\"player-status\">\n                    <span>{getStatusText()}</span>\n                    <span>Total: {showTotal ? total : '?'}</span>\n                </div>\n            </div>\n            \n            <div className=\"player-cards-canvas\">\n                <Suspense fallback={<div className=\"loading-cards\">Loading cards...</div>}>\n                    <Canvas\n                        ref={canvasRef}\n                        shadows\n                        key={`canvas-player-${player.id}-${gameId}`}\n                    >\n                        <CameraController />\n                        <ambientLight intensity={0.8} />\n                        <pointLight position={[10, 10, 10]} intensity={1.5} />\n                        <CardScene \n                            cards={prepareCardsForScene()} \n                            cardBackStyle={cardBackStyle}\n                            animatingDeal={animatingDeal}\n                        />\n                    </Canvas>\n                </Suspense>\n            </div>\n        </div>\n    );\n}"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACpE,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AAChE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,qBAAqB;;AAEzD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAE7BJ,SAAS,CAAC,MAAM;IACZe,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BF,MAAM,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtBH,MAAM,CAACI,GAAG,GAAG,EAAE;IACfJ,MAAM,CAACK,sBAAsB,CAAC,CAAC;EACnC,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,OAAO,IAAI;AACf;;AAEA;AAAAD,EAAA,CAbSD,gBAAgB;EAAA,QACFT,QAAQ;AAAA;AAAAiB,EAAA,GADtBR,gBAAgB;AAczB,SAASS,QAAQA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,OAAO;EAAET,QAAQ;EAAEU,QAAQ;EAAEC,KAAK;EAAEC,aAAa;EAAEC,KAAK,GAAG,CAAC;EAAErB,QAAQ,EAAEsB,UAAU,GAAG;AAAM,CAAC,EAAE;EAAAC,GAAA;EAC3H;EACA,MAAMC,YAAY,GAAG3B,SAAS,CAACC,KAAK,CAAC2B,aAAa,EAAE,uBAAuBV,IAAI,IAAIC,KAAK,MAAM,CAAC;EAC/F,MAAMU,WAAW,GAAG7B,SAAS,CAACC,KAAK,CAAC2B,aAAa,EAAE,uBAAuBL,aAAa,MAAM,CAAC;EAE9F5B,SAAS,CAAC,MAAM;IACZgC,YAAY,CAACG,SAAS,GAAG7B,KAAK,CAAC8B,YAAY;IAC3CJ,YAAY,CAACK,SAAS,GAAG/B,KAAK,CAAC8B,YAAY;IAC3CF,WAAW,CAACC,SAAS,GAAG7B,KAAK,CAAC8B,YAAY;IAC1CF,WAAW,CAACG,SAAS,GAAG/B,KAAK,CAAC8B,YAAY;IAC1CJ,YAAY,CAACM,WAAW,GAAG,IAAI;IAC/BJ,WAAW,CAACI,WAAW,GAAG,IAAI;EAClC,CAAC,EAAE,CAACN,YAAY,EAAEE,WAAW,CAAC,CAAC;;EAE/B;EACA,MAAM;IAAEK,GAAG;IAAEC;EAAI,CAAC,GAAGjC,SAAS,CAAC;IAC3BkC,IAAI,EAAEX,UAAU,GAAG;MAAES,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;MAAEC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEE,IAAI,CAACC,EAAE;IAAE,CAAC,GAAG;MAAEJ,GAAG,EAAEvB,QAAQ;MAAEwB,GAAG,EAAEd;IAAS,CAAC;IAC/FkB,EAAE,EAAE;MAAEL,GAAG,EAAEvB,QAAQ;MAAEwB,GAAG,EAAEd;IAAS,CAAC;IACpCG,KAAK,EAAEA,KAAK;IACZgB,MAAM,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,OAAO,EAAE,GAAG;MAAEC,QAAQ,EAAE;IAAG;EAClD,CAAC,CAAC;EAEF,IAAIlB,UAAU,EAAE;IACZ,oBACIpB,OAAA,CAACF,QAAQ,CAACyC,IAAI;MAACjC,QAAQ,EAAEuB,GAAI;MAACb,QAAQ,EAAEc,GAAI;MAACb,KAAK,EAAEA,KAAM;MAAAuB,QAAA,gBACtDxC,OAAA;QAAeyC,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjC7C,OAAA;QACI8C,GAAG,EAAE/B,OAAO,GAAGS,WAAW,GAAGF,YAAa;QAC1CyB,IAAI,EAAEnD,KAAK,CAACoD,UAAW;QACvBC,WAAW,EAAE;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAExB,CAAC,MAAM;IACH,oBACI7C,OAAA;MAAMM,QAAQ,EAAEA,QAAS;MAACU,QAAQ,EAAEA,QAAS;MAACC,KAAK,EAAEA,KAAM;MAAAuB,QAAA,gBACvDxC,OAAA;QAAeyC,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjC7C,OAAA;QACI8C,GAAG,EAAE/B,OAAO,GAAGS,WAAW,GAAGF,YAAa;QAC1CyB,IAAI,EAAEnD,KAAK,CAACoD,UAAW;QACvBC,WAAW,EAAE;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAEf;AACJ;;AAEA;AAAAxB,GAAA,CA/CST,QAAQ;EAAA,QAEQjB,SAAS,EACVA,SAAS,EAYRE,SAAS;AAAA;AAAAqD,GAAA,GAfzBtC,QAAQ;AAgDjB,SAASuC,SAASA,CAAC;EAAEC,KAAK,GAAG,EAAE;EAAElC,aAAa,GAAG,UAAU;EAAEmC,aAAa,GAAG;AAAM,CAAC,EAAE;EAClF,oBACIrD,OAAA,CAAAE,SAAA;IAAAsC,QAAA,EACKY,KAAK,CAACN,GAAG,CAAEQ,IAAI,iBACZtD,OAAA,CAACY,QAAQ;MAELC,IAAI,EAAEyC,IAAI,CAACzC,IAAK;MAChBC,KAAK,EAAEwC,IAAI,CAACxC,KAAM;MAClBC,OAAO,EAAEuC,IAAI,CAACvC,OAAQ;MACtBT,QAAQ,EAAEgD,IAAI,CAAChD,QAAS;MACxBU,QAAQ,EAAEsC,IAAI,CAACtC,QAAS;MACxBC,KAAK,EAAEqC,IAAI,CAACrC,KAAM;MAClBC,aAAa,EAAEA,aAAc;MAC7BC,KAAK,EAAEkC,aAAa,IAAIC,IAAI,CAACnC,KAAK,GAAGmC,IAAI,CAACnC,KAAK,GAAG,CAAE;MACpDrB,QAAQ,EAAEuD;IAAc,GATnBC,IAAI,CAACC,EAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUf,CACJ;EAAC,gBACJ,CAAC;AAEX;AAACW,GAAA,GAnBQL,SAAS;AAqBlB,eAAe,SAASM,UAAUA,CAAC;EAC/BC,MAAM;EACNC,aAAa;EACbC,aAAa;EACbC,SAAS;EACTC,SAAS;EACTC,QAAQ;EACRC,MAAM;EACN9C,aAAa,GAAG;AACpB,CAAC,EAAE;EAAA+C,GAAA;EACC,MAAM;IAAEC,IAAI;IAAEd,KAAK;IAAEe,YAAY;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGZ,MAAM;EACxE,MAAMa,SAAS,GAAGhF,MAAM,CAAC,CAAC;EAC1B,MAAM,CAAC8D,aAAa,EAAEmB,gBAAgB,CAAC,GAAGnF,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMmF,SAAS,GAAGC,UAAU,CAAC,MAAM;MAC/BF,gBAAgB,CAAC,KAAK,CAAC;IAC3B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMG,YAAY,CAACF,SAAS,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnF,SAAS,CAAC,MAAM;IACZ,OAAO,MAAM;MACT,IAAIiF,SAAS,CAACK,OAAO,EAAE;QAAA,IAAAC,qBAAA;QACnB,MAAMC,EAAE,IAAAD,qBAAA,GAAGN,SAAS,CAACK,OAAO,CAACG,KAAK,cAAAF,qBAAA,uBAAvBA,qBAAA,CAAyBC,EAAE;QACtC,IAAIA,EAAE,EAAE;UACJA,EAAE,CAACE,OAAO,CAAC,CAAC;UACZF,EAAE,CAACG,gBAAgB,CAAC,CAAC;UACrB,MAAMC,MAAM,GAAGJ,EAAE,CAACK,UAAU;UAC5B,IAAID,MAAM,IAAIA,MAAM,CAACE,aAAa,EAAE;YAChCF,MAAM,CAACE,aAAa,CAACC,WAAW,CAACH,MAAM,CAAC;UAC5C;QACJ;MACJ;IACJ,CAAC;EACL,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMsB,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,QAAQ,GAAG,EAAE;;IAEnB;IACA,MAAMC,YAAY,GAAG3B,SAAS,KAAK,UAAU,IACzBS,MAAM,KAAK,YAAY,IACvBA,MAAM,KAAK,QAAQ,IACnBT,SAAS,KAAK,WAAW;;IAE7C;IACA,MAAM4B,UAAU,GAAGrB,WAAW,CAACsB,MAAM,GAAGvB,YAAY,CAACuB,MAAM;;IAE3D;IACA,IAAIC,WAAW,GAAGF,UAAU,GAAG,CAAC,GAAG,GAAG,GAAGA,UAAU,KAAK,CAAC,GAAG,IAAI,GAAGA,UAAU,KAAK,CAAC,GAAG,IAAI,GAAG,GAAG;;IAEhG;IACA,MAAMxE,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;;IAE3B;IACAmD,WAAW,CAACwB,OAAO,CAAC,CAACtC,IAAI,EAAEuC,KAAK,KAAK;MACjC;MACA,MAAMC,IAAI,GAAG,CAACD,KAAK,GAAG,CAACJ,UAAU,GAAG,CAAC,IAAI,CAAC,IAAIE,WAAW;MAEzDJ,QAAQ,CAACQ,IAAI,CAAC;QACVxC,EAAE,EAAE,UAAUG,MAAM,CAACH,EAAE,IAAIsC,KAAK,IAAI7B,MAAM,EAAE;QAC5CnD,IAAI,EAAEyC,IAAI,CAACzC,IAAI;QACfC,KAAK,EAAEwC,IAAI,CAACxC,KAAK;QACjBC,OAAO,EAAE,CAACyE,YAAY;QACtBlF,QAAQ,EAAE,CAACwF,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QACtB9E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACnBC,KAAK;QACLE,KAAK,EAAE0E,KAAK,GAAG,GAAG,CAAC;MACvB,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA1B,YAAY,CAACyB,OAAO,CAAC,CAACtC,IAAI,EAAEuC,KAAK,KAAK;MAClC,MAAMG,UAAU,GAAG5B,WAAW,CAACsB,MAAM;MACrC,MAAMI,IAAI,GAAG,CAACE,UAAU,GAAGH,KAAK,GAAG,CAACJ,UAAU,GAAG,CAAC,IAAI,CAAC,IAAIE,WAAW;MAEtEJ,QAAQ,CAACQ,IAAI,CAAC;QACVxC,EAAE,EAAE,WAAWG,MAAM,CAACH,EAAE,IAAIsC,KAAK,IAAI7B,MAAM,EAAE;QAC7CnD,IAAI,EAAEyC,IAAI,CAACzC,IAAI;QACfC,KAAK,EAAEwC,IAAI,CAACxC,KAAK;QACjBC,OAAO,EAAE,KAAK;QACdT,QAAQ,EAAE,CAACwF,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QACtB9E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACnBC,KAAK;QACLE,KAAK,EAAE,CAACiD,WAAW,CAACsB,MAAM,GAAGG,KAAK,IAAI,GAAG,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAON,QAAQ;EACnB,CAAC;EAED,MAAMU,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,SAAS,GAAG,uBAAuB;IACzC,MAAMC,WAAW,GAAG7B,MAAM;IAC1B,MAAM8B,WAAW,GAAGzC,aAAa,GAAG,aAAa,GAAG,EAAE;IACtD,MAAM0C,WAAW,GAAGtC,QAAQ,GAAG,gBAAgB,GAAG,EAAE;IACpD,MAAMuC,eAAe,GAAG1C,aAAa,GAAG,cAAc,GAAG,YAAY;IACrE,MAAM2C,cAAc,GAAGlD,aAAa,GAAG,mBAAmB,GAAG,EAAE;IAE/D,OAAO,GAAG6C,SAAS,IAAIC,WAAW,IAAIC,WAAW,IAAIC,WAAW,IAAIC,eAAe,IAAIC,cAAc,EAAE;EAC3G,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxB,QAAQlC,MAAM;MACV,KAAK,QAAQ;QAAE,OAAOX,aAAa,GAAG,YAAY,GAAG,SAAS;MAC9D,KAAK,SAAS;QAAE,OAAO,UAAUG,SAAS,GAAG,OAAOO,KAAK,EAAE,GAAG,EAAE,EAAE;MAClE,KAAK,YAAY;QAAE,OAAO,SAAS;MACnC,KAAK,QAAQ;QAAE,OAAO,SAAS;MAC/B;QAAS,OAAO,EAAE;IACtB;EACJ,CAAC;EAED,oBACIrE,OAAA;IAAKyG,SAAS,EAAER,iBAAiB,CAAC,CAAE;IAAAzD,QAAA,gBAChCxC,OAAA;MAAKyG,SAAS,EAAC,aAAa;MAAAjE,QAAA,gBACxBxC,OAAA;QAAAwC,QAAA,GAAK0B,IAAI,EAAC,GAAC,EAACH,QAAQ,IAAIF,SAAS,KAAK,UAAU,iBAAI7D,OAAA;UAAMyG,SAAS,EAAC,cAAc;UAAAjE,QAAA,EAAC;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAClG7C,OAAA;QAAKyG,SAAS,EAAC,eAAe;QAAAjE,QAAA,gBAC1BxC,OAAA;UAAAwC,QAAA,EAAOgE,aAAa,CAAC;QAAC;UAAA9D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9B7C,OAAA;UAAAwC,QAAA,GAAM,SAAO,EAACsB,SAAS,GAAGO,KAAK,GAAG,GAAG;QAAA;UAAA3B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEN7C,OAAA;MAAKyG,SAAS,EAAC,qBAAqB;MAAAjE,QAAA,eAChCxC,OAAA,CAACR,QAAQ;QAACkH,QAAQ,eAAE1G,OAAA;UAAKyG,SAAS,EAAC,eAAe;UAAAjE,QAAA,EAAC;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAE;QAAAL,QAAA,eACtExC,OAAA,CAACP,MAAM;UACHkH,GAAG,EAAEpC,SAAU;UACfqC,OAAO;UAAApE,QAAA,gBAGPxC,OAAA,CAACG,gBAAgB;YAAAuC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpB7C,OAAA;YAAc6G,SAAS,EAAE;UAAI;YAAAnE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAChC7C,OAAA;YAAYM,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAE;YAACuG,SAAS,EAAE;UAAI;YAAAnE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACtD7C,OAAA,CAACmD,SAAS;YACNC,KAAK,EAAEkC,oBAAoB,CAAC,CAAE;YAC9BpE,aAAa,EAAEA,aAAc;YAC7BmC,aAAa,EAAEA;UAAc;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC;QAAA,GATG,iBAAiBa,MAAM,CAACH,EAAE,IAAIS,MAAM,EAAE;UAAAtB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUvC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACoB,GAAA,CAnJuBR,UAAU;AAAAqD,GAAA,GAAVrD,UAAU;AAAA,IAAA9C,EAAA,EAAAuC,GAAA,EAAAM,GAAA,EAAAsD,GAAA;AAAAC,YAAA,CAAApG,EAAA;AAAAoG,YAAA,CAAA7D,GAAA;AAAA6D,YAAA,CAAAvD,GAAA;AAAAuD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}