{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { isSoundEnabled, toggleSound } from '../../services/audioService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameBoard({\n  gameState,\n  onDrawCard,\n  onHold,\n  onReset,\n  onReturnHome\n}) {\n  _s();\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    winner: winningPlayerId,\n    gameLog\n  } = gameState;\n\n  // Add state for sound toggle\n  const [soundOn, setSoundOn] = useState(isSoundEnabled());\n\n  // Handle sound toggle\n  const handleToggleSound = () => {\n    const newState = toggleSound();\n    setSoundOn(newState);\n  };\n  // Find the human player\n  const humanPlayerIndex = players.findIndex(player => player.isHuman);\n  const humanPlayer = players[humanPlayerIndex];\n\n  // Arrange players around the table\n  const arrangePlayersForDisplay = () => {\n    if (players.length <= 1) return players;\n\n    // Clone players for manipulation\n    const arrangedPlayers = [...players];\n\n    // Assign positions based on number of players\n    switch (players.length) {\n      case 2:\n        // 2 players: human at bottom, opponent at top\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Find the other player\n        const otherPlayerIdx = humanPlayerIndex === 0 ? 1 : 0;\n        arrangedPlayers[otherPlayerIdx] = {\n          ...players[otherPlayerIdx],\n          position: 'top'\n        };\n        break;\n      case 3:\n        // 3 players: human at bottom, others at top-left and top-right\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Position the other players\n        let position3p = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            arrangedPlayers[i] = {\n              ...players[i],\n              position: position3p === 0 ? 'top-left' : 'top-right'\n            };\n            position3p++;\n          }\n        }\n        break;\n      case 4:\n        // 4 players: human at bottom, opponents at top, left, and right\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Positions for 4 players (excluding human)\n        const positions4p = ['left', 'top', 'right'];\n        let posIdx = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            arrangedPlayers[i] = {\n              ...players[i],\n              position: positions4p[posIdx]\n            };\n            posIdx++;\n          }\n        }\n        break;\n      default:\n        // 5+ players: distribute around the table\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // More positions for additional players\n        const positionsMany = ['top-left', 'top', 'top-right', 'left', 'right'];\n        let posIdxMany = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            if (posIdxMany < positionsMany.length) {\n              arrangedPlayers[i] = {\n                ...players[i],\n                position: positionsMany[posIdxMany]\n              };\n              posIdxMany++;\n            } else {\n              // If more players than positions, double up on some positions\n              arrangedPlayers[i] = {\n                ...players[i],\n                position: positionsMany[posIdxMany % positionsMany.length]\n              };\n              posIdxMany++;\n            }\n          }\n        }\n    }\n    return arrangedPlayers;\n  };\n  // // Dynamically arrange players in a circular layout\n  // const arrangePlayersForDisplay = () => {\n  //     if (players.length <= 1) return players;\n\n  //     const arrangedPlayers = [...players];\n  //     const totalPlayers = players.length;\n  //     const radius = 200; // Adjust as needed\n  //     const centerX = window.innerWidth / 2;\n  //     const centerY = window.innerHeight / 2;\n\n  //     arrangedPlayers.forEach((player, i) => {\n  //         if (i === humanPlayerIndex) {\n  //             arrangedPlayers[i] = { ...player, x: centerX, y: centerY + radius, position: 'bottom' };\n  //         } else {\n  //             const angle = ((i - (i > humanPlayerIndex ? 1 : 0)) * (360 / (totalPlayers - 1))) * (Math.PI / 180);\n  //             arrangedPlayers[i] = {\n  //                 ...player,\n  //                 x: centerX + radius * Math.cos(angle),\n  //                 y: centerY + radius * Math.sin(angle),\n  //                 position: 'auto'\n  //             };\n  //         }\n  //     });\n  //     return arrangedPlayers;\n  // };\n  const arrangedPlayers = arrangePlayersForDisplay();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `sound-toggle ${soundOn ? 'sound-on' : 'sound-off'}`,\n      onClick: handleToggleSound,\n      title: soundOn ? \"Mute Sound\" : \"Enable Sound\",\n      children: soundOn ? 'ðŸ”Š' : 'ðŸ”‡'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: arrangedPlayers.map(player => /*#__PURE__*/_jsxDEV(PlayerHand, {\n          player: player,\n          isCurrentTurn: player.id === currentPlayerIndex && phase === 'playing',\n          isHumanPlayer: player.isHuman,\n          gamePhase: phase,\n          showTotal: player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner',\n          isWinner: player.id === winningPlayerId,\n          gameId: gameState.gameId,\n          position: player.position,\n          cardBackStyle: gameState.cardBackStyle || 'cardback'\n        }, `player-${player.id}-${gameState.gameId || Date.now()}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onDrawCard,\n          disabled: humanPlayer.status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onHold,\n          disabled: humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReset,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReturnHome,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n}\n_s(GameBoard, \"qfijCL9CGh7hZhgc7DQ4CDKjzcQ=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","PlayerHand","GameLog","isSoundEnabled","toggleSound","jsxDEV","_jsxDEV","GameBoard","gameState","onDrawCard","onHold","onReset","onReturnHome","_s","players","currentPlayerIndex","phase","winner","winningPlayerId","gameLog","soundOn","setSoundOn","useState","handleToggleSound","newState","humanPlayerIndex","findIndex","player","isHuman","humanPlayer","arrangePlayersForDisplay","length","arrangedPlayers","position","otherPlayerIdx","position3p","i","positions4p","posIdx","positionsMany","posIdxMany","className","children","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","map","isCurrentTurn","id","isHumanPlayer","gamePhase","showTotal","status","isWinner","gameId","cardBackStyle","Date","now","disabled","total","cards","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js"],"sourcesContent":["import React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { isSoundEnabled, toggleSound } from '../../services/audioService';\n\n\nexport default function GameBoard({ gameState, onDrawCard, onHold, onReset, onReturnHome }) {\n    const { \n        players, \n        currentPlayerIndex, \n        phase, \n        winner: winningPlayerId, \n        gameLog \n    } = gameState;\n\n     // Add state for sound toggle\n     const [soundOn, setSoundOn] = useState(isSoundEnabled());\n    \n     // Handle sound toggle\n     const handleToggleSound = () => {\n         const newState = toggleSound();\n         setSoundOn(newState);\n     };\n    // Find the human player\n    const humanPlayerIndex = players.findIndex(player => player.isHuman);\n    const humanPlayer = players[humanPlayerIndex];\n    \n    // Arrange players around the table\n    const arrangePlayersForDisplay = () => {\n        if (players.length <= 1) return players;\n        \n        // Clone players for manipulation\n        const arrangedPlayers = [...players];\n        \n        // Assign positions based on number of players\n        switch(players.length) {\n            case 2:\n                // 2 players: human at bottom, opponent at top\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n                \n                // Find the other player\n                const otherPlayerIdx = humanPlayerIndex === 0 ? 1 : 0;\n                arrangedPlayers[otherPlayerIdx] = {\n                    ...players[otherPlayerIdx],\n                    position: 'top'\n                };\n                break;\n                \n            case 3:\n                // 3 players: human at bottom, others at top-left and top-right\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n                \n                // Position the other players\n                let position3p = 0;\n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        arrangedPlayers[i] = {\n                            ...players[i],\n                            position: position3p === 0 ? 'top-left' : 'top-right'\n                        };\n                        position3p++;\n                    }\n                }\n                break;\n                \n            case 4:\n                // 4 players: human at bottom, opponents at top, left, and right\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n                \n                // Positions for 4 players (excluding human)\n                const positions4p = ['left', 'top' , 'right'];\n                let posIdx = 0;\n                \n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        arrangedPlayers[i] = {\n                            ...players[i],\n                            position: positions4p[posIdx]\n                        };\n                        posIdx++;\n                    }\n                }\n                break;\n                \n            default:\n                // 5+ players: distribute around the table\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n                \n                // More positions for additional players\n                const positionsMany = ['top-left', 'top', 'top-right', 'left', 'right'];\n                let posIdxMany = 0;\n                \n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        if (posIdxMany < positionsMany.length) {\n                            arrangedPlayers[i] = {\n                                ...players[i],\n                                position: positionsMany[posIdxMany]\n                            };\n                            posIdxMany++;\n                        } else {\n                            // If more players than positions, double up on some positions\n                            arrangedPlayers[i] = {\n                                ...players[i],\n                                position: positionsMany[posIdxMany % positionsMany.length]\n                            };\n                            posIdxMany++;\n                        }\n                    }\n                }\n        }\n        \n        return arrangedPlayers;\n    };\n    // // Dynamically arrange players in a circular layout\n    // const arrangePlayersForDisplay = () => {\n    //     if (players.length <= 1) return players;\n\n    //     const arrangedPlayers = [...players];\n    //     const totalPlayers = players.length;\n    //     const radius = 200; // Adjust as needed\n    //     const centerX = window.innerWidth / 2;\n    //     const centerY = window.innerHeight / 2;\n\n    //     arrangedPlayers.forEach((player, i) => {\n    //         if (i === humanPlayerIndex) {\n    //             arrangedPlayers[i] = { ...player, x: centerX, y: centerY + radius, position: 'bottom' };\n    //         } else {\n    //             const angle = ((i - (i > humanPlayerIndex ? 1 : 0)) * (360 / (totalPlayers - 1))) * (Math.PI / 180);\n    //             arrangedPlayers[i] = {\n    //                 ...player,\n    //                 x: centerX + radius * Math.cos(angle),\n    //                 y: centerY + radius * Math.sin(angle),\n    //                 position: 'auto'\n    //             };\n    //         }\n    //     });\n    //     return arrangedPlayers;\n    // };\n    const arrangedPlayers = arrangePlayersForDisplay();\n\n    return (\n        <div className=\"game-board\">\n            {/* Sound toggle button */}\n            <button \n                className={`sound-toggle ${soundOn ? 'sound-on' : 'sound-off'}`}\n                onClick={handleToggleSound}\n                title={soundOn ? \"Mute Sound\" : \"Enable Sound\"}\n            >\n                {/* Font Awesome or similar icon, or use Unicode characters */}\n                {soundOn ? 'ðŸ”Š' : 'ðŸ”‡'}\n            </button>\n            <div className=\"game-table\">\n                <div className=\"players-container\">\n                    {arrangedPlayers.map((player) => (\n                        <PlayerHand\n                            key={`player-${player.id}-${gameState.gameId || Date.now()}`}\n                            player={player}\n                            isCurrentTurn={player.id === currentPlayerIndex && phase === 'playing'}\n                            isHumanPlayer={player.isHuman}\n                            gamePhase={phase}\n                            showTotal={player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner'}\n                            isWinner={player.id === winningPlayerId}\n                            gameId={gameState.gameId}\n                            position={player.position}\n                            cardBackStyle={gameState.cardBackStyle || 'cardback'}\n                        />\n                    ))}\n                </div>\n                \n                {humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && (\n                    <div className=\"player-controls\">\n                        <button \n                            className=\"action-button\" \n                            onClick={onDrawCard}\n                            disabled={humanPlayer.status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        <button \n                            className=\"action-button\" \n                            onClick={onHold}\n                            disabled={humanPlayer.status !== 'active' || humanPlayer.total < 11 ||Â humanPlayer.cards.length < 2}\n                        >\n                            Hold\n                        </button>\n                    </div>\n                )}\n                {phase === 'gameOver' && (\n                <div className=\"game-info\">\n                    {/* <GameLog messages={gameLog || []} /> */}\n                    \n                    \n                        <div className=\"game-over-controls\">\n                            <button className=\"action-button\" onClick={onReset}>Play Again</button>\n                            <button className=\"action-button\" onClick={onReturnHome}>Main Menu</button>\n                        </div>\n                    \n                </div>\n                )}\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}