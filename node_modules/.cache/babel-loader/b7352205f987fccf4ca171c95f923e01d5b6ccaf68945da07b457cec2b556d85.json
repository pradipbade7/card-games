{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/CardDeck.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useLoader } from '@react-three/fiber';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardDeck = () => {\n  _s2();\n  const [cards, setCards] = useState([]);\n  const cardBackTexture = useLoader(THREE.TextureLoader, '/assets/cards/backs/cardback.png');\n  useEffect(() => {\n    const suits = ['clubs', 'diamonds', 'hearts', 'spades'];\n    const ranks = Array.from({\n      length: 13\n    }, (_, i) => i + 1); // 1 to 13\n\n    const loadedCards = suits.flatMap(suit => {\n      var _s = $RefreshSig$();\n      return _s(ranks.map(_s(rank => {\n        _s();\n        const texture = useLoader(THREE.TextureLoader, `/assets/cards/faces/${suit}/${rank}.png`);\n        return {\n          suit,\n          rank,\n          texture\n        };\n      }, \"DPn9Ts0h3TXc07M7VbzN9xij6Hs=\", false, function () {\n        return [useLoader];\n      })), \"DPn9Ts0h3TXc07M7VbzN9xij6Hs=\", false, function () {\n        return [useLoader];\n      });\n    });\n    setCards(loadedCards);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [index % 13 * 1.5, Math.floor(index / 13) * 0.2, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1, 1.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: card.texture || cardBackTexture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n_s2(CardDeck, \"eOMoWPJlJ/KrRWuFBqD6yjKsu+4=\", false, function () {\n  return [useLoader];\n});\n_c = CardDeck;\nexport default CardDeck;\nvar _c;\n$RefreshReg$(_c, \"CardDeck\");","map":{"version":3,"names":["React","useEffect","useState","THREE","useLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","CardDeck","_s2","cards","setCards","cardBackTexture","TextureLoader","suits","ranks","Array","from","length","_","i","loadedCards","flatMap","suit","_s","$RefreshSig$","map","rank","texture","children","card","index","position","Math","floor","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/CardDeck.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useLoader } from '@react-three/fiber';\n\nconst CardDeck = () => {\n    const [cards, setCards] = useState([]);\n    const cardBackTexture = useLoader(THREE.TextureLoader, '/assets/cards/backs/cardback.png');\n\n    useEffect(() => {\n        const suits = ['clubs', 'diamonds', 'hearts', 'spades'];\n        const ranks = Array.from({ length: 13 }, (_, i) => i + 1); // 1 to 13\n\n        const loadedCards = suits.flatMap(suit =>\n            ranks.map(rank => {\n                const texture = useLoader(THREE.TextureLoader, `/assets/cards/faces/${suit}/${rank}.png`);\n                return { suit, rank, texture };\n            })\n        );\n\n        setCards(loadedCards);\n    }, []);\n\n    return (\n        <>\n            {cards.map((card, index) => (\n                <mesh key={index} position={[index % 13 * 1.5, Math.floor(index / 13) * 0.2, 0]}>\n                    <planeGeometry args={[1, 1.5]} />\n                    <meshBasicMaterial map={card.texture || cardBackTexture} />\n                </mesh>\n            ))}\n        </>\n    );\n};\n\nexport default CardDeck;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMW,eAAe,GAAGT,SAAS,CAACD,KAAK,CAACW,aAAa,EAAE,kCAAkC,CAAC;EAE1Fb,SAAS,CAAC,MAAM;IACZ,MAAMc,KAAK,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACvD,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE3D,MAAMC,WAAW,GAAGP,KAAK,CAACQ,OAAO,CAACC,IAAI;MAAA,IAAAC,EAAA,GAAAC,YAAA;MAAA,OAAAD,EAAA,CAClCT,KAAK,CAACW,GAAG,CAAAF,EAAA,CAACG,IAAI,IAAI;QAAAH,EAAA;QACd,MAAMI,OAAO,GAAGzB,SAAS,CAACD,KAAK,CAACW,aAAa,EAAE,uBAAuBU,IAAI,IAAII,IAAI,MAAM,CAAC;QACzF,OAAO;UAAEJ,IAAI;UAAEI,IAAI;UAAEC;QAAQ,CAAC;MAClC,CAAC;QAAA,QAFmBzB,SAAS;MAAA,EAE5B,CAAC;QAAA,QAFkBA,SAAS;MAAA;IAAA,CAGjC,CAAC;IAEDQ,QAAQ,CAACU,WAAW,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIhB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,EACKnB,KAAK,CAACgB,GAAG,CAAC,CAACI,IAAI,EAAEC,KAAK,kBACnB1B,OAAA;MAAkB2B,QAAQ,EAAE,CAACD,KAAK,GAAG,EAAE,GAAG,GAAG,EAAEE,IAAI,CAACC,KAAK,CAACH,KAAK,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAE;MAAAF,QAAA,gBAC5ExB,OAAA;QAAe8B,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjClC,OAAA;QAAmBqB,GAAG,EAAEI,IAAI,CAACF,OAAO,IAAIhB;MAAgB;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFpDR,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACT;EAAC,gBACJ,CAAC;AAEX,CAAC;AAAC9B,GAAA,CA5BID,QAAQ;EAAA,QAEcL,SAAS;AAAA;AAAAqC,EAAA,GAF/BhC,QAAQ;AA8Bd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}