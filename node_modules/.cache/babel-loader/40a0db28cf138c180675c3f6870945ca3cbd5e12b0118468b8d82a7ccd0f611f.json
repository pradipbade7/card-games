{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js\";\nimport React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameBoard({\n  gameState,\n  onDrawCard,\n  onHold,\n  onReset,\n  onReturnHome\n}) {\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    winner: winningPlayerId,\n    gameLog,\n    cardBackStyle\n  } = gameState;\n\n  // Find the human player\n  const humanPlayerIndex = players.findIndex(player => player.isHuman);\n  const humanPlayer = players[humanPlayerIndex];\n\n  // Arrange players around the table in a circle\n  const arrangePlayersForDisplay = () => {\n    if (players.length <= 1) return players;\n\n    // Clone players for manipulation\n    const arrangedPlayers = [...players];\n\n    // Always put human player at the bottom (0 degrees)\n    arrangedPlayers[humanPlayerIndex] = {\n      ...humanPlayer,\n      position: 'bottom'\n    };\n\n    // Calculate positions for other players in clockwise order\n    const totalPlayers = players.length;\n    const angleBetweenPlayers = 360 / totalPlayers;\n\n    // Start from left side and go clockwise\n    let currentBotIndex = 0;\n    for (let i = 0; i < totalPlayers; i++) {\n      if (i !== humanPlayerIndex) {\n        // Calculate this bot's angle (start from left, which is 270 + angle/2)\n        // We add angle/2 to center the first bot on the left side\n        const startAngle = 270 + angleBetweenPlayers / 2;\n        const angle = (startAngle + currentBotIndex * angleBetweenPlayers) % 360;\n\n        // Determine position based on angle\n        let position;\n        if (angle >= 0 && angle < 60) {\n          position = 'bottom-right';\n        } else if (angle >= 60 && angle < 120) {\n          position = 'right';\n        } else if (angle >= 120 && angle < 180) {\n          position = 'top-right';\n        } else if (angle >= 180 && angle < 240) {\n          position = 'top';\n        } else if (angle >= 240 && angle < 300) {\n          position = 'top-left';\n        } else {\n          // 300-360\n          position = 'left';\n        }\n        arrangedPlayers[i] = {\n          ...players[i],\n          position: position\n        };\n        currentBotIndex++;\n      }\n    }\n    return arrangedPlayers;\n  };\n  const arrangedPlayers = arrangePlayersForDisplay();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: arrangedPlayers.map(player => /*#__PURE__*/_jsxDEV(PlayerHand, {\n          player: player,\n          isCurrentTurn: player.id === currentPlayerIndex && phase === 'playing',\n          isHumanPlayer: player.isHuman,\n          gamePhase: phase,\n          showTotal: player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner',\n          isWinner: player.id === winningPlayerId,\n          gameId: gameState.gameId,\n          position: player.position,\n          cardBackStyle: cardBackStyle || 'cardback'\n        }, `player-${player.id}-${gameState.gameId || Date.now()}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), phase === 'playing' && humanPlayer.id === currentPlayerIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onDrawCard,\n          disabled: humanPlayer.status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onHold,\n          disabled: humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(GameLog, {\n          messages: gameLog || []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReset,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReturnHome,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","PlayerHand","GameLog","jsxDEV","_jsxDEV","GameBoard","gameState","onDrawCard","onHold","onReset","onReturnHome","players","currentPlayerIndex","phase","winner","winningPlayerId","gameLog","cardBackStyle","humanPlayerIndex","findIndex","player","isHuman","humanPlayer","arrangePlayersForDisplay","length","arrangedPlayers","position","totalPlayers","angleBetweenPlayers","currentBotIndex","i","startAngle","angle","className","children","map","isCurrentTurn","id","isHumanPlayer","gamePhase","showTotal","status","isWinner","gameId","Date","now","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","total","cards","messages","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js"],"sourcesContent":["import React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\n\nexport default function GameBoard({ gameState, onDrawCard, onHold, onReset, onReturnHome }) {\n    const { \n        players, \n        currentPlayerIndex, \n        phase, \n        winner: winningPlayerId, \n        gameLog,\n        cardBackStyle\n    } = gameState;\n\n    // Find the human player\n    const humanPlayerIndex = players.findIndex(player => player.isHuman);\n    const humanPlayer = players[humanPlayerIndex];\n    \n    // Arrange players around the table in a circle\n    const arrangePlayersForDisplay = () => {\n        if (players.length <= 1) return players;\n        \n        // Clone players for manipulation\n        const arrangedPlayers = [...players];\n        \n        // Always put human player at the bottom (0 degrees)\n        arrangedPlayers[humanPlayerIndex] = {\n            ...humanPlayer,\n            position: 'bottom'\n        };\n        \n        // Calculate positions for other players in clockwise order\n        const totalPlayers = players.length;\n        const angleBetweenPlayers = 360 / totalPlayers;\n        \n        // Start from left side and go clockwise\n        let currentBotIndex = 0;\n        \n        for (let i = 0; i < totalPlayers; i++) {\n            if (i !== humanPlayerIndex) {\n                // Calculate this bot's angle (start from left, which is 270 + angle/2)\n                // We add angle/2 to center the first bot on the left side\n                const startAngle = 270 + (angleBetweenPlayers / 2);\n                const angle = (startAngle + (currentBotIndex * angleBetweenPlayers)) % 360;\n                \n                // Determine position based on angle\n                let position;\n                \n                if (angle >= 0 && angle < 60) {\n                    position = 'bottom-right';\n                } else if (angle >= 60 && angle < 120) {\n                    position = 'right';\n                } else if (angle >= 120 && angle < 180) {\n                    position = 'top-right';\n                } else if (angle >= 180 && angle < 240) {\n                    position = 'top';\n                } else if (angle >= 240 && angle < 300) {\n                    position = 'top-left';\n                } else { // 300-360\n                    position = 'left';\n                }\n                \n                arrangedPlayers[i] = {\n                    ...players[i],\n                    position: position\n                };\n                \n                currentBotIndex++;\n            }\n        }\n        \n        return arrangedPlayers;\n    };\n    \n    const arrangedPlayers = arrangePlayersForDisplay();\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"game-table\">\n                <div className=\"players-container\">\n                    {arrangedPlayers.map(player => (\n                        <PlayerHand \n                            key={`player-${player.id}-${gameState.gameId || Date.now()}`}\n                            player={player}\n                            isCurrentTurn={player.id === currentPlayerIndex && phase === 'playing'}\n                            isHumanPlayer={player.isHuman}\n                            gamePhase={phase}\n                            showTotal={player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner'}\n                            isWinner={player.id === winningPlayerId}\n                            gameId={gameState.gameId}\n                            position={player.position}\n                            cardBackStyle={cardBackStyle || 'cardback'}\n                        />\n                    ))}\n                </div>\n                \n                {phase === 'playing' && humanPlayer.id === currentPlayerIndex && (\n                    <div className=\"player-controls\">\n                        <button \n                            className=\"action-button\"\n                            onClick={onDrawCard}\n                            disabled={humanPlayer.status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        \n                        <button \n                            className=\"action-button\"\n                            onClick={onHold}\n                            disabled={humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2}\n                        >\n                            Hold\n                        </button>\n                    </div>\n                )}\n                \n                <div className=\"game-info\">\n                    <GameLog messages={gameLog || []} />\n                    \n                    {phase === 'gameOver' && (\n                        <div className=\"game-over-controls\">\n                            <button className=\"action-button\" onClick={onReset}>Play Again</button>\n                            <button className=\"action-button\" onClick={onReturnHome}>Main Menu</button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}