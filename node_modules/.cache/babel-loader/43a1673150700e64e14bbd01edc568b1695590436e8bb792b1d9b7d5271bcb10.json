{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Card({\n  suit,\n  value,\n  position = [0, 0, 0],\n  // rotation = [0, 0, 0], \n  onClick,\n  flipped = false\n}) {\n  _s();\n  const meshRef = useRef();\n  const [hovered, setHovered] = useState(false);\n\n  // Load textures unconditionally to follow React Hook rules\n  const frontTexturePath = `/assets/cards/faces/${suit}/${value}.png`;\n  const backTexturePath = '/assets/cards/backs/cardback.png';\n\n  // Load textures\n  const frontTexture = useLoader(THREE.TextureLoader, frontTexturePath);\n  const backTexture = useLoader(THREE.TextureLoader, backTexturePath);\n\n  // Card dimensions (standard playing card ratio)\n  const width = 1;\n  const height = 1.4;\n\n  // Handle hover state\n  const onPointerOver = () => setHovered(true);\n  const onPointerOut = () => setHovered(false);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: position\n    //rotation={rotation}\n    ,\n    onClick: onClick,\n    onPointerOver: onPointerOver,\n    onPointerOut: onPointerOut,\n    scale: hovered ? [1.1, 1.1, 1.1] : [1, 1, 1],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [width, height]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: flipped ? backTexture : frontTexture,\n      side: THREE.DoubleSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(Card, \"duvcsPSlI1jpkA4EPIvUbHNsN1I=\", false, function () {\n  return [useLoader, useLoader];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useRef","useState","useLoader","THREE","jsxDEV","_jsxDEV","Card","suit","value","position","onClick","flipped","_s","meshRef","hovered","setHovered","frontTexturePath","backTexturePath","frontTexture","TextureLoader","backTexture","width","height","onPointerOver","onPointerOut","ref","scale","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","DoubleSide","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nexport default function Card({ \n  suit, \n  value, \n  position = [0, 0, 0], \n // rotation = [0, 0, 0], \n  onClick, \n  flipped = false \n}) {\n  const meshRef = useRef();\n  const [hovered, setHovered] = useState(false);\n  \n  // Load textures unconditionally to follow React Hook rules\n  const frontTexturePath = `/assets/cards/faces/${suit}/${value}.png`;\n  const backTexturePath = '/assets/cards/backs/cardback.png';\n  \n  // Load textures\n  const frontTexture = useLoader(THREE.TextureLoader, frontTexturePath);\n  const backTexture = useLoader(THREE.TextureLoader, backTexturePath);\n  \n  // Card dimensions (standard playing card ratio)\n  const width = 1;\n  const height = 1.4;\n  \n  // Handle hover state\n  const onPointerOver = () => setHovered(true);\n  const onPointerOut = () => setHovered(false);\n  \n  return (\n    <mesh\n      ref={meshRef}\n      position={position}\n      //rotation={rotation}\n      onClick={onClick}\n      onPointerOver={onPointerOver}\n      onPointerOut={onPointerOut}\n      scale={hovered ? [1.1, 1.1, 1.1] : [1, 1, 1]}\n    >\n      <planeGeometry args={[width, height]} />\n      <meshStandardMaterial \n        map={flipped ? backTexture : frontTexture}\n        side={THREE.DoubleSide}\n      />\n    </mesh>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,IAAIA,CAAC;EAC3BC,IAAI;EACJC,KAAK;EACLC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrB;EACCC,OAAO;EACPC,OAAO,GAAG;AACZ,CAAC,EAAE;EAAAC,EAAA;EACD,MAAMC,OAAO,GAAGb,MAAM,CAAC,CAAC;EACxB,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMe,gBAAgB,GAAG,uBAAuBT,IAAI,IAAIC,KAAK,MAAM;EACnE,MAAMS,eAAe,GAAG,kCAAkC;;EAE1D;EACA,MAAMC,YAAY,GAAGhB,SAAS,CAACC,KAAK,CAACgB,aAAa,EAAEH,gBAAgB,CAAC;EACrE,MAAMI,WAAW,GAAGlB,SAAS,CAACC,KAAK,CAACgB,aAAa,EAAEF,eAAe,CAAC;;EAEnE;EACA,MAAMI,KAAK,GAAG,CAAC;EACf,MAAMC,MAAM,GAAG,GAAG;;EAElB;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAMR,UAAU,CAAC,IAAI,CAAC;EAC5C,MAAMS,YAAY,GAAGA,CAAA,KAAMT,UAAU,CAAC,KAAK,CAAC;EAE5C,oBACEV,OAAA;IACEoB,GAAG,EAAEZ,OAAQ;IACbJ,QAAQ,EAAEA;IACV;IAAA;IACAC,OAAO,EAAEA,OAAQ;IACjBa,aAAa,EAAEA,aAAc;IAC7BC,YAAY,EAAEA,YAAa;IAC3BE,KAAK,EAAEZ,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;IAAAa,QAAA,gBAE7CtB,OAAA;MAAeuB,IAAI,EAAE,CAACP,KAAK,EAAEC,MAAM;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxC3B,OAAA;MACE4B,GAAG,EAAEtB,OAAO,GAAGS,WAAW,GAAGF,YAAa;MAC1CgB,IAAI,EAAE/B,KAAK,CAACgC;IAAW;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX;AAACpB,EAAA,CA5CuBN,IAAI;EAAA,QAgBLJ,SAAS,EACVA,SAAS;AAAA;AAAAkC,EAAA,GAjBP9B,IAAI;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}