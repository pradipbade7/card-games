{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport { textureManager } from '../utils/textureLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now()\n  });\n\n  // Preload all card textures when the component mounts\n  useEffect(() => {\n    // Generate paths for all card textures\n    const cardPaths = [];\n    cardUtils.suits.forEach(suit => {\n      cardUtils.values.forEach(value => {\n        cardPaths.push(`/assets/cards/faces/${suit}/${value}.png`);\n      });\n    });\n\n    // Add card back texture\n    cardPaths.push('/assets/cards/backs/cardback.png');\n\n    // Preload all textures\n    textureManager.preloadTextures(cardPaths);\n\n    // Clean up textures when component unmounts\n    return () => {\n      textureManager.clearCache();\n    };\n  }, []);\n\n  // Initialize the game with the selected number of players\n  const setupGame = numPlayers => {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    // Create players (1 human + bots)\n    for (let i = 0; i < numPlayers; i++) {\n      const playerName = i === 0 ? 'You' : `Bot ${i}`;\n      const {\n        drawn,\n        remaining\n      } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n      deck = remaining;\n      const player = {\n        id: i,\n        name: playerName,\n        isHuman: i === 0,\n        cards: [...drawn],\n        hiddenCards: i === 0 ? [] : [...drawn],\n        visibleCards: i === 0 ? [...drawn] : [],\n        total: cardUtils.calculateTotal(drawn),\n        status: 'active'\n      };\n      players.push(player);\n      if (i === 0) {\n        initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n      } else {\n        initialLog.push(`${playerName} drew a card.`);\n      }\n    }\n    initialLog.push(\"Your turn.\");\n    setGameState({\n      phase: 'playing',\n      players,\n      deck,\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: initialLog,\n      gameId: Date.now()\n    });\n  };\n\n  // Handle player's decision to draw a card\n  // Update the handleDrawCard function to ensure one player completes their turn before moving to the next\n\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n    // Draw a card from the deck\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n\n    // Update player's cards and total\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n\n    // Log the action\n    const actionLog = `${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`;\n\n    // Check if player reached 17\n    if (player.total === 17) {\n      player.status = 'winner';\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n      });\n      return;\n    }\n\n    // Check if player exceeded 17\n    if (player.total > 17) {\n      player.status = 'eliminated';\n\n      // Check if all players are eliminated or if the game is over\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} exceeded 17 and is eliminated!`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: remaining,\n          phase: 'revealing',\n          // Set to revealing phase instead of gameOver\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          // Store the winner temporarily\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n        });\n        return;\n      }\n\n      // Find next active player\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n      });\n      return;\n    }\n\n    // If player's total is less than 11, they must continue drawing\n    const mustContinue = player.total < 11;\n    if (mustContinue) {\n      // Player must continue drawing\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else if (player.isHuman) {\n      // Human player can choose to draw again or hold\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else {\n      // For bots, decide whether to draw or hold in the useEffect\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    }\n  };\n\n  // Handle player's decision to hold\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n    // Check if player is allowed to hold (total must be 11-16)\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n    // Find next active player\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    // Check if all players are holding or eliminated\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      // Find winner with highest total not exceeding 17\n      let maxTotal = 0;\n      let winnerIndex = -1;\n      updatedPlayers.forEach((p, idx) => {\n        if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n          maxTotal = p.total;\n          winnerIndex = idx;\n        }\n      });\n      if (winnerIndex !== -1) {\n        updatedPlayers[winnerIndex].status = 'winner';\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          winner: winnerIndex,\n          gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`]\n        });\n        return;\n      }\n    }\n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    });\n  };\n\n  // Add this function inside your Game component, before the return statement\n  const determineWinner = players => {\n    // Return early if any player has already won with exactly 17\n    const exactWinner = players.findIndex(p => p.total === 17);\n    if (exactWinner !== -1) {\n      return {\n        winnerIndex: exactWinner,\n        winMessage: `${players[exactWinner].name} won with exactly 17!`\n      };\n    }\n\n    // Check if all players are eliminated\n    const allEliminated = players.every(p => p.status === 'eliminated');\n    if (allEliminated) {\n      return {\n        winnerIndex: -1,\n        winMessage: 'All players exceeded 17. Game is void.'\n      };\n    }\n\n    // Find player with highest total not exceeding 17\n    let maxTotal = 0;\n    let winnerIndex = -1;\n    players.forEach((player, idx) => {\n      if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n        maxTotal = player.total;\n        winnerIndex = idx;\n      }\n    });\n    if (winnerIndex !== -1) {\n      return {\n        winnerIndex,\n        winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n      };\n    }\n\n    // No winner could be determined (should never happen if game logic is correct)\n    return {\n      winnerIndex: -1,\n      winMessage: 'No winner could be determined.'\n    };\n  };\n\n  // Add this function to check if the game is over\n  // Modify the checkGameEnd function to add a reveal phase\n  const checkGameEnd = (updatedPlayers, currentAction = \"\") => {\n    // Check if game should end (all players are holding or eliminated)\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      // Determine winner, but don't set the winner status yet\n      const {\n        winnerIndex,\n        winMessage\n      } = determineWinner(updatedPlayers);\n\n      // We'll set all players to 'revealing' status first\n      updatedPlayers.forEach(player => {\n        if (player.status !== 'eliminated') {\n          player.status = 'revealing';\n        }\n      });\n      return {\n        gameOver: true,\n        revealPhase: true,\n        // Add a reveal phase flag\n        players: updatedPlayers,\n        winner: winnerIndex,\n        winnerMessage: winMessage,\n        message: [currentAction].filter(Boolean) // Only include the current action\n      };\n    }\n    return {\n      gameOver: false\n    };\n  };\n\n  // Update the bot decision-making logic in the useEffect\n\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    const botTurn = setTimeout(() => {\n      // Get visible cards of other players (excluding first cards of bots)\n      const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n        if (index === gameState.currentPlayerIndex) return [];\n        return player.visibleCards;\n      }).filter(cards => cards.length > 0);\n\n      // Force bot to draw at least one card after their initial hidden card\n      // A player should have at least 2 cards total (1 hidden + 1 visible)\n      const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n\n      // Decide whether to draw or hold\n      if (mustDrawFirstCard || currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        // Bot decides to hold\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        // Find next active player\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        // Check if all players are holding or eliminated\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        if (allDone) {\n          // Check if game should end using the shared game end logic\n          const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n          if (gameEndCheck.gameOver) {\n            setGameState({\n              ...gameState,\n              players: gameEndCheck.players,\n              deck: gameState.deck,\n              phase: 'revealing',\n              revealPhase: true,\n              pendingWinner: gameEndCheck.winner,\n              pendingWinnerMessage: gameEndCheck.winnerMessage,\n              gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n            });\n            return;\n          }\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n        });\n      }\n    }, 1000); // 1 second delay for bot actions\n\n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n\n  // Add this useEffect to handle the reveal phase\n  useEffect(() => {\n    // Only run this effect when we're in the revealing phase\n    if (gameState.phase === 'revealing' && gameState.revealPhase) {\n      const revealTimer = setTimeout(() => {\n        const updatedPlayers = [...gameState.players];\n\n        // After revealing, set the winner status\n        if (gameState.pendingWinner !== -1) {\n          updatedPlayers[gameState.pendingWinner].status = 'winner';\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          revealPhase: false,\n          winner: gameState.pendingWinner,\n          gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n        });\n      }, 500); // 2 second delay to allow players to see all cards\n\n      return () => clearTimeout(revealTimer);\n    }\n  }, [gameState.phase, gameState.revealPhase]);\n\n  // Update resetGame to avoid texture reloading issues\n  const resetGame = () => {\n    const numPlayers = gameState.players.length;\n    setupGame(numPlayers);\n  };\n  const returnToHome = () => {\n    // Reset everything and return to setup phase\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n  // In your return statement, pass the gameId to GameBoard:\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: gameState.phase === 'setup' ? /*#__PURE__*/_jsxDEV(GameSetup, {\n      onSetupComplete: setupGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameBoard, {\n      gameState: gameState,\n      onDrawCard: handleDrawCard,\n      onHold: handleHold,\n      onReset: resetGame,\n      onReturnHome: returnToHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"/MsyCUgaIGzpeRSR5C5NW/n0Jy0=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","cardUtils","GameSetup","GameBoard","textureManager","jsxDEV","_jsxDEV","Game","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","gameId","Date","now","cardPaths","suits","forEach","suit","values","value","push","preloadTextures","clearCache","setupGame","numPlayers","shuffle","generateDeck","initialLog","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","getCardName","handleDrawCard","currentPlayer","updatedPlayers","actionLog","gameEndCheck","checkGameEnd","gameOver","revealPhase","pendingWinner","pendingWinnerMessage","winnerMessage","message","nextPlayerIndex","length","mustContinue","handleHold","allDone","every","p","maxTotal","winnerIndex","idx","determineWinner","exactWinner","findIndex","winMessage","allEliminated","currentAction","filter","Boolean","botTurn","setTimeout","otherPlayersVisibleCards","map","index","mustDrawFirstCard","shouldBotDraw","clearTimeout","revealTimer","resetGame","returnToHome","className","children","onSetupComplete","fileName","_jsxFileName","lineNumber","columnNumber","onDrawCard","onHold","onReset","onReturnHome","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport { textureManager } from '../utils/textureLoader';\n\nexport default function Game() {\n    const [gameState, setGameState] = useState({\n        phase: 'setup',\n        players: [],\n        deck: [],\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: [],\n        gameId: Date.now()\n    });\n\n// Preload all card textures when the component mounts\nuseEffect(() => {\n    // Generate paths for all card textures\n    const cardPaths = [];\n    cardUtils.suits.forEach(suit => {\n        cardUtils.values.forEach(value => {\n            cardPaths.push(`/assets/cards/faces/${suit}/${value}.png`);\n        });\n    });\n    \n    // Add card back texture\n    cardPaths.push('/assets/cards/backs/cardback.png');\n    \n    // Preload all textures\n    textureManager.preloadTextures(cardPaths);\n    \n    // Clean up textures when component unmounts\n    return () => {\n        textureManager.clearCache();\n    };\n}, []);\n\n// Initialize the game with the selected number of players\nconst setupGame = (numPlayers) => {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n    \n    // Create players (1 human + bots)\n    for (let i = 0; i < numPlayers; i++) {\n        const playerName = i === 0 ? 'You' : `Bot ${i}`;\n        const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n        const drawnCard = drawn[0];\n        deck = remaining;\n        \n        const player = {\n            id: i,\n            name: playerName,\n            isHuman: i === 0,\n            cards: [...drawn],\n            hiddenCards: i === 0 ? [] : [...drawn],\n            visibleCards: i === 0 ? [...drawn] : [],\n            total: cardUtils.calculateTotal(drawn),\n            status: 'active'\n        };\n        \n        players.push(player);\n        \n        if (i === 0) {\n            initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n        } else {\n            initialLog.push(`${playerName} drew a card.`);\n        }\n    }\n    \n    initialLog.push(\"Your turn.\");\n    \n    setGameState({\n        phase: 'playing',\n        players,\n        deck,\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: initialLog,\n        gameId: Date.now()\n    });\n};\n\n    // Handle player's decision to draw a card\n    // Update the handleDrawCard function to ensure one player completes their turn before moving to the next\n\n    const handleDrawCard = () => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n        // Draw a card from the deck\n        const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n        const drawnCard = drawn[0];\n\n        // Update player's cards and total\n        const updatedPlayers = [...gameState.players];\n        const player = updatedPlayers[gameState.currentPlayerIndex];\n\n        player.cards = [...player.cards, drawnCard];\n        player.visibleCards = [...player.visibleCards, drawnCard];\n        player.total = cardUtils.calculateTotal(player.cards);\n\n        // Log the action\n        const actionLog = `${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`;\n\n        // Check if player reached 17\n        if (player.total === 17) {\n            player.status = 'winner';\n\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                phase: 'gameOver',\n                winner: gameState.currentPlayerIndex,\n                gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n            });\n            return;\n        }\n\n        // Check if player exceeded 17\n        if (player.total > 17) {\n            player.status = 'eliminated';\n\n            // Check if all players are eliminated or if the game is over\n            const gameEndCheck = checkGameEnd(updatedPlayers,\n                `${player.name} exceeded 17 and is eliminated!`);\n\n            if (gameEndCheck.gameOver) {\n                setGameState({\n                    ...gameState,\n                    players: gameEndCheck.players,\n                    deck: remaining,\n                    phase: 'revealing', // Set to revealing phase instead of gameOver\n                    revealPhase: true,\n                    pendingWinner: gameEndCheck.winner, // Store the winner temporarily\n                    pendingWinnerMessage: gameEndCheck.winnerMessage,\n                    gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n                });\n                return;\n            }\n\n            // Find next active player\n            let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n            while (\n                nextPlayerIndex !== gameState.currentPlayerIndex &&\n                (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                    updatedPlayers[nextPlayerIndex].status === 'holding')\n            ) {\n                nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n            }\n\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                currentPlayerIndex: nextPlayerIndex,\n                gameLog: [...gameState.gameLog, actionLog,\n                `${player.name} exceeded 17 and is eliminated!`,\n                `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n            });\n            return;\n        }\n\n        // If player's total is less than 11, they must continue drawing\n        const mustContinue = player.total < 11;\n\n        if (mustContinue) {\n            // Player must continue drawing\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        } else if (player.isHuman) {\n            // Human player can choose to draw again or hold\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        } else {\n            // For bots, decide whether to draw or hold in the useEffect\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        }\n    };\n\n    // Handle player's decision to hold\n    const handleHold = () => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        // Check if player is allowed to hold (total must be 11-16)\n        if (currentPlayer.total < 11) {\n            setGameState({\n                ...gameState,\n                gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n            });\n            return;\n        }\n\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        // Find next active player\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (\n            nextPlayerIndex !== gameState.currentPlayerIndex &&\n            (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n            nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        // Check if all players are holding or eliminated\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n\n        if (allDone) {\n            // Find winner with highest total not exceeding 17\n            let maxTotal = 0;\n            let winnerIndex = -1;\n\n            updatedPlayers.forEach((p, idx) => {\n                if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n                    maxTotal = p.total;\n                    winnerIndex = idx;\n                }\n            });\n\n            if (winnerIndex !== -1) {\n                updatedPlayers[winnerIndex].status = 'winner';\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    phase: 'gameOver',\n                    winner: winnerIndex,\n                    gameLog: [...gameState.gameLog,\n                    `You decided to hold with a total of ${currentPlayer.total}.`,\n                    `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`\n                    ]\n                });\n                return;\n            }\n        }\n\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            currentPlayerIndex: nextPlayerIndex,\n            gameLog: [...gameState.gameLog,\n            `You decided to hold with a total of ${currentPlayer.total}.`,\n            `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n            ]\n        });\n    };\n\n\n    // Add this function inside your Game component, before the return statement\n    const determineWinner = (players) => {\n        // Return early if any player has already won with exactly 17\n        const exactWinner = players.findIndex(p => p.total === 17);\n        if (exactWinner !== -1) {\n            return {\n                winnerIndex: exactWinner,\n                winMessage: `${players[exactWinner].name} won with exactly 17!`\n            };\n        }\n\n        // Check if all players are eliminated\n        const allEliminated = players.every(p => p.status === 'eliminated');\n        if (allEliminated) {\n            return {\n                winnerIndex: -1,\n                winMessage: 'All players exceeded 17. Game is void.'\n            };\n        }\n\n        // Find player with highest total not exceeding 17\n        let maxTotal = 0;\n        let winnerIndex = -1;\n\n        players.forEach((player, idx) => {\n            if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n                maxTotal = player.total;\n                winnerIndex = idx;\n            }\n        });\n\n        if (winnerIndex !== -1) {\n            return {\n                winnerIndex,\n                winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n            };\n        }\n\n        // No winner could be determined (should never happen if game logic is correct)\n        return {\n            winnerIndex: -1,\n            winMessage: 'No winner could be determined.'\n        };\n    };\n\n    // Add this function to check if the game is over\n    // Modify the checkGameEnd function to add a reveal phase\n    const checkGameEnd = (updatedPlayers, currentAction = \"\") => {\n        // Check if game should end (all players are holding or eliminated)\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n\n        if (allDone) {\n            // Determine winner, but don't set the winner status yet\n            const { winnerIndex, winMessage } = determineWinner(updatedPlayers);\n\n            // We'll set all players to 'revealing' status first\n            updatedPlayers.forEach(player => {\n                if (player.status !== 'eliminated') {\n                    player.status = 'revealing';\n                }\n            });\n\n            return {\n                gameOver: true,\n                revealPhase: true, // Add a reveal phase flag\n                players: updatedPlayers,\n                winner: winnerIndex,\n                winnerMessage: winMessage,\n                message: [currentAction].filter(Boolean) // Only include the current action\n            };\n        }\n\n        return { gameOver: false };\n    };\n\n    // Update the bot decision-making logic in the useEffect\n\n    useEffect(() => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        const botTurn = setTimeout(() => {\n            // Get visible cards of other players (excluding first cards of bots)\n            const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n                if (index === gameState.currentPlayerIndex) return [];\n                return player.visibleCards;\n            }).filter(cards => cards.length > 0);\n\n            // Force bot to draw at least one card after their initial hidden card\n            // A player should have at least 2 cards total (1 hidden + 1 visible)\n            const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n\n            // Decide whether to draw or hold\n            if (mustDrawFirstCard || currentPlayer.total < 11 ||\n                cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n                handleDrawCard();\n            } else {\n                // Bot decides to hold\n                const updatedPlayers = [...gameState.players];\n                updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n                // Find next active player\n                let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n                while (\n                    nextPlayerIndex !== gameState.currentPlayerIndex &&\n                    (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                        updatedPlayers[nextPlayerIndex].status === 'holding')\n                ) {\n                    nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n                }\n\n                // Check if all players are holding or eliminated\n                const allDone = updatedPlayers.every(p => p.status !== 'active');\n\n                if (allDone) {\n                    // Check if game should end using the shared game end logic\n                    const gameEndCheck = checkGameEnd(updatedPlayers,\n                        `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n\n                    if (gameEndCheck.gameOver) {\n                        setGameState({\n                            ...gameState,\n                            players: gameEndCheck.players,\n                            deck: gameState.deck,\n                            phase: 'revealing',\n                            revealPhase: true,\n                            pendingWinner: gameEndCheck.winner,\n                            pendingWinnerMessage: gameEndCheck.winnerMessage,\n                            gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n                        });\n                        return;\n                    }\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    currentPlayerIndex: nextPlayerIndex,\n                    gameLog: [...gameState.gameLog,\n                    `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`,\n                    `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n                    ]\n                });\n            }\n        }, 1000); // 1 second delay for bot actions\n\n        return () => clearTimeout(botTurn);\n    }, [gameState]);\n\n\n\n    // Add this useEffect to handle the reveal phase\n    useEffect(() => {\n        // Only run this effect when we're in the revealing phase\n        if (gameState.phase === 'revealing' && gameState.revealPhase) {\n            const revealTimer = setTimeout(() => {\n                const updatedPlayers = [...gameState.players];\n\n                // After revealing, set the winner status\n                if (gameState.pendingWinner !== -1) {\n                    updatedPlayers[gameState.pendingWinner].status = 'winner';\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    phase: 'gameOver',\n                    revealPhase: false,\n                    winner: gameState.pendingWinner,\n                    gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n                });\n            }, 500); // 2 second delay to allow players to see all cards\n\n            return () => clearTimeout(revealTimer);\n        }\n    }, [gameState.phase, gameState.revealPhase]);\n\n    // Update resetGame to avoid texture reloading issues\n    const resetGame = () => {\n        const numPlayers = gameState.players.length;\n        setupGame(numPlayers);\n    };\n\n    const returnToHome = () => {\n        // Reset everything and return to setup phase\n        setGameState({\n            phase: 'setup',\n            players: [],\n            deck: [],\n            currentPlayerIndex: 0,\n            winner: null,\n            gameLog: []\n        });\n    };\n    // In your return statement, pass the gameId to GameBoard:\n    return (\n        <div className=\"game-container\">\n            {gameState.phase === 'setup' ? (\n                <GameSetup onSetupComplete={setupGame} />\n            ) : (\n                <GameBoard\n                    gameState={gameState}\n                    onDrawCard={handleDrawCard}\n                    onHold={handleHold}\n                    onReset={resetGame}\n                    onReturnHome={returnToHome}\n                />\n            )}\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}