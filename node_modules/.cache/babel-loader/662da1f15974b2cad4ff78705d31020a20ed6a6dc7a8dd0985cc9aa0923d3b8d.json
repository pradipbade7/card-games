{"ast":null,"code":"// Create a new utility file for texture management\n\nimport * as THREE from 'three';\n\n// Create a singleton texture loader that persists across renders\nclass TextureManager {\n  constructor() {\n    this.textureCache = {};\n    this.loader = new THREE.TextureLoader();\n  }\n\n  // Get or load a texture\n  getTexture(path) {\n    if (this.textureCache[path]) {\n      return this.textureCache[path];\n    }\n    const texture = this.loader.load(path);\n    this.textureCache[path] = texture;\n    return texture;\n  }\n\n  // Preload a set of textures\n  preloadTextures(paths) {\n    paths.forEach(path => {\n      this.getTexture(path);\n    });\n  }\n\n  // Clear all cached textures\n  clearCache() {\n    Object.values(this.textureCache).forEach(texture => {\n      texture.dispose();\n    });\n    this.textureCache = {};\n  }\n}\n\n// Export a singleton instance\nexport const textureManager = new TextureManager();","map":{"version":3,"names":["THREE","TextureManager","constructor","textureCache","loader","TextureLoader","getTexture","path","texture","load","preloadTextures","paths","forEach","clearCache","Object","values","dispose","textureManager"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/utils/textureLoader.js"],"sourcesContent":["// Create a new utility file for texture management\n\nimport * as THREE from 'three';\n\n// Create a singleton texture loader that persists across renders\nclass TextureManager {\n  constructor() {\n    this.textureCache = {};\n    this.loader = new THREE.TextureLoader();\n  }\n\n  // Get or load a texture\n  getTexture(path) {\n    if (this.textureCache[path]) {\n      return this.textureCache[path];\n    }\n    \n    const texture = this.loader.load(path);\n    this.textureCache[path] = texture;\n    return texture;\n  }\n\n  // Preload a set of textures\n  preloadTextures(paths) {\n    paths.forEach(path => {\n      this.getTexture(path);\n    });\n  }\n\n  // Clear all cached textures\n  clearCache() {\n    Object.values(this.textureCache).forEach(texture => {\n      texture.dispose();\n    });\n    this.textureCache = {};\n  }\n}\n\n// Export a singleton instance\nexport const textureManager = new TextureManager();"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,MAAM,GAAG,IAAIJ,KAAK,CAACK,aAAa,CAAC,CAAC;EACzC;;EAEA;EACAC,UAAUA,CAACC,IAAI,EAAE;IACf,IAAI,IAAI,CAACJ,YAAY,CAACI,IAAI,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACJ,YAAY,CAACI,IAAI,CAAC;IAChC;IAEA,MAAMC,OAAO,GAAG,IAAI,CAACJ,MAAM,CAACK,IAAI,CAACF,IAAI,CAAC;IACtC,IAAI,CAACJ,YAAY,CAACI,IAAI,CAAC,GAAGC,OAAO;IACjC,OAAOA,OAAO;EAChB;;EAEA;EACAE,eAAeA,CAACC,KAAK,EAAE;IACrBA,KAAK,CAACC,OAAO,CAACL,IAAI,IAAI;MACpB,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC;IACvB,CAAC,CAAC;EACJ;;EAEA;EACAM,UAAUA,CAAA,EAAG;IACXC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACZ,YAAY,CAAC,CAACS,OAAO,CAACJ,OAAO,IAAI;MAClDA,OAAO,CAACQ,OAAO,CAAC,CAAC;IACnB,CAAC,CAAC;IACF,IAAI,CAACb,YAAY,GAAG,CAAC,CAAC;EACxB;AACF;;AAEA;AACA,OAAO,MAAMc,cAAc,GAAG,IAAIhB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}