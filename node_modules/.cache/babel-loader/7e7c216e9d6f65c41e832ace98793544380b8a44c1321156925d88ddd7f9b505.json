{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/CardDeck.js\";\nimport React from 'react';\nimport Card from './Card';\nimport { cardUtils } from '../utils/cardUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CardDeck({\n  onCardClick\n}) {\n  // Generate all 52 cards\n  const cards = cardUtils.generateDeck();\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: cards.map((card, index) => {\n      // Calculate position in grid or other formation\n      const row = Math.floor(index / 13);\n      const col = index % 13;\n      const x = col * 1.2 - 9; // Adjust spacing\n      const y = row * 1.6 - 2.5; // Adjust spacing\n      const z = 0;\n      return /*#__PURE__*/_jsxDEV(Card, {\n        suit: card.suit,\n        value: card.value,\n        position: [x, y, z],\n        rotation: [0, 0, 0],\n        onClick: () => onCardClick(card),\n        flipped: true\n      }, `${card.suit}-${card.value}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = CardDeck;\nvar _c;\n$RefreshReg$(_c, \"CardDeck\");","map":{"version":3,"names":["React","Card","cardUtils","jsxDEV","_jsxDEV","CardDeck","onCardClick","cards","generateDeck","children","map","card","index","row","Math","floor","col","x","y","z","suit","value","position","rotation","onClick","flipped","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/CardDeck.js"],"sourcesContent":["import React from 'react';\nimport Card from './Card';\nimport { cardUtils } from '../utils/cardUtils';\n\nexport default function CardDeck({ onCardClick }) {\n  // Generate all 52 cards\n  const cards = cardUtils.generateDeck();\n  \n  return (\n    <group>\n      {cards.map((card, index) => {\n        // Calculate position in grid or other formation\n        const row = Math.floor(index / 13);\n        const col = index % 13;\n        const x = col * 1.2 - 9; // Adjust spacing\n        const y = row * 1.6 - 2.5; // Adjust spacing\n        const z = 0;\n        \n        return (\n          <Card\n            key={`${card.suit}-${card.value}`}\n            suit={card.suit}\n            value={card.value}\n            position={[x, y, z]}\n            rotation={[0, 0, 0]}\n            onClick={() => onCardClick(card)}\n            flipped={true}\n          />\n        );\n      })}\n    </group>\n  );\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,QAAQA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAChD;EACA,MAAMC,KAAK,GAAGL,SAAS,CAACM,YAAY,CAAC,CAAC;EAEtC,oBACEJ,OAAA;IAAAK,QAAA,EACGF,KAAK,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC1B;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,GAAG,EAAE,CAAC;MAClC,MAAMI,GAAG,GAAGJ,KAAK,GAAG,EAAE;MACtB,MAAMK,CAAC,GAAGD,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;MACzB,MAAME,CAAC,GAAGL,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;MAC3B,MAAMM,CAAC,GAAG,CAAC;MAEX,oBACEf,OAAA,CAACH,IAAI;QAEHmB,IAAI,EAAET,IAAI,CAACS,IAAK;QAChBC,KAAK,EAAEV,IAAI,CAACU,KAAM;QAClBC,QAAQ,EAAE,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAE;QACpBI,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;QACpBC,OAAO,EAAEA,CAAA,KAAMlB,WAAW,CAACK,IAAI,CAAE;QACjCc,OAAO,EAAE;MAAK,GANT,GAAGd,IAAI,CAACS,IAAI,IAAIT,IAAI,CAACU,KAAK,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOlC,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEZ;AAACC,EAAA,GA5BuBzB,QAAQ;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}