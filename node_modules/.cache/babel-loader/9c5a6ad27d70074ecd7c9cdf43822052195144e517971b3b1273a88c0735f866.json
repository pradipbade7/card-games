{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, Suspense } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport CardScene from './CardScene';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now()\n  });\n  useEffect(() => {\n    const cardPaths = [];\n    cardUtils.suits.forEach(suit => {\n      cardUtils.values.forEach(value => {\n        cardPaths.push(`/assets/cards/faces/${suit}/${value}.png`);\n      });\n    });\n    cardPaths.push('/assets/cards/backs/cardback.png');\n    const loader = new THREE.TextureLoader();\n    cardPaths.forEach(path => loader.load(path));\n  }, []);\n  const setupGame = numPlayers => {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n    for (let i = 0; i < numPlayers; i++) {\n      const playerName = i === 0 ? 'You' : `Bot ${i}`;\n      const {\n        drawn,\n        remaining\n      } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n      deck = remaining;\n      const player = {\n        id: i,\n        name: playerName,\n        isHuman: i === 0,\n        cards: [...drawn],\n        hiddenCards: i === 0 ? [] : [...drawn],\n        visibleCards: i === 0 ? [...drawn] : [],\n        total: cardUtils.calculateTotal(drawn),\n        status: 'active'\n      };\n      players.push(player);\n      if (i === 0) {\n        initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n      } else {\n        initialLog.push(`${playerName} drew a card.`);\n      }\n    }\n    initialLog.push('Your turn.');\n    setGameState({\n      phase: 'playing',\n      players,\n      deck,\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: initialLog,\n      gameId: Date.now()\n    });\n  };\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n    const actionLog = `${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`;\n    if (player.total === 17) {\n      player.status = 'winner';\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n      });\n      return;\n    }\n    if (player.total > 17) {\n      player.status = 'eliminated';\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} exceeded 17 and is eliminated!`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: remaining,\n          phase: 'revealing',\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n        });\n        return;\n      }\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n      });\n      return;\n    }\n    const mustContinue = player.total < 11;\n    if (mustContinue) {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else if (player.isHuman) {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    }\n  };\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: gameState.deck,\n          phase: 'revealing',\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n        });\n        return;\n      }\n    }\n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    });\n  };\n  const determineWinner = players => {\n    const exactWinner = players.findIndex(p => p.total === 17);\n    if (exactWinner !== -1) {\n      return {\n        winnerIndex: exactWinner,\n        winMessage: `${players[exactWinner].name} won with exactly 17!`\n      };\n    }\n    const allEliminated = players.every(p => p.status === 'eliminated');\n    if (allEliminated) {\n      return {\n        winnerIndex: -1,\n        winMessage: 'All players exceeded 17. Game is void.'\n      };\n    }\n    let maxTotal = 0;\n    let winnerIndex = -1;\n    players.forEach((player, idx) => {\n      if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n        maxTotal = player.total;\n        winnerIndex = idx;\n      }\n    });\n    if (winnerIndex !== -1) {\n      return {\n        winnerIndex,\n        winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n      };\n    }\n    return {\n      winnerIndex: -1,\n      winMessage: 'No winner could be determined.'\n    };\n  };\n  const checkGameEnd = (updatedPlayers, currentAction = '') => {\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      const {\n        winnerIndex,\n        winMessage\n      } = determineWinner(updatedPlayers);\n      updatedPlayers.forEach(player => {\n        if (player.status !== 'eliminated') {\n          player.status = 'revealing';\n        }\n      });\n      return {\n        gameOver: true,\n        revealPhase: true,\n        players: updatedPlayers,\n        winner: winnerIndex,\n        winnerMessage: winMessage,\n        message: [currentAction].filter(Boolean)\n      };\n    }\n    return {\n      gameOver: false\n    };\n  };\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    const botTurn = setTimeout(() => {\n      const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n        if (index === gameState.currentPlayerIndex) return [];\n        return player.visibleCards;\n      }).filter(cards => cards.length > 0);\n      const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n      if (mustDrawFirstCard || currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        if (allDone) {\n          const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n          if (gameEndCheck.gameOver) {\n            setGameState({\n              ...gameState,\n              players: gameEndCheck.players,\n              deck: gameState.deck,\n              phase: 'revealing',\n              revealPhase: true,\n              pendingWinner: gameEndCheck.winner,\n              pendingWinnerMessage: gameEndCheck.winnerMessage,\n              gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n            });\n            return;\n          }\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n        });\n      }\n    }, 1000);\n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n  useEffect(() => {\n    if (gameState.phase === 'revealing' && gameState.revealPhase) {\n      const revealTimer = setTimeout(() => {\n        const updatedPlayers = [...gameState.players];\n        if (gameState.pendingWinner !== -1) {\n          updatedPlayers[gameState.pendingWinner].status = 'winner';\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          revealPhase: false,\n          winner: gameState.pendingWinner,\n          gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n        });\n      }, 500);\n      return () => clearTimeout(revealTimer);\n    }\n  }, [gameState.phase, gameState.revealPhase]);\n  const resetGame = () => {\n    const numPlayers = gameState.players.length;\n    setupGame(numPlayers);\n  };\n  const returnToHome = () => {\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n  const prepareCardsForRendering = players => {\n    const allCards = [];\n    let cardCounter = 0;\n    const playerCount = players.length;\n    const rowSpacing = 2.5;\n    players.forEach((player, playerIndex) => {\n      const cardSpacing = 1.2;\n      const playerRowY = (playerCount / 2 - playerIndex - 0.5) * rowSpacing;\n      const totalCardWidth = (player.hiddenCards.length + player.visibleCards.length) * cardSpacing;\n      const startX = -totalCardWidth / 2;\n      player.hiddenCards.forEach((card, cardIndex) => {\n        const xPos = startX + cardIndex * cardSpacing;\n        const showingPhase = gameState.phase === 'revealing' || gameState.phase === 'gameOver';\n        const shouldReveal = showingPhase || player.status === 'eliminated' || player.status === 'winner';\n        allCards.push({\n          id: `hidden-${playerIndex}-${cardIndex}-${cardCounter++}`,\n          suit: card.suit,\n          value: card.value,\n          flipped: !shouldReveal,\n          position: [xPos, playerRowY, 0],\n          rotation: [0, 0, 0],\n          scale: [0.8, 0.8, 0.8]\n        });\n      });\n      player.visibleCards.forEach((card, cardIndex) => {\n        const xPos = startX + (player.hiddenCards.length + cardIndex) * cardSpacing;\n        allCards.push({\n          id: `visible-${playerIndex}-${cardIndex}-${cardCounter++}`,\n          suit: card.suit,\n          value: card.value,\n          flipped: false,\n          position: [xPos, playerRowY, 0],\n          rotation: [0, 0, 0],\n          scale: [0.8, 0.8, 0.8]\n        });\n      });\n    });\n    return allCards;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: gameState.phase === 'setup' ? /*#__PURE__*/_jsxDEV(GameSetup, {\n      onSetupComplete: setupGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-scene-container\",\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 33\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(CardScene, {\n            cards: prepareCardsForRendering(gameState.players)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-overlay\",\n        children: /*#__PURE__*/_jsxDEV(GameBoard, {\n          gameState: gameState,\n          onDrawCard: handleDrawCard,\n          onHold: handleHold,\n          onReset: resetGame,\n          onReturnHome: returnToHome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"XokZiDxNBm9JtZei5dY976USX0U=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Suspense","cardUtils","GameSetup","GameBoard","CardScene","THREE","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","gameId","Date","now","cardPaths","suits","forEach","suit","values","value","push","loader","TextureLoader","path","load","setupGame","numPlayers","shuffle","generateDeck","initialLog","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","getCardName","handleDrawCard","currentPlayer","updatedPlayers","actionLog","gameEndCheck","checkGameEnd","gameOver","revealPhase","pendingWinner","pendingWinnerMessage","winnerMessage","message","nextPlayerIndex","length","mustContinue","handleHold","allDone","every","p","determineWinner","exactWinner","findIndex","winnerIndex","winMessage","allEliminated","maxTotal","idx","currentAction","filter","Boolean","botTurn","setTimeout","otherPlayersVisibleCards","map","index","mustDrawFirstCard","shouldBotDraw","clearTimeout","revealTimer","resetGame","returnToHome","prepareCardsForRendering","allCards","cardCounter","playerCount","rowSpacing","playerIndex","cardSpacing","playerRowY","totalCardWidth","startX","card","cardIndex","xPos","showingPhase","shouldReveal","flipped","position","rotation","scale","className","children","onSetupComplete","fileName","_jsxFileName","lineNumber","columnNumber","fallback","onDrawCard","onHold","onReset","onReturnHome","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect, Suspense } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport CardScene from './CardScene';\nimport * as THREE from 'three';\n\nexport default function Game() {\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now(),\n  });\n\n  useEffect(() => {\n    const cardPaths = [];\n    cardUtils.suits.forEach((suit) => {\n      cardUtils.values.forEach((value) => {\n        cardPaths.push(`/assets/cards/faces/${suit}/${value}.png`);\n      });\n    });\n    cardPaths.push('/assets/cards/backs/cardback.png');\n    const loader = new THREE.TextureLoader();\n    cardPaths.forEach((path) => loader.load(path));\n  }, []);\n\n  const setupGame = (numPlayers) => {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    for (let i = 0; i < numPlayers; i++) {\n      const playerName = i === 0 ? 'You' : `Bot ${i}`;\n      const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n      deck = remaining;\n\n      const player = {\n        id: i,\n        name: playerName,\n        isHuman: i === 0,\n        cards: [...drawn],\n        hiddenCards: i === 0 ? [] : [...drawn],\n        visibleCards: i === 0 ? [...drawn] : [],\n        total: cardUtils.calculateTotal(drawn),\n        status: 'active',\n      };\n\n      players.push(player);\n\n      if (i === 0) {\n        initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n      } else {\n        initialLog.push(`${playerName} drew a card.`);\n      }\n    }\n\n    initialLog.push('Your turn.');\n\n    setGameState({\n      phase: 'playing',\n      players,\n      deck,\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: initialLog,\n      gameId: Date.now(),\n    });\n  };\n\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n    const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n\n    const actionLog = `${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`;\n\n    if (player.total === 17) {\n      player.status = 'winner';\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`],\n      });\n      return;\n    }\n\n    if (player.total > 17) {\n      player.status = 'eliminated';\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} exceeded 17 and is eliminated!`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: remaining,\n          phase: 'revealing',\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message],\n        });\n        return;\n      }\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (\n        nextPlayerIndex !== gameState.currentPlayerIndex &&\n        (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')\n      ) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`],\n      });\n      return;\n    }\n\n    const mustContinue = player.total < 11;\n\n    if (mustContinue) {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog],\n      });\n    } else if (player.isHuman) {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog],\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog],\n      });\n    }\n  };\n\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.'],\n      });\n      return;\n    }\n\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (\n      nextPlayerIndex !== gameState.currentPlayerIndex &&\n      (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')\n    ) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n    if (allDone) {\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: gameState.deck,\n          phase: 'revealing',\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, ...gameEndCheck.message],\n        });\n        return;\n      }\n    }\n\n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`],\n    });\n  };\n\n  const determineWinner = (players) => {\n    const exactWinner = players.findIndex((p) => p.total === 17);\n    if (exactWinner !== -1) {\n      return {\n        winnerIndex: exactWinner,\n        winMessage: `${players[exactWinner].name} won with exactly 17!`,\n      };\n    }\n\n    const allEliminated = players.every((p) => p.status === 'eliminated');\n    if (allEliminated) {\n      return {\n        winnerIndex: -1,\n        winMessage: 'All players exceeded 17. Game is void.',\n      };\n    }\n\n    let maxTotal = 0;\n    let winnerIndex = -1;\n\n    players.forEach((player, idx) => {\n      if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n        maxTotal = player.total;\n        winnerIndex = idx;\n      }\n    });\n\n    if (winnerIndex !== -1) {\n      return {\n        winnerIndex,\n        winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`,\n      };\n    }\n\n    return {\n      winnerIndex: -1,\n      winMessage: 'No winner could be determined.',\n    };\n  };\n\n  const checkGameEnd = (updatedPlayers, currentAction = '') => {\n    const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n    if (allDone) {\n      const { winnerIndex, winMessage } = determineWinner(updatedPlayers);\n\n      updatedPlayers.forEach((player) => {\n        if (player.status !== 'eliminated') {\n          player.status = 'revealing';\n        }\n      });\n\n      return {\n        gameOver: true,\n        revealPhase: true,\n        players: updatedPlayers,\n        winner: winnerIndex,\n        winnerMessage: winMessage,\n        message: [currentAction].filter(Boolean),\n      };\n    }\n\n    return { gameOver: false };\n  };\n\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n    const botTurn = setTimeout(() => {\n      const otherPlayersVisibleCards = gameState.players\n        .map((player, index) => {\n          if (index === gameState.currentPlayerIndex) return [];\n          return player.visibleCards;\n        })\n        .filter((cards) => cards.length > 0);\n\n      const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n\n      if (mustDrawFirstCard || currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (\n          nextPlayerIndex !== gameState.currentPlayerIndex &&\n          (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n        if (allDone) {\n          const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n          if (gameEndCheck.gameOver) {\n            setGameState({\n              ...gameState,\n              players: gameEndCheck.players,\n              deck: gameState.deck,\n              phase: 'revealing',\n              revealPhase: true,\n              pendingWinner: gameEndCheck.winner,\n              pendingWinnerMessage: gameEndCheck.winnerMessage,\n              gameLog: [...gameState.gameLog, ...gameEndCheck.message],\n            });\n            return;\n          }\n        }\n\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`],\n        });\n      }\n    }, 1000);\n\n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.phase === 'revealing' && gameState.revealPhase) {\n      const revealTimer = setTimeout(() => {\n        const updatedPlayers = [...gameState.players];\n\n        if (gameState.pendingWinner !== -1) {\n          updatedPlayers[gameState.pendingWinner].status = 'winner';\n        }\n\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          revealPhase: false,\n          winner: gameState.pendingWinner,\n          gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage],\n        });\n      }, 500);\n\n      return () => clearTimeout(revealTimer);\n    }\n  }, [gameState.phase, gameState.revealPhase]);\n\n  const resetGame = () => {\n    const numPlayers = gameState.players.length;\n    setupGame(numPlayers);\n  };\n\n  const returnToHome = () => {\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: [],\n    });\n  };\n\n  const prepareCardsForRendering = (players) => {\n    const allCards = [];\n    let cardCounter = 0;\n    const playerCount = players.length;\n    const rowSpacing = 2.5;\n\n    players.forEach((player, playerIndex) => {\n      const cardSpacing = 1.2;\n      const playerRowY = (playerCount / 2 - playerIndex - 0.5) * rowSpacing;\n      const totalCardWidth = (player.hiddenCards.length + player.visibleCards.length) * cardSpacing;\n      const startX = -totalCardWidth / 2;\n\n      player.hiddenCards.forEach((card, cardIndex) => {\n        const xPos = startX + cardIndex * cardSpacing;\n        const showingPhase = gameState.phase === 'revealing' || gameState.phase === 'gameOver';\n        const shouldReveal = showingPhase || player.status === 'eliminated' || player.status === 'winner';\n\n        allCards.push({\n          id: `hidden-${playerIndex}-${cardIndex}-${cardCounter++}`,\n          suit: card.suit,\n          value: card.value,\n          flipped: !shouldReveal,\n          position: [xPos, playerRowY, 0],\n          rotation: [0, 0, 0],\n          scale: [0.8, 0.8, 0.8],\n        });\n      });\n\n      player.visibleCards.forEach((card, cardIndex) => {\n        const xPos = startX + (player.hiddenCards.length + cardIndex) * cardSpacing;\n\n        allCards.push({\n          id: `visible-${playerIndex}-${cardIndex}-${cardCounter++}`,\n          suit: card.suit,\n          value: card.value,\n          flipped: false,\n          position: [xPos, playerRowY, 0],\n          rotation: [0, 0, 0],\n          scale: [0.8, 0.8, 0.8],\n        });\n      });\n    });\n\n    return allCards;\n  };\n\n  return (\n    <div className=\"game-container\">\n      {gameState.phase === 'setup' ? (\n        <GameSetup onSetupComplete={setupGame} />\n      ) : (\n        <>\n          <div className=\"card-scene-container\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <CardScene cards={prepareCardsForRendering(gameState.players)} />\n            </Suspense>\n          </div>\n          <div className=\"game-overlay\">\n            <GameBoard\n              gameState={gameState}\n              onDrawCard={handleDrawCard}\n              onHold={handleHold}\n              onReset={resetGame}\n              onReturnHome={returnToHome}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}