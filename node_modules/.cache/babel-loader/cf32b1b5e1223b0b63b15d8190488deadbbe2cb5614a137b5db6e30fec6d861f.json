{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/GameBoard.js\";\nimport React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GameBoard({\n  gameState,\n  onDrawCard,\n  onHold,\n  onReset\n}) {\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    gameLog,\n    winner\n  } = gameState;\n  const currentPlayer = players[currentPlayerIndex];\n\n  // Helper function to determine the winner text\n  const getWinnerText = () => {\n    if (phase !== 'gameOver') return null;\n\n    // Check if there's a winner\n    const winningPlayer = players.find(p => p.status === 'winner');\n    if (winningPlayer) {\n      return `${winningPlayer.name} won with a total of ${winningPlayer.total}!`;\n    }\n\n    // Check if everyone busted\n    const allBusted = players.every(p => p.status === 'eliminated');\n    if (allBusted) {\n      return 'All players busted! The game is a void.';\n    }\n\n    // If no clear winner, find highest total under 17\n    let highestTotal = 0;\n    let highestTotalPlayer = null;\n    players.forEach(player => {\n      if (player.status !== 'eliminated' && player.total <= 17 && player.total > highestTotal) {\n        highestTotal = player.total;\n        highestTotalPlayer = player;\n      }\n    });\n    if (highestTotalPlayer) {\n      return `${highestTotalPlayer.name} won with the highest total of ${highestTotal}!`;\n    }\n    return 'No winner determined.';\n  };\n\n  // Get the game result message\n  const gameResultMessage = getWinnerText();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game of 17\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: phase === 'playing' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Current Turn: \", currentPlayer.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-result\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Game Over\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), gameResultMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-announcement\",\n            children: gameResultMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-container\",\n      children: players.map((player, index) => /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: player,\n        isCurrentTurn: index === currentPlayerIndex && phase === 'playing',\n        isHumanPlayer: player.isHuman,\n        gamePhase: phase\n        // Pass showTotal flag to control when to show bot totals\n        ,\n        showTotal: player.isHuman || phase === 'gameOver' || player.status === 'eliminated' || player.status === 'winner'\n      }, player.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [phase === 'playing' && players[currentPlayerIndex].isHuman && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onDrawCard,\n          disabled: players[currentPlayerIndex].status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onHold,\n          disabled: players[currentPlayerIndex].status !== 'active' || players[currentPlayerIndex].total < 11,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onReset,\n        className: \"new-game-button\",\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameLog, {\n      logs: gameLog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","PlayerHand","GameLog","jsxDEV","_jsxDEV","Fragment","_Fragment","GameBoard","gameState","onDrawCard","onHold","onReset","players","currentPlayerIndex","phase","gameLog","winner","currentPlayer","getWinnerText","winningPlayer","find","p","status","name","total","allBusted","every","highestTotal","highestTotalPlayer","forEach","player","gameResultMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","isCurrentTurn","isHumanPlayer","isHuman","gamePhase","showTotal","id","onClick","disabled","logs","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/GameBoard.js"],"sourcesContent":["import React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\n\nexport default function GameBoard({ gameState, onDrawCard, onHold, onReset }) {\n    const { players, currentPlayerIndex, phase, gameLog, winner } = gameState;\n    const currentPlayer = players[currentPlayerIndex];\n\n    // Helper function to determine the winner text\n    const getWinnerText = () => {\n        if (phase !== 'gameOver') return null;\n        \n        // Check if there's a winner\n        const winningPlayer = players.find(p => p.status === 'winner');\n        if (winningPlayer) {\n            return `${winningPlayer.name} won with a total of ${winningPlayer.total}!`;\n        }\n        \n        // Check if everyone busted\n        const allBusted = players.every(p => p.status === 'eliminated');\n        if (allBusted) {\n            return 'All players busted! The game is a void.';\n        }\n        \n        // If no clear winner, find highest total under 17\n        let highestTotal = 0;\n        let highestTotalPlayer = null;\n        \n        players.forEach(player => {\n            if (player.status !== 'eliminated' && player.total <= 17 && player.total > highestTotal) {\n                highestTotal = player.total;\n                highestTotalPlayer = player;\n            }\n        });\n        \n        if (highestTotalPlayer) {\n            return `${highestTotalPlayer.name} won with the highest total of ${highestTotal}!`;\n        }\n        \n        return 'No winner determined.';\n    };\n\n    // Get the game result message\n    const gameResultMessage = getWinnerText();\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"game-header\">\n                <h2>Game of 17</h2>\n                <div className=\"game-status\">\n                    {phase === 'playing' ? (\n                        <span>Current Turn: {currentPlayer.name}</span>\n                    ) : (\n                        <div className=\"game-result\">\n                            <span>Game Over</span>\n                            {gameResultMessage && (\n                                <div className=\"winner-announcement\">{gameResultMessage}</div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <div className=\"players-container\">\n                {players.map((player, index) => (\n                    <PlayerHand\n                        key={player.id}\n                        player={player}\n                        isCurrentTurn={index === currentPlayerIndex && phase === 'playing'}\n                        isHumanPlayer={player.isHuman}\n                        gamePhase={phase}\n                        // Pass showTotal flag to control when to show bot totals\n                        showTotal={player.isHuman || phase === 'gameOver' || player.status === 'eliminated' || player.status === 'winner'}\n                    />\n                ))}\n            </div>\n\n            <div className=\"game-controls\">\n                {phase === 'playing' && players[currentPlayerIndex].isHuman && (\n                    <>\n                        <button\n                            onClick={onDrawCard}\n                            disabled={players[currentPlayerIndex].status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        <button\n                            onClick={onHold}\n                            disabled={\n                                players[currentPlayerIndex].status !== 'active' ||\n                                players[currentPlayerIndex].total < 11\n                            }\n                        >\n                            Hold\n                        </button>\n                    </>\n                )}\n                \n                {phase === 'gameOver' && (\n                    <button onClick={onReset} className=\"new-game-button\">New Game</button>\n                )}\n            </div>\n\n            <GameLog logs={gameLog} />\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}