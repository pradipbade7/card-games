{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    // setup, playing, gameOver, revealing\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now(),\n    // Add a unique ID for each game session\n    textureCache: {} // Keep track of loaded textures\n  });\n\n  // Initialize the game with the selected number of players\n  const setupGame = numPlayers => {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    // Pre-load card textures for better performance and to avoid loading issues\n    const textureCache = {};\n\n    // Create players (1 human + bots)\n    for (let i = 0; i < numPlayers; i++) {\n      const playerName = i === 0 ? 'You' : `Bot ${i}`;\n      const {\n        drawn,\n        remaining\n      } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n      deck = remaining; // Update the deck after each draw\n\n      // Create player with initial card\n      const player = {\n        id: i,\n        name: playerName,\n        isHuman: i === 0,\n        cards: [...drawn],\n        hiddenCards: i === 0 ? [] : [...drawn],\n        // For bots, initial card is hidden\n        visibleCards: i === 0 ? [...drawn] : [],\n        // For human, initial card is visible\n        total: cardUtils.calculateTotal(drawn),\n        status: 'active' // active, holding, eliminated, winner\n      };\n      players.push(player);\n\n      // Log the initial card draw - for human we show the card, for bots we just log that they drew a card\n      if (i === 0) {\n        initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n      } else {\n        initialLog.push(`${playerName} drew a card.`);\n      }\n    }\n    initialLog.push(\"Your turn.\");\n    setGameState({\n      phase: 'playing',\n      players,\n      deck,\n      // Store the updated deck after dealing all initial cards\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: initialLog,\n      gameId: Date.now(),\n      // Generate new game ID\n      textureCache\n    });\n  };\n\n  // Handle player's decision to draw a card\n  // Update the handleDrawCard function to ensure one player completes their turn before moving to the next\n\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n    // Draw a card from the deck\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n\n    // Update player's cards and total\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n\n    // Log the action\n    const actionLog = `${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`;\n\n    // Check if player reached 17\n    if (player.total === 17) {\n      player.status = 'winner';\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n      });\n      return;\n    }\n\n    // Check if player exceeded 17\n    if (player.total > 17) {\n      player.status = 'eliminated';\n\n      // Check if all players are eliminated or if the game is over\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} exceeded 17 and is eliminated!`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: remaining,\n          phase: 'revealing',\n          // Set to revealing phase instead of gameOver\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          // Store the winner temporarily\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n        });\n        return;\n      }\n\n      // Find next active player\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n      });\n      return;\n    }\n\n    // If player's total is less than 11, they must continue drawing\n    const mustContinue = player.total < 11;\n    if (mustContinue) {\n      // Player must continue drawing\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else if (player.isHuman) {\n      // Human player can choose to draw again or hold\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else {\n      // For bots, decide whether to draw or hold in the useEffect\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    }\n  };\n\n  // Handle player's decision to hold\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n    // Check if player is allowed to hold (total must be 11-16)\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n    // Find next active player\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    // Check if all players are holding or eliminated\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      // Find winner with highest total not exceeding 17\n      let maxTotal = 0;\n      let winnerIndex = -1;\n      updatedPlayers.forEach((p, idx) => {\n        if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n          maxTotal = p.total;\n          winnerIndex = idx;\n        }\n      });\n      if (winnerIndex !== -1) {\n        updatedPlayers[winnerIndex].status = 'winner';\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          winner: winnerIndex,\n          gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`]\n        });\n        return;\n      }\n    }\n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    });\n  };\n\n  // Add this function inside your Game component, before the return statement\n  const determineWinner = players => {\n    // Return early if any player has already won with exactly 17\n    const exactWinner = players.findIndex(p => p.total === 17);\n    if (exactWinner !== -1) {\n      return {\n        winnerIndex: exactWinner,\n        winMessage: `${players[exactWinner].name} won with exactly 17!`\n      };\n    }\n\n    // Check if all players are eliminated\n    const allEliminated = players.every(p => p.status === 'eliminated');\n    if (allEliminated) {\n      return {\n        winnerIndex: -1,\n        winMessage: 'All players exceeded 17. Game is void.'\n      };\n    }\n\n    // Find player with highest total not exceeding 17\n    let maxTotal = 0;\n    let winnerIndex = -1;\n    players.forEach((player, idx) => {\n      if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n        maxTotal = player.total;\n        winnerIndex = idx;\n      }\n    });\n    if (winnerIndex !== -1) {\n      return {\n        winnerIndex,\n        winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n      };\n    }\n\n    // No winner could be determined (should never happen if game logic is correct)\n    return {\n      winnerIndex: -1,\n      winMessage: 'No winner could be determined.'\n    };\n  };\n\n  // Add this function to check if the game is over\n  // Modify the checkGameEnd function to add a reveal phase\n  const checkGameEnd = (updatedPlayers, currentAction = \"\") => {\n    // Check if game should end (all players are holding or eliminated)\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      // Determine winner, but don't set the winner status yet\n      const {\n        winnerIndex,\n        winMessage\n      } = determineWinner(updatedPlayers);\n\n      // We'll set all players to 'revealing' status first\n      updatedPlayers.forEach(player => {\n        if (player.status !== 'eliminated') {\n          player.status = 'revealing';\n        }\n      });\n      return {\n        gameOver: true,\n        revealPhase: true,\n        // Add a reveal phase flag\n        players: updatedPlayers,\n        winner: winnerIndex,\n        winnerMessage: winMessage,\n        message: [currentAction].filter(Boolean) // Only include the current action\n      };\n    }\n    return {\n      gameOver: false\n    };\n  };\n\n  // Update the bot decision-making logic in the useEffect\n\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    const botTurn = setTimeout(() => {\n      // Get visible cards of other players (excluding first cards of bots)\n      const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n        if (index === gameState.currentPlayerIndex) return [];\n        return player.visibleCards;\n      }).filter(cards => cards.length > 0);\n\n      // Force bot to draw at least one card after their initial hidden card\n      // A player should have at least 2 cards total (1 hidden + 1 visible)\n      const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n\n      // Decide whether to draw or hold\n      if (mustDrawFirstCard || currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        // Bot decides to hold\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        // Find next active player\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        // Check if all players are holding or eliminated\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        if (allDone) {\n          // Check if game should end using the shared game end logic\n          const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n          if (gameEndCheck.gameOver) {\n            setGameState({\n              ...gameState,\n              players: gameEndCheck.players,\n              deck: gameState.deck,\n              phase: 'revealing',\n              revealPhase: true,\n              pendingWinner: gameEndCheck.winner,\n              pendingWinnerMessage: gameEndCheck.winnerMessage,\n              gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n            });\n            return;\n          }\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n        });\n      }\n    }, 1000); // 1 second delay for bot actions\n\n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n\n  // Add this useEffect to handle the reveal phase\n  useEffect(() => {\n    // Only run this effect when we're in the revealing phase\n    if (gameState.phase === 'revealing' && gameState.revealPhase) {\n      const revealTimer = setTimeout(() => {\n        const updatedPlayers = [...gameState.players];\n\n        // After revealing, set the winner status\n        if (gameState.pendingWinner !== -1) {\n          updatedPlayers[gameState.pendingWinner].status = 'winner';\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          revealPhase: false,\n          winner: gameState.pendingWinner,\n          gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n        });\n      }, 500); // 2 second delay to allow players to see all cards\n\n      return () => clearTimeout(revealTimer);\n    }\n  }, [gameState.phase, gameState.revealPhase]);\n\n  // Use this function to reset the game and ensure all textures are reloaded\n  const resetGame = () => {\n    // Reset the game with the same number of players\n    const numPlayers = gameState.players.length;\n\n    // Clear any cached textures\n    THREE.Cache.clear();\n\n    // Force a slight delay to ensure cleanup happens\n    setTimeout(() => {\n      setupGame(numPlayers);\n    }, 50);\n  };\n  const returnToHome = () => {\n    // Reset everything and return to setup phase\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n  // In your return statement, pass the gameId to GameBoard:\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: gameState.phase === 'setup' ? /*#__PURE__*/_jsxDEV(GameSetup, {\n      onSetupComplete: setupGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameBoard, {\n      gameState: gameState,\n      onDrawCard: handleDrawCard,\n      onHold: handleHold,\n      onReset: resetGame,\n      onReturnHome: returnToHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"nJSF7ElVTNbtJQtYrNGBjzlecPM=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","cardUtils","GameSetup","GameBoard","THREE","jsxDEV","_jsxDEV","Game","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","gameId","Date","now","textureCache","setupGame","numPlayers","shuffle","generateDeck","initialLog","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","push","getCardName","handleDrawCard","currentPlayer","updatedPlayers","actionLog","value","suit","gameEndCheck","checkGameEnd","gameOver","revealPhase","pendingWinner","pendingWinnerMessage","winnerMessage","message","nextPlayerIndex","length","mustContinue","handleHold","allDone","every","p","maxTotal","winnerIndex","forEach","idx","determineWinner","exactWinner","findIndex","winMessage","allEliminated","currentAction","filter","Boolean","botTurn","setTimeout","otherPlayersVisibleCards","map","index","mustDrawFirstCard","shouldBotDraw","clearTimeout","revealTimer","resetGame","Cache","clear","returnToHome","className","children","onSetupComplete","fileName","_jsxFileName","lineNumber","columnNumber","onDrawCard","onHold","onReset","onReturnHome","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport * as THREE from 'three';\n\nexport default function Game() {\n    const [gameState, setGameState] = useState({\n        phase: 'setup', // setup, playing, gameOver, revealing\n        players: [],\n        deck: [],\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: [],\n        gameId: Date.now(), // Add a unique ID for each game session\n        textureCache: {} // Keep track of loaded textures\n    });\n\n\n    // Initialize the game with the selected number of players\n    const setupGame = (numPlayers) => {\n        let deck = cardUtils.shuffle(cardUtils.generateDeck());\n        const players = [];\n        const initialLog = ['Game started!'];\n\n        // Pre-load card textures for better performance and to avoid loading issues\n        const textureCache = {};\n\n        // Create players (1 human + bots)\n        for (let i = 0; i < numPlayers; i++) {\n            const playerName = i === 0 ? 'You' : `Bot ${i}`;\n            const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n            const drawnCard = drawn[0];\n            deck = remaining; // Update the deck after each draw\n\n            // Create player with initial card\n            const player = {\n                id: i,\n                name: playerName,\n                isHuman: i === 0,\n                cards: [...drawn],\n                hiddenCards: i === 0 ? [] : [...drawn], // For bots, initial card is hidden\n                visibleCards: i === 0 ? [...drawn] : [], // For human, initial card is visible\n                total: cardUtils.calculateTotal(drawn),\n                status: 'active' // active, holding, eliminated, winner\n            };\n\n            players.push(player);\n\n            // Log the initial card draw - for human we show the card, for bots we just log that they drew a card\n            if (i === 0) {\n                initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n            } else {\n                initialLog.push(`${playerName} drew a card.`);\n            }\n        }\n\n        initialLog.push(\"Your turn.\");\n\n        setGameState({\n            phase: 'playing',\n            players,\n            deck, // Store the updated deck after dealing all initial cards\n            currentPlayerIndex: 0,\n            winner: null,\n            gameLog: initialLog,\n            gameId: Date.now(), // Generate new game ID\n            textureCache\n        });\n    };\n\n    // Handle player's decision to draw a card\n    // Update the handleDrawCard function to ensure one player completes their turn before moving to the next\n\n    const handleDrawCard = () => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n        // Draw a card from the deck\n        const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n        const drawnCard = drawn[0];\n\n        // Update player's cards and total\n        const updatedPlayers = [...gameState.players];\n        const player = updatedPlayers[gameState.currentPlayerIndex];\n\n        player.cards = [...player.cards, drawnCard];\n        player.visibleCards = [...player.visibleCards, drawnCard];\n        player.total = cardUtils.calculateTotal(player.cards);\n\n        // Log the action\n        const actionLog = `${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`;\n\n        // Check if player reached 17\n        if (player.total === 17) {\n            player.status = 'winner';\n\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                phase: 'gameOver',\n                winner: gameState.currentPlayerIndex,\n                gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n            });\n            return;\n        }\n\n        // Check if player exceeded 17\n        if (player.total > 17) {\n            player.status = 'eliminated';\n\n            // Check if all players are eliminated or if the game is over\n            const gameEndCheck = checkGameEnd(updatedPlayers,\n                `${player.name} exceeded 17 and is eliminated!`);\n\n            if (gameEndCheck.gameOver) {\n                setGameState({\n                    ...gameState,\n                    players: gameEndCheck.players,\n                    deck: remaining,\n                    phase: 'revealing', // Set to revealing phase instead of gameOver\n                    revealPhase: true,\n                    pendingWinner: gameEndCheck.winner, // Store the winner temporarily\n                    pendingWinnerMessage: gameEndCheck.winnerMessage,\n                    gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n                });\n                return;\n            }\n\n            // Find next active player\n            let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n            while (\n                nextPlayerIndex !== gameState.currentPlayerIndex &&\n                (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                    updatedPlayers[nextPlayerIndex].status === 'holding')\n            ) {\n                nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n            }\n\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                currentPlayerIndex: nextPlayerIndex,\n                gameLog: [...gameState.gameLog, actionLog,\n                `${player.name} exceeded 17 and is eliminated!`,\n                `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n            });\n            return;\n        }\n\n        // If player's total is less than 11, they must continue drawing\n        const mustContinue = player.total < 11;\n\n        if (mustContinue) {\n            // Player must continue drawing\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        } else if (player.isHuman) {\n            // Human player can choose to draw again or hold\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        } else {\n            // For bots, decide whether to draw or hold in the useEffect\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        }\n    };\n\n    // Handle player's decision to hold\n    const handleHold = () => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        // Check if player is allowed to hold (total must be 11-16)\n        if (currentPlayer.total < 11) {\n            setGameState({\n                ...gameState,\n                gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n            });\n            return;\n        }\n\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        // Find next active player\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (\n            nextPlayerIndex !== gameState.currentPlayerIndex &&\n            (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n            nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        // Check if all players are holding or eliminated\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n\n        if (allDone) {\n            // Find winner with highest total not exceeding 17\n            let maxTotal = 0;\n            let winnerIndex = -1;\n\n            updatedPlayers.forEach((p, idx) => {\n                if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n                    maxTotal = p.total;\n                    winnerIndex = idx;\n                }\n            });\n\n            if (winnerIndex !== -1) {\n                updatedPlayers[winnerIndex].status = 'winner';\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    phase: 'gameOver',\n                    winner: winnerIndex,\n                    gameLog: [...gameState.gameLog,\n                    `You decided to hold with a total of ${currentPlayer.total}.`,\n                    `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`\n                    ]\n                });\n                return;\n            }\n        }\n\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            currentPlayerIndex: nextPlayerIndex,\n            gameLog: [...gameState.gameLog,\n            `You decided to hold with a total of ${currentPlayer.total}.`,\n            `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n            ]\n        });\n    };\n\n\n    // Add this function inside your Game component, before the return statement\n    const determineWinner = (players) => {\n        // Return early if any player has already won with exactly 17\n        const exactWinner = players.findIndex(p => p.total === 17);\n        if (exactWinner !== -1) {\n            return {\n                winnerIndex: exactWinner,\n                winMessage: `${players[exactWinner].name} won with exactly 17!`\n            };\n        }\n\n        // Check if all players are eliminated\n        const allEliminated = players.every(p => p.status === 'eliminated');\n        if (allEliminated) {\n            return {\n                winnerIndex: -1,\n                winMessage: 'All players exceeded 17. Game is void.'\n            };\n        }\n\n        // Find player with highest total not exceeding 17\n        let maxTotal = 0;\n        let winnerIndex = -1;\n\n        players.forEach((player, idx) => {\n            if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n                maxTotal = player.total;\n                winnerIndex = idx;\n            }\n        });\n\n        if (winnerIndex !== -1) {\n            return {\n                winnerIndex,\n                winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n            };\n        }\n\n        // No winner could be determined (should never happen if game logic is correct)\n        return {\n            winnerIndex: -1,\n            winMessage: 'No winner could be determined.'\n        };\n    };\n\n    // Add this function to check if the game is over\n    // Modify the checkGameEnd function to add a reveal phase\n    const checkGameEnd = (updatedPlayers, currentAction = \"\") => {\n        // Check if game should end (all players are holding or eliminated)\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n\n        if (allDone) {\n            // Determine winner, but don't set the winner status yet\n            const { winnerIndex, winMessage } = determineWinner(updatedPlayers);\n\n            // We'll set all players to 'revealing' status first\n            updatedPlayers.forEach(player => {\n                if (player.status !== 'eliminated') {\n                    player.status = 'revealing';\n                }\n            });\n\n            return {\n                gameOver: true,\n                revealPhase: true, // Add a reveal phase flag\n                players: updatedPlayers,\n                winner: winnerIndex,\n                winnerMessage: winMessage,\n                message: [currentAction].filter(Boolean) // Only include the current action\n            };\n        }\n\n        return { gameOver: false };\n    };\n\n    // Update the bot decision-making logic in the useEffect\n\n    useEffect(() => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        const botTurn = setTimeout(() => {\n            // Get visible cards of other players (excluding first cards of bots)\n            const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n                if (index === gameState.currentPlayerIndex) return [];\n                return player.visibleCards;\n            }).filter(cards => cards.length > 0);\n\n            // Force bot to draw at least one card after their initial hidden card\n            // A player should have at least 2 cards total (1 hidden + 1 visible)\n            const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n\n            // Decide whether to draw or hold\n            if (mustDrawFirstCard || currentPlayer.total < 11 ||\n                cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n                handleDrawCard();\n            } else {\n                // Bot decides to hold\n                const updatedPlayers = [...gameState.players];\n                updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n                // Find next active player\n                let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n                while (\n                    nextPlayerIndex !== gameState.currentPlayerIndex &&\n                    (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                        updatedPlayers[nextPlayerIndex].status === 'holding')\n                ) {\n                    nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n                }\n\n                // Check if all players are holding or eliminated\n                const allDone = updatedPlayers.every(p => p.status !== 'active');\n\n                if (allDone) {\n                    // Check if game should end using the shared game end logic\n                    const gameEndCheck = checkGameEnd(updatedPlayers,\n                        `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n\n                    if (gameEndCheck.gameOver) {\n                        setGameState({\n                            ...gameState,\n                            players: gameEndCheck.players,\n                            deck: gameState.deck,\n                            phase: 'revealing',\n                            revealPhase: true,\n                            pendingWinner: gameEndCheck.winner,\n                            pendingWinnerMessage: gameEndCheck.winnerMessage,\n                            gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n                        });\n                        return;\n                    }\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    currentPlayerIndex: nextPlayerIndex,\n                    gameLog: [...gameState.gameLog,\n                    `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`,\n                    `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n                    ]\n                });\n            }\n        }, 1000); // 1 second delay for bot actions\n\n        return () => clearTimeout(botTurn);\n    }, [gameState]);\n\n\n\n    // Add this useEffect to handle the reveal phase\n    useEffect(() => {\n        // Only run this effect when we're in the revealing phase\n        if (gameState.phase === 'revealing' && gameState.revealPhase) {\n            const revealTimer = setTimeout(() => {\n                const updatedPlayers = [...gameState.players];\n\n                // After revealing, set the winner status\n                if (gameState.pendingWinner !== -1) {\n                    updatedPlayers[gameState.pendingWinner].status = 'winner';\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    phase: 'gameOver',\n                    revealPhase: false,\n                    winner: gameState.pendingWinner,\n                    gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n                });\n            }, 500); // 2 second delay to allow players to see all cards\n\n            return () => clearTimeout(revealTimer);\n        }\n    }, [gameState.phase, gameState.revealPhase]);\n\n    // Use this function to reset the game and ensure all textures are reloaded\n    const resetGame = () => {\n        // Reset the game with the same number of players\n        const numPlayers = gameState.players.length;\n\n        // Clear any cached textures\n        THREE.Cache.clear();\n\n        // Force a slight delay to ensure cleanup happens\n        setTimeout(() => {\n            setupGame(numPlayers);\n        }, 50);\n    };\n\n    const returnToHome = () => {\n        // Reset everything and return to setup phase\n        setGameState({\n            phase: 'setup',\n            players: [],\n            deck: [],\n            currentPlayerIndex: 0,\n            winner: null,\n            gameLog: []\n        });\n    };\n    // In your return statement, pass the gameId to GameBoard:\n    return (\n        <div className=\"game-container\">\n            {gameState.phase === 'setup' ? (\n                <GameSetup onSetupComplete={setupGame} />\n            ) : (\n                <GameBoard\n                    gameState={gameState}\n                    onDrawCard={handleDrawCard}\n                    onHold={handleHold}\n                    onReset={resetGame}\n                    onReturnHome={returnToHome}\n                />\n            )}\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}