{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    // setup, playing, gameOver, revealing\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now() // Add a unique ID for each game session\n  });\n\n  // Initialize the game with the selected number of players\n  const setupGame = numPlayers => {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    // Create players (1 human + bots)\n    for (let i = 0; i < numPlayers; i++) {\n      const playerName = i === 0 ? 'You' : `Bot ${i}`;\n      const {\n        drawn,\n        remaining\n      } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n      deck = remaining; // Update the deck after each draw\n\n      // Create player with initial card\n      const player = {\n        id: i,\n        name: playerName,\n        isHuman: i === 0,\n        cards: [...drawn],\n        hiddenCards: i === 0 ? [] : [...drawn],\n        // For bots, initial card is hidden\n        visibleCards: i === 0 ? [...drawn] : [],\n        // For human, initial card is visible\n        total: cardUtils.calculateTotal(drawn),\n        status: 'active' // active, holding, eliminated, winner\n      };\n      players.push(player);\n\n      // Log the initial card draw - for human we show the card, for bots we just log that they drew a card\n      if (i === 0) {\n        initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n      } else {\n        initialLog.push(`${playerName} drew a card.`);\n      }\n    }\n    initialLog.push(\"Your turn.\");\n    setGameState({\n      phase: 'playing',\n      players,\n      deck,\n      // Store the updated deck after dealing all initial cards\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: initialLog,\n      gameId: Date.now() // Generate new game ID\n    });\n  };\n\n  // Handle player's decision to draw a card\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n    // Draw a card from the deck\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n\n    // Update player's cards and total\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n\n    // Log the action\n    const actionLog = `${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`;\n\n    // Check if player reached 17\n    if (player.total === 17) {\n      player.status = 'winner';\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n      });\n      return;\n    }\n\n    // Check if player exceeded 17\n    if (player.total > 17) {\n      player.status = 'eliminated';\n\n      // Check if all players are eliminated or if the game is over\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} exceeded 17 and is eliminated!`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: remaining,\n          phase: 'revealing',\n          // Set to revealing phase instead of gameOver\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          // Store the winner temporarily\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n        });\n        return;\n      }\n\n      // Find next active player\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n      });\n      return;\n    }\n\n    // If player's total is less than 11, they must continue drawing\n    const mustContinue = player.total < 11;\n    if (mustContinue) {\n      // Player must continue drawing\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else if (player.isHuman) {\n      // Human player can choose to draw again or hold\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    } else {\n      // For bots, decide whether to draw or hold in the useEffect\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n      });\n    }\n  };\n\n  // Handle player's decision to hold\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n    // Check if player is allowed to hold (total must be 11-16)\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n      if (gameEndCheck.gameOver) {\n        setGameState({\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: gameState.deck,\n          phase: 'revealing',\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n        });\n        return;\n      }\n    }\n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    });\n  };\n  const determineWinner = players => {\n    const exactWinner = players.findIndex(p => p.total === 17);\n    if (exactWinner !== -1) {\n      return {\n        winnerIndex: exactWinner,\n        winMessage: `${players[exactWinner].name} won with exactly 17!`\n      };\n    }\n    const allEliminated = players.every(p => p.status === 'eliminated');\n    if (allEliminated) {\n      return {\n        winnerIndex: -1,\n        winMessage: 'All players exceeded 17. Game is void.'\n      };\n    }\n    let maxTotal = 0;\n    let winnerIndex = -1;\n    players.forEach((player, idx) => {\n      if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n        maxTotal = player.total;\n        winnerIndex = idx;\n      }\n    });\n    if (winnerIndex !== -1) {\n      return {\n        winnerIndex,\n        winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n      };\n    }\n    return {\n      winnerIndex: -1,\n      winMessage: 'No winner could be determined.'\n    };\n  };\n  const checkGameEnd = (updatedPlayers, currentAction = '') => {\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      const {\n        winnerIndex,\n        winMessage\n      } = determineWinner(updatedPlayers);\n      updatedPlayers.forEach(player => {\n        if (player.status !== 'eliminated') {\n          player.status = 'revealing';\n        }\n      });\n      return {\n        gameOver: true,\n        revealPhase: true,\n        players: updatedPlayers,\n        winner: winnerIndex,\n        winnerMessage: winMessage,\n        message: [currentAction].filter(Boolean)\n      };\n    }\n    return {\n      gameOver: false\n    };\n  };\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    const botTurn = setTimeout(() => {\n      const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n        if (index === gameState.currentPlayerIndex) return [];\n        return player.visibleCards;\n      }).filter(cards => cards.length > 0);\n      const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n      if (mustDrawFirstCard || currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        if (allDone) {\n          const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n          if (gameEndCheck.gameOver) {\n            setGameState({\n              ...gameState,\n              players: gameEndCheck.players,\n              deck: gameState.deck,\n              phase: 'revealing',\n              revealPhase: true,\n              pendingWinner: gameEndCheck.winner,\n              pendingWinnerMessage: gameEndCheck.winnerMessage,\n              gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n            });\n            return;\n          }\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n        });\n      }\n    }, 1000);\n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n  useEffect(() => {\n    if (gameState.phase === 'revealing' && gameState.revealPhase) {\n      const revealTimer = setTimeout(() => {\n        const updatedPlayers = [...gameState.players];\n        if (gameState.pendingWinner !== -1) {\n          updatedPlayers[gameState.pendingWinner].status = 'winner';\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          revealPhase: false,\n          winner: gameState.pendingWinner,\n          gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n        });\n      }, 500);\n      return () => clearTimeout(revealTimer);\n    }\n  }, [gameState.phase, gameState.revealPhase]);\n  const resetGame = () => {\n    const numPlayers = gameState.players.length;\n    THREE.Cache.clear();\n    setTimeout(() => {\n      setupGame(numPlayers);\n    }, 50);\n  };\n  const returnToHome = () => {\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: gameState.phase === 'setup' ? /*#__PURE__*/_jsxDEV(GameSetup, {\n      onSetupComplete: setupGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameBoard, {\n      gameState: gameState,\n      onDrawCard: handleDrawCard,\n      onHold: handleHold,\n      onReset: resetGame,\n      onReturnHome: returnToHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"A3R9g2Nmdcd6oL2mIf60aK2OD/c=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","cardUtils","GameSetup","GameBoard","THREE","jsxDEV","_jsxDEV","Game","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","gameId","Date","now","setupGame","numPlayers","shuffle","generateDeck","initialLog","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","push","getCardName","handleDrawCard","currentPlayer","updatedPlayers","actionLog","value","suit","gameEndCheck","checkGameEnd","gameOver","revealPhase","pendingWinner","pendingWinnerMessage","winnerMessage","message","nextPlayerIndex","length","mustContinue","handleHold","allDone","every","p","determineWinner","exactWinner","findIndex","winnerIndex","winMessage","allEliminated","maxTotal","forEach","idx","currentAction","filter","Boolean","botTurn","setTimeout","otherPlayersVisibleCards","map","index","mustDrawFirstCard","shouldBotDraw","clearTimeout","revealTimer","resetGame","Cache","clear","returnToHome","className","children","onSetupComplete","fileName","_jsxFileName","lineNumber","columnNumber","onDrawCard","onHold","onReset","onReturnHome","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport * as THREE from 'three';\n\nexport default function Game() {\n    const [gameState, setGameState] = useState({\n        phase: 'setup', // setup, playing, gameOver, revealing\n        players: [],\n        deck: [],\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: [],\n        gameId: Date.now(), // Add a unique ID for each game session\n    });\n\n    // Initialize the game with the selected number of players\n    const setupGame = (numPlayers) => {\n        let deck = cardUtils.shuffle(cardUtils.generateDeck());\n        const players = [];\n        const initialLog = ['Game started!'];\n\n        // Create players (1 human + bots)\n        for (let i = 0; i < numPlayers; i++) {\n            const playerName = i === 0 ? 'You' : `Bot ${i}`;\n            const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n            const drawnCard = drawn[0];\n            deck = remaining; // Update the deck after each draw\n\n            // Create player with initial card\n            const player = {\n                id: i,\n                name: playerName,\n                isHuman: i === 0,\n                cards: [...drawn],\n                hiddenCards: i === 0 ? [] : [...drawn], // For bots, initial card is hidden\n                visibleCards: i === 0 ? [...drawn] : [], // For human, initial card is visible\n                total: cardUtils.calculateTotal(drawn),\n                status: 'active' // active, holding, eliminated, winner\n            };\n\n            players.push(player);\n\n            // Log the initial card draw - for human we show the card, for bots we just log that they drew a card\n            if (i === 0) {\n                initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n            } else {\n                initialLog.push(`${playerName} drew a card.`);\n            }\n        }\n\n        initialLog.push(\"Your turn.\");\n\n        setGameState({\n            phase: 'playing',\n            players,\n            deck, // Store the updated deck after dealing all initial cards\n            currentPlayerIndex: 0,\n            winner: null,\n            gameLog: initialLog,\n            gameId: Date.now(), // Generate new game ID\n        });\n    };\n\n    // Handle player's decision to draw a card\n    const handleDrawCard = () => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n        // Draw a card from the deck\n        const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n        const drawnCard = drawn[0];\n\n        // Update player's cards and total\n        const updatedPlayers = [...gameState.players];\n        const player = updatedPlayers[gameState.currentPlayerIndex];\n\n        player.cards = [...player.cards, drawnCard];\n        player.visibleCards = [...player.visibleCards, drawnCard];\n        player.total = cardUtils.calculateTotal(player.cards);\n\n        // Log the action\n        const actionLog = `${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`;\n\n        // Check if player reached 17\n        if (player.total === 17) {\n            player.status = 'winner';\n\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                phase: 'gameOver',\n                winner: gameState.currentPlayerIndex,\n                gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n            });\n            return;\n        }\n\n        // Check if player exceeded 17\n        if (player.total > 17) {\n            player.status = 'eliminated';\n\n            // Check if all players are eliminated or if the game is over\n            const gameEndCheck = checkGameEnd(updatedPlayers,\n                `${player.name} exceeded 17 and is eliminated!`);\n\n            if (gameEndCheck.gameOver) {\n                setGameState({\n                    ...gameState,\n                    players: gameEndCheck.players,\n                    deck: remaining,\n                    phase: 'revealing', // Set to revealing phase instead of gameOver\n                    revealPhase: true,\n                    pendingWinner: gameEndCheck.winner, // Store the winner temporarily\n                    pendingWinnerMessage: gameEndCheck.winnerMessage,\n                    gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n                });\n                return;\n            }\n\n            // Find next active player\n            let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n            while (\n                nextPlayerIndex !== gameState.currentPlayerIndex &&\n                (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                    updatedPlayers[nextPlayerIndex].status === 'holding')\n            ) {\n                nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n            }\n\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                currentPlayerIndex: nextPlayerIndex,\n                gameLog: [...gameState.gameLog, actionLog,\n                `${player.name} exceeded 17 and is eliminated!`,\n                `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n            });\n            return;\n        }\n\n        // If player's total is less than 11, they must continue drawing\n        const mustContinue = player.total < 11;\n\n        if (mustContinue) {\n            // Player must continue drawing\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        } else if (player.isHuman) {\n            // Human player can choose to draw again or hold\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        } else {\n            // For bots, decide whether to draw or hold in the useEffect\n            setGameState({\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...gameState.gameLog, actionLog]\n            });\n        }\n    };\n\n    // Handle player's decision to hold\n    const handleHold = () => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        // Check if player is allowed to hold (total must be 11-16)\n        if (currentPlayer.total < 11) {\n            setGameState({\n                ...gameState,\n                gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n            });\n            return;\n        }\n\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (\n            nextPlayerIndex !== gameState.currentPlayerIndex &&\n            (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n            nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n        if (allDone) {\n            const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n            if (gameEndCheck.gameOver) {\n                setGameState({\n                    ...gameState,\n                    players: gameEndCheck.players,\n                    deck: gameState.deck,\n                    phase: 'revealing',\n                    revealPhase: true,\n                    pendingWinner: gameEndCheck.winner,\n                    pendingWinnerMessage: gameEndCheck.winnerMessage,\n                    gameLog: [...gameState.gameLog, ...gameEndCheck.message],\n                });\n                return;\n            }\n        }\n\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            currentPlayerIndex: nextPlayerIndex,\n            gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`],\n        });\n    };\n\n    const determineWinner = (players) => {\n        const exactWinner = players.findIndex((p) => p.total === 17);\n        if (exactWinner !== -1) {\n            return {\n                winnerIndex: exactWinner,\n                winMessage: `${players[exactWinner].name} won with exactly 17!`,\n            };\n        }\n\n        const allEliminated = players.every((p) => p.status === 'eliminated');\n        if (allEliminated) {\n            return {\n                winnerIndex: -1,\n                winMessage: 'All players exceeded 17. Game is void.',\n            };\n        }\n\n        let maxTotal = 0;\n        let winnerIndex = -1;\n\n        players.forEach((player, idx) => {\n            if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n                maxTotal = player.total;\n                winnerIndex = idx;\n            }\n        });\n\n        if (winnerIndex !== -1) {\n            return {\n                winnerIndex,\n                winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`,\n            };\n        }\n\n        return {\n            winnerIndex: -1,\n            winMessage: 'No winner could be determined.',\n        };\n    };\n\n    const checkGameEnd = (updatedPlayers, currentAction = '') => {\n        const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n        if (allDone) {\n            const { winnerIndex, winMessage } = determineWinner(updatedPlayers);\n\n            updatedPlayers.forEach((player) => {\n                if (player.status !== 'eliminated') {\n                    player.status = 'revealing';\n                }\n            });\n\n            return {\n                gameOver: true,\n                revealPhase: true,\n                players: updatedPlayers,\n                winner: winnerIndex,\n                winnerMessage: winMessage,\n                message: [currentAction].filter(Boolean),\n            };\n        }\n\n        return { gameOver: false };\n    };\n\n    useEffect(() => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        const botTurn = setTimeout(() => {\n            const otherPlayersVisibleCards = gameState.players\n                .map((player, index) => {\n                    if (index === gameState.currentPlayerIndex) return [];\n                    return player.visibleCards;\n                })\n                .filter((cards) => cards.length > 0);\n\n            const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n\n            if (mustDrawFirstCard || currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n                handleDrawCard();\n            } else {\n                const updatedPlayers = [...gameState.players];\n                updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n                let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n                while (\n                    nextPlayerIndex !== gameState.currentPlayerIndex &&\n                    (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')\n                ) {\n                    nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n                }\n\n                const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n                if (allDone) {\n                    const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n                    if (gameEndCheck.gameOver) {\n                        setGameState({\n                            ...gameState,\n                            players: gameEndCheck.players,\n                            deck: gameState.deck,\n                            phase: 'revealing',\n                            revealPhase: true,\n                            pendingWinner: gameEndCheck.winner,\n                            pendingWinnerMessage: gameEndCheck.winnerMessage,\n                            gameLog: [...gameState.gameLog, ...gameEndCheck.message],\n                        });\n                        return;\n                    }\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    currentPlayerIndex: nextPlayerIndex,\n                    gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`],\n                });\n            }\n        }, 1000);\n\n        return () => clearTimeout(botTurn);\n    }, [gameState]);\n\n    useEffect(() => {\n        if (gameState.phase === 'revealing' && gameState.revealPhase) {\n            const revealTimer = setTimeout(() => {\n                const updatedPlayers = [...gameState.players];\n\n                if (gameState.pendingWinner !== -1) {\n                    updatedPlayers[gameState.pendingWinner].status = 'winner';\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    phase: 'gameOver',\n                    revealPhase: false,\n                    winner: gameState.pendingWinner,\n                    gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage],\n                });\n            }, 500);\n\n            return () => clearTimeout(revealTimer);\n        }\n    }, [gameState.phase, gameState.revealPhase]);\n\n    const resetGame = () => {\n        const numPlayers = gameState.players.length;\n        THREE.Cache.clear();\n        setTimeout(() => {\n            setupGame(numPlayers);\n        }, 50);\n    };\n\n    const returnToHome = () => {\n        setGameState({\n            phase: 'setup',\n            players: [],\n            deck: [],\n            currentPlayerIndex: 0,\n            winner: null,\n            gameLog: [],\n        });\n    };\n\n    return (\n        <div className=\"game-container\">\n            {gameState.phase === 'setup' ? (\n                <GameSetup onSetupComplete={setupGame} />\n            ) : (\n                <GameBoard\n                    gameState={gameState}\n                    onDrawCard={handleDrawCard}\n                    onHold={handleHold}\n                    onReset={resetGame}\n                    onReturnHome={returnToHome}\n                />\n            )}\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}