{"ast":null,"code":"import { cardUtils } from '../../services/cardUtils'; // Update path\nimport { playSoundEffect } from '../../services/audioService'; // Import audio service\n\n// Initialize game with specified number of players\nexport function setupInitialGame(numPlayers, cardBackStyle = 'cardback') {\n  let deck = cardUtils.shuffle(cardUtils.generateDeck());\n  const players = [];\n  const initialLog = ['Game started!'];\n\n  // Randomly determine the first player (0 to numPlayers-1)\n  const firstPlayerIndex = Math.floor(Math.random() * numPlayers);\n\n  // // Play game start sound\n  playSoundEffect('gameStart');\n  const botNames = [\"Alex\", \"Morgan\", \"Jordan\", \"Taylor\", \"Casey\"];\n\n  // Create all players\n  for (let i = 0; i < numPlayers; i++) {\n    // const playerName = i === 0 ? 'You' : `Bot ${i}`;\n    const playerName = i === 0 ? 'You' : botNames[i - 1];\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(deck, 1);\n    const drawnCard = drawn[0];\n    deck = remaining;\n    const player = {\n      id: i,\n      name: playerName,\n      isHuman: i === 0,\n      cards: [...drawn],\n      hiddenCards: i === 0 ? [] : [...drawn],\n      visibleCards: i === 0 ? [...drawn] : [],\n      total: cardUtils.calculateTotal(drawn),\n      status: 'active' // active, holding, eliminated, winner\n    };\n    players.push(player);\n    if (i === 0) {\n      initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n    } else {\n      initialLog.push(`${playerName} drew a card.`);\n    }\n  }\n\n  // Log who goes first\n  const firstPlayerName = players[firstPlayerIndex].isHuman ? 'You' : players[firstPlayerIndex].name;\n  initialLog.push(`${firstPlayerName} will go first.`);\n  return {\n    phase: 'playing',\n    players,\n    deck,\n    currentPlayerIndex: firstPlayerIndex,\n    winner: null,\n    gameLog: initialLog,\n    gameId: Date.now(),\n    cardBackStyle: cardBackStyle,\n    animationInProgress: false\n  };\n}\n\n// Handle drawing a card\nexport function handleDrawCard(gameState, currentPlayer, playerIndex) {\n  // Draw a card from the deck\n  const {\n    drawn,\n    remaining\n  } = cardUtils.drawCards(gameState.deck, 1);\n  const drawnCard = drawn[0];\n\n  // Play card draw sound\n  playSoundEffect('cardDraw');\n\n  // Update player's cards and total\n  const updatedPlayers = [...gameState.players];\n  const player = updatedPlayers[playerIndex];\n  player.cards = [...player.cards, drawnCard];\n  player.visibleCards = [...player.visibleCards, drawnCard];\n  player.total = cardUtils.calculateTotal(player.cards);\n\n  // Log the action\n  const actionLog = `${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`;\n\n  // Check if player reached exactly 17\n  if (player.total === 17) {\n    player.status = 'winner';\n    if (player.isHuman) {\n      playSoundEffect('win');\n    } else {\n      // Play game over sound\n      playSoundEffect('gameOver');\n    }\n    return {\n      ...gameState,\n      players: updatedPlayers,\n      deck: remaining,\n      phase: 'gameOver',\n      winner: playerIndex,\n      gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n    };\n  }\n\n  // Check if player exceeded 17\n  if (player.total > 17) {\n    player.status = 'eliminated';\n\n    // Check if all players are eliminated or if the game is over\n    const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} exceeded 17 and is eliminated!`);\n    if (gameEndCheck.gameOver) {\n      return {\n        ...gameState,\n        players: gameEndCheck.players,\n        deck: remaining,\n        phase: 'revealing',\n        revealPhase: true,\n        pendingWinner: gameEndCheck.winner,\n        pendingWinnerMessage: gameEndCheck.winnerMessage,\n        gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n      };\n    }\n\n    // Find next active player\n    let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== playerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n    return {\n      ...gameState,\n      players: updatedPlayers,\n      deck: remaining,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    };\n  }\n\n  // Standard case - continue game\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    deck: remaining,\n    gameLog: [...gameState.gameLog, actionLog],\n    animationInProgress: true\n  };\n}\n\n// Handle player holding\nexport function handleHold(gameState, currentPlayer, playerIndex) {\n  // Check if player has at least 2 cards (initial card + at least one drawn card)\n  if (currentPlayer.cards.length < 2) {\n    return gameState; // Cannot hold until drawing at least one more card\n  }\n\n  // Check if player has reached at least 11 points\n  if (currentPlayer.total < 11) {\n    return gameState; // Cannot hold below 11\n  }\n\n  // Play hold sound\n  playSoundEffect('hold');\n  const updatedPlayers = [...gameState.players];\n  updatedPlayers[playerIndex].status = 'holding';\n\n  // Find next active player\n  let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n  while (nextPlayerIndex !== playerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n    nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n  }\n  const allDone = updatedPlayers.every(p => p.status !== 'active');\n  if (allDone) {\n    const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n    if (gameEndCheck.gameOver) {\n      return {\n        ...gameState,\n        players: gameEndCheck.players,\n        phase: 'revealing',\n        revealPhase: true,\n        pendingWinner: gameEndCheck.winner,\n        pendingWinnerMessage: gameEndCheck.winnerMessage,\n        gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n      };\n    }\n  }\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    currentPlayerIndex: nextPlayerIndex,\n    gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n  };\n}\n\n// Check if the game has ended\nexport function checkGameEnd(players, currentAction = '') {\n  const allDone = players.every(p => p.status !== 'active');\n  if (allDone) {\n    const {\n      winnerIndex,\n      winMessage\n    } = determineWinner(players);\n    players.forEach(player => {\n      if (player.status !== 'eliminated') {\n        player.status = 'revealing';\n      }\n    });\n    return {\n      gameOver: true,\n      revealPhase: true,\n      players,\n      winner: winnerIndex,\n      winnerMessage: winMessage,\n      message: [currentAction].filter(Boolean)\n    };\n  }\n  return {\n    gameOver: false\n  };\n}\n\n// Determine the winner based on game rules\nexport function determineWinner(players) {\n  const exactWinner = players.findIndex(p => p.total === 17);\n  if (exactWinner !== -1) {\n    return {\n      winnerIndex: exactWinner,\n      winMessage: `${players[exactWinner].name} won with exactly 17!`\n    };\n  }\n  const allEliminated = players.every(p => p.status === 'eliminated');\n  if (allEliminated) {\n    return {\n      winnerIndex: -1,\n      winMessage: 'All players exceeded 17. Game is void.'\n    };\n  }\n  let maxTotal = 0;\n  let winnerIndex = -1;\n  players.forEach((player, idx) => {\n    if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n      maxTotal = player.total;\n      winnerIndex = idx;\n    }\n  });\n  if (winnerIndex !== -1) {\n    if (players[winnerIndex].isHuman) {\n      playSoundEffect('win');\n    } else {\n      // Play game over sound\n      playSoundEffect('gameOver');\n    }\n    return {\n      winnerIndex,\n      winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n    };\n  }\n  return {\n    winnerIndex: -1,\n    winMessage: 'No winner could be determined.'\n  };\n}","map":{"version":3,"names":["cardUtils","playSoundEffect","setupInitialGame","numPlayers","cardBackStyle","deck","shuffle","generateDeck","players","initialLog","firstPlayerIndex","Math","floor","random","botNames","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","push","getCardName","firstPlayerName","phase","currentPlayerIndex","winner","gameLog","gameId","Date","now","animationInProgress","handleDrawCard","gameState","currentPlayer","playerIndex","updatedPlayers","actionLog","gameEndCheck","checkGameEnd","gameOver","revealPhase","pendingWinner","pendingWinnerMessage","winnerMessage","message","nextPlayerIndex","length","handleHold","allDone","every","p","currentAction","winnerIndex","winMessage","determineWinner","forEach","filter","Boolean","exactWinner","findIndex","allEliminated","maxTotal","idx"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/gameLogic.js"],"sourcesContent":["import { cardUtils } from '../../services/cardUtils'; // Update path\nimport { playSoundEffect } from '../../services/audioService'; // Import audio service\n\n// Initialize game with specified number of players\nexport function setupInitialGame(numPlayers, cardBackStyle = 'cardback') {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    // Randomly determine the first player (0 to numPlayers-1)\n    const firstPlayerIndex = Math.floor(Math.random() * numPlayers);\n\n    // // Play game start sound\n    playSoundEffect('gameStart');\n\n    const botNames = [\n        \"Alex\", \"Morgan\", \"Jordan\", \"Taylor\", \"Casey\"\n    ];\n\n    // Create all players\n    for (let i = 0; i < numPlayers; i++) {\n        // const playerName = i === 0 ? 'You' : `Bot ${i}`;\n        const playerName = i === 0 ? 'You' : botNames[i-1];\n        \n        const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n        const drawnCard = drawn[0];\n        deck = remaining;\n\n\n        const player = {\n            id: i,\n            name: playerName,\n            isHuman: i === 0,\n            cards: [...drawn],\n            hiddenCards: i === 0 ? [] : [...drawn],\n            visibleCards: i === 0 ? [...drawn] : [],\n            total: cardUtils.calculateTotal(drawn),\n            status: 'active' // active, holding, eliminated, winner\n        };\n\n        players.push(player);\n\n        if (i === 0) {\n            initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n        } else {\n            initialLog.push(`${playerName} drew a card.`);\n        }\n    }\n\n    // Log who goes first\n    const firstPlayerName = players[firstPlayerIndex].isHuman ? 'You' : players[firstPlayerIndex].name;\n    initialLog.push(`${firstPlayerName} will go first.`);\n\n    return {\n        phase: 'playing',\n        players,\n        deck,\n        currentPlayerIndex: firstPlayerIndex,\n        winner: null,\n        gameLog: initialLog,\n        gameId: Date.now(),\n        cardBackStyle: cardBackStyle,\n        animationInProgress: false \n    };\n}\n\n// Handle drawing a card\nexport function handleDrawCard(gameState, currentPlayer, playerIndex) {\n    // Draw a card from the deck\n    const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n\n    // Play card draw sound\n    playSoundEffect('cardDraw');\n\n    // Update player's cards and total\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[playerIndex];\n\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n\n    // Log the action\n    const actionLog = `${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`;\n\n    // Check if player reached exactly 17\n    if (player.total === 17) {\n\n        player.status = 'winner';\n        if (player.isHuman) {\n            playSoundEffect('win');\n        } else {\n            // Play game over sound\n            playSoundEffect('gameOver');\n        }\n\n\n        return {\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            phase: 'gameOver',\n            winner: playerIndex,\n            gameLog: [...gameState.gameLog, actionLog, `${player.name} won with exactly 17!`]\n        };\n    }\n\n    // Check if player exceeded 17\n    if (player.total > 17) {\n        player.status = 'eliminated';\n\n        // Check if all players are eliminated or if the game is over\n        const gameEndCheck = checkGameEnd(\n            updatedPlayers,\n            `${player.name} exceeded 17 and is eliminated!`\n        );\n\n        if (gameEndCheck.gameOver) {\n            return {\n                ...gameState,\n                players: gameEndCheck.players,\n                deck: remaining,\n                phase: 'revealing',\n                revealPhase: true,\n                pendingWinner: gameEndCheck.winner,\n                pendingWinnerMessage: gameEndCheck.winnerMessage,\n                gameLog: [...gameState.gameLog, actionLog, ...gameEndCheck.message]\n            };\n        }\n\n        // Find next active player\n        let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n        while (\n            nextPlayerIndex !== playerIndex &&\n            (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n            nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        return {\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            currentPlayerIndex: nextPlayerIndex,\n            gameLog: [\n                ...gameState.gameLog,\n                actionLog,\n                `${player.name} exceeded 17 and is eliminated!`,\n                `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n            ]\n        };\n    }\n\n    // Standard case - continue game\n    return {\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog],\n        animationInProgress: true\n    };\n}\n\n// Handle player holding\nexport function handleHold(gameState, currentPlayer, playerIndex) {\n    // Check if player has at least 2 cards (initial card + at least one drawn card)\n    if (currentPlayer.cards.length < 2) {\n        return gameState; // Cannot hold until drawing at least one more card\n    }\n\n    // Check if player has reached at least 11 points\n    if (currentPlayer.total < 11) {\n        return gameState; // Cannot hold below 11\n    }\n\n    // Play hold sound\n    playSoundEffect('hold');\n\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[playerIndex].status = 'holding';\n\n    // Find next active player\n    let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n    while (\n        nextPlayerIndex !== playerIndex &&\n        (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n            updatedPlayers[nextPlayerIndex].status === 'holding')\n    ) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n    if (allDone) {\n        const gameEndCheck = checkGameEnd(\n            updatedPlayers,\n            `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`\n        );\n\n        if (gameEndCheck.gameOver) {\n\n            return {\n                ...gameState,\n                players: gameEndCheck.players,\n                phase: 'revealing',\n                revealPhase: true,\n                pendingWinner: gameEndCheck.winner,\n                pendingWinnerMessage: gameEndCheck.winnerMessage,\n                gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n            };\n        }\n    }\n\n    return {\n        ...gameState,\n        players: updatedPlayers,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [\n            ...gameState.gameLog,\n            `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`,\n            `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n        ]\n    };\n}\n\n// Check if the game has ended\nexport function checkGameEnd(players, currentAction = '') {\n    const allDone = players.every((p) => p.status !== 'active');\n\n    if (allDone) {\n        const { winnerIndex, winMessage } = determineWinner(players);\n\n        players.forEach((player) => {\n            if (player.status !== 'eliminated') {\n                player.status = 'revealing';\n            }\n        });\n\n        return {\n            gameOver: true,\n            revealPhase: true,\n            players,\n            winner: winnerIndex,\n            winnerMessage: winMessage,\n            message: [currentAction].filter(Boolean)\n        };\n    }\n\n    return { gameOver: false };\n}\n\n// Determine the winner based on game rules\nexport function determineWinner(players) {\n    const exactWinner = players.findIndex((p) => p.total === 17);\n    if (exactWinner !== -1) {\n\n        return {\n            winnerIndex: exactWinner,\n            winMessage: `${players[exactWinner].name} won with exactly 17!`,\n        };\n    }\n\n    const allEliminated = players.every((p) => p.status === 'eliminated');\n    if (allEliminated) {\n        return {\n            winnerIndex: -1,\n            winMessage: 'All players exceeded 17. Game is void.',\n        };\n    }\n\n    let maxTotal = 0;\n    let winnerIndex = -1;\n\n    players.forEach((player, idx) => {\n        if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n            maxTotal = player.total;\n            winnerIndex = idx;\n        }\n    });\n\n    if (winnerIndex !== -1) {\n        if (players[winnerIndex].isHuman) {\n            playSoundEffect('win');\n        } else {\n            // Play game over sound\n            playSoundEffect('gameOver');\n        }\n        return {\n            winnerIndex,\n            winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`,\n        };\n    }\n\n    return {\n        winnerIndex: -1,\n        winMessage: 'No winner could be determined.',\n    };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}