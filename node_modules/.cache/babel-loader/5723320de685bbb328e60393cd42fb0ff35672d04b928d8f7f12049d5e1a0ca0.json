{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Card({\n  suit,\n  value,\n  position = [0, 0, 0],\n  rotation = [0, 0, 0],\n  onClick,\n  flipped = false\n}) {\n  _s();\n  const meshRef = useRef();\n  const [hovered, setHovered] = useState(false);\n\n  // Load front and back textures - with error handling\n  let frontTexture, backTexture;\n  try {\n    frontTexture = useLoader(THREE.TextureLoader, `/assets/cards/faces/${suit}/${value}.png`);\n    backTexture = useLoader(THREE.TextureLoader, '/assets/cards/backs/cardback.png');\n  } catch (error) {\n    console.error('Error loading card textures:', error);\n    // Use colored materials as fallback if textures fail to load\n    frontTexture = null;\n    backTexture = null;\n  }\n\n  // Card dimensions (standard playing card ratio)\n  const width = 1;\n  const height = 1.4;\n\n  // Handle hover state\n  const onPointerOver = () => setHovered(true);\n  const onPointerOut = () => setHovered(false);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: position,\n    rotation: rotation,\n    onClick: onClick,\n    onPointerOver: onPointerOver,\n    onPointerOut: onPointerOut,\n    scale: hovered ? [1.1, 1.1, 1.1] : [1, 1, 1],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [width, height]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), frontTexture && backTexture ? /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: flipped ? backTexture : frontTexture,\n      side: THREE.DoubleSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: flipped ? '#000080' : suit === 'hearts' || suit === 'diamonds' ? '#ff0000' : '#000000',\n      side: THREE.DoubleSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Card, \"TYEL3eanuTWKb7/E15MVGunrcC0=\", false, function () {\n  return [useLoader, useLoader];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useRef","useState","useLoader","THREE","jsxDEV","_jsxDEV","Card","suit","value","position","rotation","onClick","flipped","_s","meshRef","hovered","setHovered","frontTexture","backTexture","TextureLoader","error","console","width","height","onPointerOver","onPointerOut","ref","scale","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","DoubleSide","color","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nexport default function Card({ \n  suit, \n  value, \n  position = [0, 0, 0], \n  rotation = [0, 0, 0], \n  onClick, \n  flipped = false \n}) {\n  const meshRef = useRef();\n  const [hovered, setHovered] = useState(false);\n  \n  // Load front and back textures - with error handling\n  let frontTexture, backTexture;\n  try {\n    frontTexture = useLoader(THREE.TextureLoader, `/assets/cards/faces/${suit}/${value}.png`);\n    backTexture = useLoader(THREE.TextureLoader, '/assets/cards/backs/cardback.png');\n  } catch (error) {\n    console.error('Error loading card textures:', error);\n    // Use colored materials as fallback if textures fail to load\n    frontTexture = null;\n    backTexture = null;\n  }\n  \n  // Card dimensions (standard playing card ratio)\n  const width = 1;\n  const height = 1.4;\n  \n  // Handle hover state\n  const onPointerOver = () => setHovered(true);\n  const onPointerOut = () => setHovered(false);\n  \n  return (\n    <mesh\n      ref={meshRef}\n      position={position}\n      rotation={rotation}\n      onClick={onClick}\n      onPointerOver={onPointerOver}\n      onPointerOut={onPointerOut}\n      scale={hovered ? [1.1, 1.1, 1.1] : [1, 1, 1]}\n    >\n      <planeGeometry args={[width, height]} />\n      {frontTexture && backTexture ? (\n        <meshStandardMaterial \n          map={flipped ? backTexture : frontTexture}\n          side={THREE.DoubleSide}\n        />\n      ) : (\n        <meshStandardMaterial \n          color={flipped ? '#000080' : (suit === 'hearts' || suit === 'diamonds' ? '#ff0000' : '#000000')}\n          side={THREE.DoubleSide}\n        />\n      )}\n    </mesh>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,IAAIA,CAAC;EAC3BC,IAAI;EACJC,KAAK;EACLC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpBC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpBC,OAAO;EACPC,OAAO,GAAG;AACZ,CAAC,EAAE;EAAAC,EAAA;EACD,MAAMC,OAAO,GAAGd,MAAM,CAAC,CAAC;EACxB,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,IAAIgB,YAAY,EAAEC,WAAW;EAC7B,IAAI;IACFD,YAAY,GAAGf,SAAS,CAACC,KAAK,CAACgB,aAAa,EAAE,uBAAuBZ,IAAI,IAAIC,KAAK,MAAM,CAAC;IACzFU,WAAW,GAAGhB,SAAS,CAACC,KAAK,CAACgB,aAAa,EAAE,kCAAkC,CAAC;EAClF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD;IACAH,YAAY,GAAG,IAAI;IACnBC,WAAW,GAAG,IAAI;EACpB;;EAEA;EACA,MAAMI,KAAK,GAAG,CAAC;EACf,MAAMC,MAAM,GAAG,GAAG;;EAElB;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAMR,UAAU,CAAC,IAAI,CAAC;EAC5C,MAAMS,YAAY,GAAGA,CAAA,KAAMT,UAAU,CAAC,KAAK,CAAC;EAE5C,oBACEX,OAAA;IACEqB,GAAG,EAAEZ,OAAQ;IACbL,QAAQ,EAAEA,QAAS;IACnBC,QAAQ,EAAEA,QAAS;IACnBC,OAAO,EAAEA,OAAQ;IACjBa,aAAa,EAAEA,aAAc;IAC7BC,YAAY,EAAEA,YAAa;IAC3BE,KAAK,EAAEZ,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;IAAAa,QAAA,gBAE7CvB,OAAA;MAAewB,IAAI,EAAE,CAACP,KAAK,EAAEC,MAAM;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACvChB,YAAY,IAAIC,WAAW,gBAC1Bb,OAAA;MACE6B,GAAG,EAAEtB,OAAO,GAAGM,WAAW,GAAGD,YAAa;MAC1CkB,IAAI,EAAEhC,KAAK,CAACiC;IAAW;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,gBAEF5B,OAAA;MACEgC,KAAK,EAAEzB,OAAO,GAAG,SAAS,GAAIL,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,UAAU,GAAG,SAAS,GAAG,SAAW;MAChG4B,IAAI,EAAEhC,KAAK,CAACiC;IAAW;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEX;AAACpB,EAAA,CAvDuBP,IAAI;EAAA,QAcTJ,SAAS,EACVA,SAAS;AAAA;AAAAoC,EAAA,GAfHhC,IAAI;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}