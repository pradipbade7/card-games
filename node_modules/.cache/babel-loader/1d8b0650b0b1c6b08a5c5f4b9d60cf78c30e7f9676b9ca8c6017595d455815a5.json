{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    // setup, playing, gameOver\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: []\n  });\n\n  // Initialize the game with the selected number of players\n  const setupGame = numPlayers => {\n    const deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n\n    // Create players (1 human + bots)\n    for (let i = 0; i < numPlayers; i++) {\n      players.push({\n        id: i,\n        name: i === 0 ? 'You' : `Bot ${i}`,\n        isHuman: i === 0,\n        cards: [],\n        hiddenCards: [],\n        visibleCards: [],\n        total: 0,\n        status: 'active' // active, holding, eliminated, winner\n      });\n    }\n\n    // Deal initial hidden card to each player\n    players.forEach(player => {\n      const {\n        drawn,\n        remaining\n      } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n\n      // For human player, add to visibleCards, for bots add to hiddenCards\n      if (player.isHuman) {\n        player.visibleCards = [...drawn];\n      } else {\n        player.hiddenCards = [...drawn];\n      }\n      player.cards = [...drawn];\n      player.total = cardUtils.calculateTotal(player.cards);\n    });\n    setGameState({\n      phase: 'playing',\n      players,\n      deck: deck.slice(numPlayers),\n      // Remove dealt cards\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: ['Game started! Your turn.']\n    });\n  };\n\n  // Handle player's decision to draw a card\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n    // Draw a card from the deck\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n\n    // Update player's cards and total\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n\n    // Check if player reached 17 or went over\n    let log = [`${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`];\n    if (player.total === 17) {\n      player.status = 'winner';\n      log.push(`${player.name} won with exactly 17!`);\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, ...log]\n      });\n      return;\n    }\n    if (player.total > 17) {\n      player.status = 'eliminated';\n      log.push(`${player.name} exceeded 17 and is eliminated!`);\n\n      // Check if all players are eliminated\n      const allEliminated = updatedPlayers.every(p => p.status === 'eliminated');\n      if (allEliminated) {\n        log.push('All players exceeded 17. Game is void.');\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          deck: remaining,\n          phase: 'gameOver',\n          gameLog: [...gameState.gameLog, ...log]\n        });\n        return;\n      }\n    }\n\n    // If player's total is less than 11, they must continue drawing\n    const mustContinue = player.total < 11 && player.status === 'active';\n    if (!player.isHuman && mustContinue) {\n      // For bots we set a timeout to make the game feel more natural\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, ...log]\n      });\n      return;\n    }\n\n    // If player is human and not required to continue, or bot is done, move to next player\n    if (player.isHuman && !mustContinue || !player.isHuman) {\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n\n      // If we went through all players and came back, check for a winner\n      if (nextPlayerIndex === gameState.currentPlayerIndex || updatedPlayers.every(p => p.status !== 'active')) {\n        // Find winner with highest total not exceeding 17\n        let maxTotal = 0;\n        let winnerIndex = -1;\n        updatedPlayers.forEach((p, idx) => {\n          if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n            maxTotal = p.total;\n            winnerIndex = idx;\n          }\n        });\n        if (winnerIndex !== -1) {\n          updatedPlayers[winnerIndex].status = 'winner';\n          log.push(`${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`);\n          setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            phase: 'gameOver',\n            winner: winnerIndex,\n            gameLog: [...gameState.gameLog, ...log]\n          });\n          return;\n        }\n      }\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, ...log, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, ...log]\n      });\n    }\n  };\n\n  // Handle player's decision to hold\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n    // Check if player is allowed to hold (total must be 11-16)\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n    // Find next active player\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    // Check if all players are holding or eliminated\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      // Find winner with highest total not exceeding 17\n      let maxTotal = 0;\n      let winnerIndex = -1;\n      updatedPlayers.forEach((p, idx) => {\n        if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n          maxTotal = p.total;\n          winnerIndex = idx;\n        }\n      });\n      if (winnerIndex !== -1) {\n        updatedPlayers[winnerIndex].status = 'winner';\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          winner: winnerIndex,\n          gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`]\n        });\n        return;\n      }\n    }\n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, `You decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    });\n  };\n\n  // Handle bot turns with a delay\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    const botTurn = setTimeout(() => {\n      // Get visible cards of other players (excluding first cards of bots)\n      const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n        if (index === gameState.currentPlayerIndex) return [];\n        return player.visibleCards;\n      }).filter(cards => cards.length > 0);\n\n      // Decide whether to draw or hold\n      if (currentPlayer.total < 11 || cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        // Bot decides to hold\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n\n        // Find next active player\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (nextPlayerIndex !== gameState.currentPlayerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n\n        // Check if all players are holding or eliminated\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        if (allDone) {\n          // Find winner with highest total not exceeding 17\n          let maxTotal = 0;\n          let winnerIndex = -1;\n          updatedPlayers.forEach((p, idx) => {\n            if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n              maxTotal = p.total;\n              winnerIndex = idx;\n            }\n          });\n          if (winnerIndex !== -1) {\n            updatedPlayers[winnerIndex].status = 'winner';\n            setGameState({\n              ...gameState,\n              players: updatedPlayers,\n              phase: 'gameOver',\n              winner: winnerIndex,\n              gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`]\n            });\n            return;\n          }\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n        });\n      }\n    }, 1000); // 1 second delay for bot actions\n\n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n  const resetGame = () => {\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: gameState.phase === 'setup' ? /*#__PURE__*/_jsxDEV(GameSetup, {\n      onSetupComplete: setupGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameBoard, {\n      gameState: gameState,\n      onDrawCard: handleDrawCard,\n      onHold: handleHold,\n      onReset: resetGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"MS74JJNM3zt4I+0bouw3nK/bdIw=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","cardUtils","GameSetup","GameBoard","jsxDEV","_jsxDEV","Game","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","setupGame","numPlayers","shuffle","generateDeck","i","push","id","name","isHuman","cards","hiddenCards","visibleCards","total","status","forEach","player","drawn","remaining","drawCards","drawnCard","calculateTotal","slice","handleDrawCard","currentPlayer","updatedPlayers","log","value","suit","allEliminated","every","p","mustContinue","nextPlayerIndex","length","maxTotal","winnerIndex","idx","handleHold","allDone","botTurn","setTimeout","otherPlayersVisibleCards","map","index","filter","shouldBotDraw","clearTimeout","resetGame","className","children","onSetupComplete","fileName","_jsxFileName","lineNumber","columnNumber","onDrawCard","onHold","onReset","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { cardUtils } from '../utils/cardUtils';\nimport GameSetup from './GameSetup';\nimport GameBoard from './GameBoard';\n\nexport default function Game() {\n  const [gameState, setGameState] = useState({\n    phase: 'setup', // setup, playing, gameOver\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: []\n  });\n  \n  // Initialize the game with the selected number of players\n  const setupGame = (numPlayers) => {\n    const deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    \n    // Create players (1 human + bots)\n    for (let i = 0; i < numPlayers; i++) {\n      players.push({\n        id: i,\n        name: i === 0 ? 'You' : `Bot ${i}`,\n        isHuman: i === 0,\n        cards: [],\n        hiddenCards: [],\n        visibleCards: [],\n        total: 0,\n        status: 'active' // active, holding, eliminated, winner\n      });\n    }\n    \n    // Deal initial hidden card to each player\n    players.forEach(player => {\n      const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n      const drawnCard = drawn[0];\n      \n      // For human player, add to visibleCards, for bots add to hiddenCards\n      if (player.isHuman) {\n        player.visibleCards = [...drawn];\n      } else {\n        player.hiddenCards = [...drawn];\n      }\n      \n      player.cards = [...drawn];\n      player.total = cardUtils.calculateTotal(player.cards);\n    });\n    \n    setGameState({\n      phase: 'playing',\n      players,\n      deck: deck.slice(numPlayers), // Remove dealt cards\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: ['Game started! Your turn.']\n    });\n  };\n  \n  // Handle player's decision to draw a card\n  const handleDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    \n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n    \n    // Draw a card from the deck\n    const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n    \n    // Update player's cards and total\n    const updatedPlayers = [...gameState.players];\n    const player = updatedPlayers[gameState.currentPlayerIndex];\n    \n    player.cards = [...player.cards, drawnCard];\n    player.visibleCards = [...player.visibleCards, drawnCard];\n    player.total = cardUtils.calculateTotal(player.cards);\n    \n    // Check if player reached 17 or went over\n    let log = [`${player.name} drew ${drawnCard.value} of ${drawnCard.suit}. Total: ${player.total}`];\n    \n    if (player.total === 17) {\n      player.status = 'winner';\n      log.push(`${player.name} won with exactly 17!`);\n      \n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: gameState.currentPlayerIndex,\n        gameLog: [...gameState.gameLog, ...log]\n      });\n      return;\n    }\n    \n    if (player.total > 17) {\n      player.status = 'eliminated';\n      log.push(`${player.name} exceeded 17 and is eliminated!`);\n      \n      // Check if all players are eliminated\n      const allEliminated = updatedPlayers.every(p => p.status === 'eliminated');\n      if (allEliminated) {\n        log.push('All players exceeded 17. Game is void.');\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          deck: remaining,\n          phase: 'gameOver',\n          gameLog: [...gameState.gameLog, ...log]\n        });\n        return;\n      }\n    }\n    \n    // If player's total is less than 11, they must continue drawing\n    const mustContinue = player.total < 11 && player.status === 'active';\n    if (!player.isHuman && mustContinue) {\n      // For bots we set a timeout to make the game feel more natural\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, ...log]\n      });\n      return;\n    }\n    \n    // If player is human and not required to continue, or bot is done, move to next player\n    if ((player.isHuman && !mustContinue) || !player.isHuman) {\n      let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n      while (\n        nextPlayerIndex !== gameState.currentPlayerIndex && \n        (updatedPlayers[nextPlayerIndex].status === 'eliminated' || \n         updatedPlayers[nextPlayerIndex].status === 'holding')\n      ) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n      }\n      \n      // If we went through all players and came back, check for a winner\n      if (nextPlayerIndex === gameState.currentPlayerIndex || \n          updatedPlayers.every(p => p.status !== 'active')) {\n        // Find winner with highest total not exceeding 17\n        let maxTotal = 0;\n        let winnerIndex = -1;\n        \n        updatedPlayers.forEach((p, idx) => {\n          if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n            maxTotal = p.total;\n            winnerIndex = idx;\n          }\n        });\n        \n        if (winnerIndex !== -1) {\n          updatedPlayers[winnerIndex].status = 'winner';\n          log.push(`${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`);\n          \n          setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            phase: 'gameOver',\n            winner: winnerIndex,\n            gameLog: [...gameState.gameLog, ...log]\n          });\n          return;\n        }\n      }\n      \n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [...gameState.gameLog, \n          ...log, \n          `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n        ]\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, ...log]\n      });\n    }\n  };\n  \n  // Handle player's decision to hold\n  const handleHold = () => {\n    if (gameState.phase !== 'playing') return;\n    \n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    \n    // Check if player is allowed to hold (total must be 11-16)\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    \n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n    \n    // Find next active player\n    let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n    while (\n      nextPlayerIndex !== gameState.currentPlayerIndex && \n      (updatedPlayers[nextPlayerIndex].status === 'eliminated' || \n       updatedPlayers[nextPlayerIndex].status === 'holding')\n    ) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n    \n    // Check if all players are holding or eliminated\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    \n    if (allDone) {\n      // Find winner with highest total not exceeding 17\n      let maxTotal = 0;\n      let winnerIndex = -1;\n      \n      updatedPlayers.forEach((p, idx) => {\n        if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n          maxTotal = p.total;\n          winnerIndex = idx;\n        }\n      });\n      \n      if (winnerIndex !== -1) {\n        updatedPlayers[winnerIndex].status = 'winner';\n        \n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          winner: winnerIndex,\n          gameLog: [...gameState.gameLog, \n            `You decided to hold with a total of ${currentPlayer.total}.`,\n            `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`\n          ]\n        });\n        return;\n      }\n    }\n    \n    setGameState({\n      ...gameState,\n      players: updatedPlayers,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, \n        `You decided to hold with a total of ${currentPlayer.total}.`,\n        `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n      ]\n    });\n  };\n  \n  // Handle bot turns with a delay\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    \n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    \n    const botTurn = setTimeout(() => {\n      // Get visible cards of other players (excluding first cards of bots)\n      const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n        if (index === gameState.currentPlayerIndex) return [];\n        return player.visibleCards;\n      }).filter(cards => cards.length > 0);\n      \n      // Decide whether to draw or hold\n      if (currentPlayer.total < 11 || \n          cardUtils.shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards)) {\n        handleDrawCard();\n      } else {\n        // Bot decides to hold\n        const updatedPlayers = [...gameState.players];\n        updatedPlayers[gameState.currentPlayerIndex].status = 'holding';\n        \n        // Find next active player\n        let nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n        while (\n          nextPlayerIndex !== gameState.currentPlayerIndex && \n          (updatedPlayers[nextPlayerIndex].status === 'eliminated' || \n           updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n          nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n        \n        // Check if all players are holding or eliminated\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        \n        if (allDone) {\n          // Find winner with highest total not exceeding 17\n          let maxTotal = 0;\n          let winnerIndex = -1;\n          \n          updatedPlayers.forEach((p, idx) => {\n            if (p.status !== 'eliminated' && p.total <= 17 && p.total > maxTotal) {\n              maxTotal = p.total;\n              winnerIndex = idx;\n            }\n          });\n          \n          if (winnerIndex !== -1) {\n            updatedPlayers[winnerIndex].status = 'winner';\n            \n            setGameState({\n              ...gameState,\n              players: updatedPlayers,\n              phase: 'gameOver',\n              winner: winnerIndex,\n              gameLog: [...gameState.gameLog, \n                `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`,\n                `${updatedPlayers[winnerIndex].name} wins with a total of ${maxTotal}!`\n              ]\n            });\n            return;\n          }\n        }\n        \n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          currentPlayerIndex: nextPlayerIndex,\n          gameLog: [...gameState.gameLog, \n            `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`,\n            `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n          ]\n        });\n      }\n    }, 1000); // 1 second delay for bot actions\n    \n    return () => clearTimeout(botTurn);\n  }, [gameState]);\n  \n  const resetGame = () => {\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n  \n  return (\n    <div className=\"game-container\">\n      {gameState.phase === 'setup' ? (\n        <GameSetup onSetupComplete={setupGame} />\n      ) : (\n        <GameBoard \n          gameState={gameState} \n          onDrawCard={handleDrawCard} \n          onHold={handleHold}\n          onReset={resetGame}\n        />\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}