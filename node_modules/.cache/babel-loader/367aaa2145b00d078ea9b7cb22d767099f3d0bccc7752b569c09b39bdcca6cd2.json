{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js\";\nimport React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react';\nimport * as THREE from 'three';\n\n// DeckScene component to render the deck in the center of the table\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DeckScene({\n  cardCount,\n  cardBackStyle\n}) {\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: null,\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardDeck, {\n      cardCount: cardCount,\n      cardBackStyle: cardBackStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\n// CardDeck component to display a stack of cards\n_c = DeckScene;\nfunction CardDeck({\n  cardCount = 52,\n  cardBackStyle = 'cardback'\n}) {\n  // Create an array of cards for the deck\n  const deckCards = Array.from({\n    length: Math.min(cardCount, 20)\n  }, (_, index) => ({\n    id: `deck-card-${index}`,\n    position: [0, -0.05 * index, 0],\n    // Stack cards with slight offset\n    rotation: [Math.PI / 2, 0, Math.random() * 0.02 - 0.01],\n    // Face up with slight random rotation\n    scale: [0.8, 0.8, 0.8]\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: deckCards.map((card, index) => /*#__PURE__*/_jsxDEV(DeckCard, {\n      position: card.position,\n      rotation: card.rotation,\n      scale: card.scale,\n      cardBackStyle: cardBackStyle,\n      zIndex: index\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n\n// Individual card in the deck\n_c2 = CardDeck;\nfunction DeckCard({\n  position,\n  rotation,\n  scale,\n  cardBackStyle,\n  zIndex\n}) {\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    rotation: rotation,\n    scale: scale,\n    renderOrder: zIndex,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 1.4, 0.02]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"#ffffff\",\n      roughness: 0.2,\n      metalness: 0.1,\n      emissive: \"#000000\",\n      emissiveIntensity: 0.1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.011],\n      rotation: [0, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1, 1.4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: new THREE.TextureLoader().load(`/assets/cards/backs/${cardBackStyle}.png`),\n        side: THREE.DoubleSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0.7, 0],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1, 0.02]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"#f0f0f0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, -0.7, 0],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1, 0.02]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"#f0f0f0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0.5, 0, 0],\n      rotation: [0, Math.PI / 2, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1.4, 0.02]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"#f0f0f0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [-0.5, 0, 0],\n      rotation: [0, Math.PI / 2, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1.4, 0.02]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"#f0f0f0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_c3 = DeckCard;\nexport default function GameBoard({\n  gameState,\n  onDrawCard,\n  onHold,\n  onReset,\n  onReturnHome\n}) {\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    winner: winningPlayerId,\n    gameLog,\n    deck\n  } = gameState;\n\n  // Find the human player\n  const humanPlayerIndex = players.findIndex(player => player.isHuman);\n  const humanPlayer = players[humanPlayerIndex];\n\n  // Position players evenly around a circle\n  const positionPlayersInCircle = () => {\n    if (players.length <= 1) return players;\n    const arrangedPlayers = [...players];\n    const totalPlayers = players.length;\n    const angleStep = 360 / totalPlayers;\n\n    // Calculate position for each player based on their index\n    for (let i = 0; i < totalPlayers; i++) {\n      // Calculate player's angle from bottom center (human player is always at 0 degrees)\n      // Non-human players are placed at equal intervals going clockwise from human\n      let playerAngle;\n      if (players[i].isHuman) {\n        playerAngle = 0; // Human player is always at bottom (0 degrees)\n      } else {\n        // Calculate bot placement: \n        // First, determine this bot's position relative to human player\n        const orderAfterHuman = i > humanPlayerIndex ? i - humanPlayerIndex : totalPlayers - humanPlayerIndex + i;\n\n        // Calculate angle based on position order (clockwise)\n        playerAngle = orderAfterHuman * angleStep % 360;\n      }\n\n      // Convert angle to position coordinates around the table\n      // Table center is (50%, 50%) with radius depending on table size\n      // We use cos for x-axis (horizontal) and sin for y-axis (vertical)\n      // Note: In CSS, y-axis is inverted (top is 0), so we use -sin\n\n      // For a circular table:\n      // - Radius is 40% of container width/height for proper spacing\n      // - Positions are calculated as percentage from center (50%, 50%)\n      const radius = 40; // Percentage of container\n      const xPos = 50 - radius * Math.sin(playerAngle * Math.PI / 180);\n      const yPos = 50 - radius * Math.cos(playerAngle * Math.PI / 180);\n\n      // Store calculated position and angle\n      arrangedPlayers[i] = {\n        ...players[i],\n        position: {\n          left: `${xPos}%`,\n          top: `${yPos}%`,\n          angle: playerAngle\n        }\n      };\n    }\n    return arrangedPlayers;\n  };\n  const positionedPlayers = positionPlayersInCircle();\n\n  // Calculate remaining cards in the deck\n  const remainingCards = deck ? deck.length : 52;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deck-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-3d\",\n          children: /*#__PURE__*/_jsxDEV(Canvas, {\n            shadows: true,\n            camera: {\n              fov: 45,\n              position: [0, 2, 2]\n            },\n            children: /*#__PURE__*/_jsxDEV(DeckScene, {\n              cardCount: remainingCards,\n              cardBackStyle: gameState.cardBackStyle || 'cardback'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-count\",\n          children: [remainingCards, \" cards\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: positionedPlayers.map(player => {\n          // Calculate rotation for player hand\n          // Cards should be rotated to face the center of the table\n          let cardRotation = 0;\n\n          // If it's not the human player, calculate the rotation to face center\n          if (!player.isHuman) {\n            // Position angle + 180° makes cards face inward\n            cardRotation = player.position.angle + 180;\n          }\n\n          // Create custom style based on calculated position\n          const playerStyle = {\n            position: 'absolute',\n            left: player.position.left,\n            top: player.position.top,\n            transform: `translate(-50%, -50%) rotate(${cardRotation}deg)`,\n            width: player.isHuman ? '350px' : '280px',\n            zIndex: player.isHuman ? 5 : 2\n          };\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-position ${player.isHuman ? 'human-player' : 'bot-player'}`,\n            style: playerStyle,\n            children: /*#__PURE__*/_jsxDEV(PlayerHand, {\n              player: player,\n              isCurrentTurn: player.id === currentPlayerIndex && phase === 'playing',\n              isHumanPlayer: player.isHuman,\n              gamePhase: phase,\n              showTotal: player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner',\n              isWinner: player.id === winningPlayerId,\n              gameId: gameState.gameId,\n              cardBackStyle: gameState.cardBackStyle || 'cardback'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 33\n            }, this)\n          }, `player-${player.id}-${gameState.gameId || Date.now()}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onDrawCard,\n          disabled: humanPlayer.status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onHold,\n          disabled: humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(GameLog, {\n          messages: gameLog || []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReset,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReturnHome,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n}\n_c4 = GameBoard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"DeckScene\");\n$RefreshReg$(_c2, \"CardDeck\");\n$RefreshReg$(_c3, \"DeckCard\");\n$RefreshReg$(_c4, \"GameBoard\");","map":{"version":3,"names":["React","PlayerHand","GameLog","Canvas","Suspense","THREE","jsxDEV","_jsxDEV","Fragment","_Fragment","DeckScene","cardCount","cardBackStyle","fallback","children","intensity","fileName","_jsxFileName","lineNumber","columnNumber","position","CardDeck","_c","deckCards","Array","from","length","Math","min","_","index","id","rotation","PI","random","scale","map","card","DeckCard","zIndex","_c2","renderOrder","args","color","roughness","metalness","emissive","emissiveIntensity","TextureLoader","load","side","DoubleSide","_c3","GameBoard","gameState","onDrawCard","onHold","onReset","onReturnHome","players","currentPlayerIndex","phase","winner","winningPlayerId","gameLog","deck","humanPlayerIndex","findIndex","player","isHuman","humanPlayer","positionPlayersInCircle","arrangedPlayers","totalPlayers","angleStep","i","playerAngle","orderAfterHuman","radius","xPos","sin","yPos","cos","left","top","angle","positionedPlayers","remainingCards","className","shadows","camera","fov","cardRotation","playerStyle","transform","width","style","isCurrentTurn","isHumanPlayer","gamePhase","showTotal","status","isWinner","gameId","Date","now","onClick","disabled","total","cards","messages","_c4","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js"],"sourcesContent":["import React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react';\nimport * as THREE from 'three';\n\n// DeckScene component to render the deck in the center of the table\nfunction DeckScene({ cardCount, cardBackStyle }) {\n    return (\n        <Suspense fallback={null}>\n            <ambientLight intensity={0.8} />\n            <pointLight position={[10, 10, 10]} intensity={1.5} />\n            <CardDeck cardCount={cardCount} cardBackStyle={cardBackStyle} />\n        </Suspense>\n    );\n}\n\n// CardDeck component to display a stack of cards\nfunction CardDeck({ cardCount = 52, cardBackStyle = 'cardback' }) {\n    // Create an array of cards for the deck\n    const deckCards = Array.from({ length: Math.min(cardCount, 20) }, (_, index) => ({\n        id: `deck-card-${index}`,\n        position: [0, -0.05 * index, 0], // Stack cards with slight offset\n        rotation: [Math.PI / 2, 0, Math.random() * 0.02 - 0.01], // Face up with slight random rotation\n        scale: [0.8, 0.8, 0.8]\n    }));\n\n    return (\n        <>\n            {deckCards.map((card, index) => (\n                <DeckCard \n                    key={card.id} \n                    position={card.position} \n                    rotation={card.rotation} \n                    scale={card.scale} \n                    cardBackStyle={cardBackStyle} \n                    zIndex={index}\n                />\n            ))}\n        </>\n    );\n}\n\n// Individual card in the deck\nfunction DeckCard({ position, rotation, scale, cardBackStyle, zIndex }) {\n    return (\n        <mesh position={position} rotation={rotation} scale={scale} renderOrder={zIndex}>\n            <boxGeometry args={[1, 1.4, 0.02]} />\n            <meshStandardMaterial \n                color=\"#ffffff\" \n                roughness={0.2} \n                metalness={0.1}\n                emissive=\"#000000\"\n                emissiveIntensity={0.1}\n            />\n            {/* Show card back on top face */}\n            <mesh position={[0, 0, 0.011]} rotation={[0, 0, 0]}>\n                <planeGeometry args={[1, 1.4]} />\n                <meshBasicMaterial \n                    map={new THREE.TextureLoader().load(`/assets/cards/backs/${cardBackStyle}.png`)}\n                    side={THREE.DoubleSide}\n                />\n            </mesh>\n            {/* Show card edge color on sides */}\n            <mesh position={[0, 0.7, 0]} rotation={[Math.PI / 2, 0, 0]}>\n                <planeGeometry args={[1, 0.02]} />\n                <meshBasicMaterial color=\"#f0f0f0\" />\n            </mesh>\n            <mesh position={[0, -0.7, 0]} rotation={[Math.PI / 2, 0, 0]}>\n                <planeGeometry args={[1, 0.02]} />\n                <meshBasicMaterial color=\"#f0f0f0\" />\n            </mesh>\n            <mesh position={[0.5, 0, 0]} rotation={[0, Math.PI / 2, 0]}>\n                <planeGeometry args={[1.4, 0.02]} />\n                <meshBasicMaterial color=\"#f0f0f0\" />\n            </mesh>\n            <mesh position={[-0.5, 0, 0]} rotation={[0, Math.PI / 2, 0]}>\n                <planeGeometry args={[1.4, 0.02]} />\n                <meshBasicMaterial color=\"#f0f0f0\" />\n            </mesh>\n        </mesh>\n    );\n}\n\nexport default function GameBoard({ gameState, onDrawCard, onHold, onReset, onReturnHome }) {\n    const { \n        players, \n        currentPlayerIndex, \n        phase, \n        winner: winningPlayerId, \n        gameLog,\n        deck\n    } = gameState;\n\n    // Find the human player\n    const humanPlayerIndex = players.findIndex(player => player.isHuman);\n    const humanPlayer = players[humanPlayerIndex];\n    \n    // Position players evenly around a circle\n    const positionPlayersInCircle = () => {\n        if (players.length <= 1) return players;\n        \n        const arrangedPlayers = [...players];\n        const totalPlayers = players.length;\n        const angleStep = 360 / totalPlayers;\n        \n        // Calculate position for each player based on their index\n        for (let i = 0; i < totalPlayers; i++) {\n            // Calculate player's angle from bottom center (human player is always at 0 degrees)\n            // Non-human players are placed at equal intervals going clockwise from human\n            let playerAngle;\n            \n            if (players[i].isHuman) {\n                playerAngle = 0; // Human player is always at bottom (0 degrees)\n            } else {\n                // Calculate bot placement: \n                // First, determine this bot's position relative to human player\n                const orderAfterHuman = (i > humanPlayerIndex) ? \n                    (i - humanPlayerIndex) : \n                    (totalPlayers - humanPlayerIndex + i);\n                \n                // Calculate angle based on position order (clockwise)\n                playerAngle = (orderAfterHuman * angleStep) % 360;\n            }\n            \n            // Convert angle to position coordinates around the table\n            // Table center is (50%, 50%) with radius depending on table size\n            // We use cos for x-axis (horizontal) and sin for y-axis (vertical)\n            // Note: In CSS, y-axis is inverted (top is 0), so we use -sin\n            \n            // For a circular table:\n            // - Radius is 40% of container width/height for proper spacing\n            // - Positions are calculated as percentage from center (50%, 50%)\n            const radius = 40; // Percentage of container\n            const xPos = 50 - radius * Math.sin((playerAngle * Math.PI) / 180);\n            const yPos = 50 - radius * Math.cos((playerAngle * Math.PI) / 180);\n            \n            // Store calculated position and angle\n            arrangedPlayers[i] = {\n                ...players[i],\n                position: {\n                    left: `${xPos}%`,\n                    top: `${yPos}%`,\n                    angle: playerAngle\n                }\n            };\n        }\n        \n        return arrangedPlayers;\n    };\n    \n    const positionedPlayers = positionPlayersInCircle();\n    \n    // Calculate remaining cards in the deck\n    const remainingCards = deck ? deck.length : 52;\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"game-table\">\n                {/* Center deck */}\n                <div className=\"deck-container\">\n                    <div className=\"deck-3d\">\n                        <Canvas shadows camera={{ fov: 45, position: [0, 2, 2] }}>\n                            <DeckScene \n                                cardCount={remainingCards} \n                                cardBackStyle={gameState.cardBackStyle || 'cardback'} \n                            />\n                        </Canvas>\n                    </div>\n                    {/* Optional: Add card count */}\n                    <div className=\"deck-count\">{remainingCards} cards</div>\n                </div>\n                \n                <div className=\"players-container\">\n                    {positionedPlayers.map((player) => {\n                        // Calculate rotation for player hand\n                        // Cards should be rotated to face the center of the table\n                        let cardRotation = 0;\n                        \n                        // If it's not the human player, calculate the rotation to face center\n                        if (!player.isHuman) {\n                            // Position angle + 180° makes cards face inward\n                            cardRotation = player.position.angle + 180;\n                        }\n                        \n                        // Create custom style based on calculated position\n                        const playerStyle = {\n                            position: 'absolute',\n                            left: player.position.left,\n                            top: player.position.top,\n                            transform: `translate(-50%, -50%) rotate(${cardRotation}deg)`,\n                            width: player.isHuman ? '350px' : '280px',\n                            zIndex: player.isHuman ? 5 : 2\n                        };\n                        \n                        return (\n                            <div \n                                key={`player-${player.id}-${gameState.gameId || Date.now()}`}\n                                className={`player-position ${player.isHuman ? 'human-player' : 'bot-player'}`}\n                                style={playerStyle}\n                            >\n                                <PlayerHand \n                                    player={player}\n                                    isCurrentTurn={player.id === currentPlayerIndex && phase === 'playing'}\n                                    isHumanPlayer={player.isHuman}\n                                    gamePhase={phase}\n                                    showTotal={player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner'}\n                                    isWinner={player.id === winningPlayerId}\n                                    gameId={gameState.gameId}\n                                    cardBackStyle={gameState.cardBackStyle || 'cardback'}\n                                />\n                            </div>\n                        );\n                    })}\n                </div>\n                \n                {humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && (\n                    <div className=\"player-controls\">\n                        <button \n                            className=\"action-button\" \n                            onClick={onDrawCard}\n                            disabled={humanPlayer.status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        <button \n                            className=\"action-button\" \n                            onClick={onHold}\n                            disabled={humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2}\n                        >\n                            Hold\n                        </button>\n                    </div>\n                )}\n                \n                <div className=\"game-info\">\n                    <GameLog messages={gameLog || []} />\n                    \n                    {phase === 'gameOver' && (\n                        <div className=\"game-over-controls\">\n                            <button className=\"action-button\" onClick={onReset}>Play Again</button>\n                            <button className=\"action-button\" onClick={onReturnHome}>Main Menu</button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}