{"ast":null,"code":"import { cardUtils } from '../../services/cardUtils';\n\n/**\n * Set up a new game with the specified number of players\n * @param {number} numPlayers - Number of players (including human)\n * @param {string} cardBackStyle - Style of card backs to use\n * @return {Object} Initial game state\n */\nexport function setupInitialGame(numPlayers, cardBackStyle = 'cardback') {\n  let deck = cardUtils.shuffle(cardUtils.generateDeck());\n  const players = [];\n  const initialLog = ['Game started!'];\n  for (let i = 0; i < numPlayers; i++) {\n    const playerName = i === 0 ? 'You' : `Bot ${i}`;\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(deck, 1);\n    const drawnCard = drawn[0];\n    deck = remaining;\n    const player = {\n      id: i,\n      name: playerName,\n      isHuman: i === 0,\n      cards: [...drawn],\n      hiddenCards: i === 0 ? [] : [...drawn],\n      // Initial card is hidden for bots\n      visibleCards: i === 0 ? [...drawn] : [],\n      // Initial card is visible for human\n      total: cardUtils.calculateTotal(drawn),\n      status: 'active' // active, holding, eliminated, winner\n    };\n    players.push(player);\n    if (i === 0) {\n      initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n    } else {\n      initialLog.push(`${playerName} drew a card.`);\n    }\n  }\n  initialLog.push(\"Your turn.\");\n  return {\n    phase: 'playing',\n    players,\n    deck,\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: initialLog,\n    gameId: Date.now(),\n    cardBackStyle\n  };\n}\n\n/**\n * Handle a player drawing a card from the deck\n * @param {Object} gameState - Current game state\n * @param {Object} player - Player drawing a card\n * @param {number} playerIndex - Index of player in gameState.players array\n * @return {Object} Updated game state\n */\nexport function handleDrawCard(gameState, player, playerIndex) {\n  const updatedPlayers = [...gameState.players];\n  const {\n    drawn,\n    remaining\n  } = cardUtils.drawCards(gameState.deck, 1);\n  const drawnCard = drawn[0];\n  const newTotal = player.total + cardUtils.getCardValue(drawnCard);\n\n  // Update log messages\n  const updatedLog = [...gameState.gameLog];\n  if (player.isHuman) {\n    updatedLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${newTotal}`);\n  } else {\n    updatedLog.push(`${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${newTotal}`);\n  }\n\n  // Determine if player is eliminated (bust)\n  const isEliminated = newTotal > 17;\n\n  // Update player's cards and status\n  updatedPlayers[playerIndex] = {\n    ...player,\n    cards: [...player.cards, drawnCard],\n    visibleCards: [...player.visibleCards, drawnCard],\n    // Always add to visible cards\n    total: newTotal,\n    status: isEliminated ? 'eliminated' : 'active'\n  };\n  if (isEliminated) {\n    updatedLog.push(`${player.isHuman ? 'You' : player.name} went over 17 and is eliminated!`);\n  }\n\n  // Move to next player if current player is eliminated or if it's not the human player\n  let nextPlayerIndex = playerIndex;\n  if (isEliminated || !player.isHuman) {\n    nextPlayerIndex = findNextActivePlayerIndex(updatedPlayers, playerIndex);\n    if (nextPlayerIndex === playerIndex) {\n      // No active players left, game over\n      return {\n        ...gameState,\n        phase: 'revealing',\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...updatedLog, \"All players have acted. Revealing results...\"]\n      };\n    } else {\n      updatedLog.push(`${updatedPlayers[nextPlayerIndex].isHuman ? 'Your' : updatedPlayers[nextPlayerIndex].name + \"'s\"} turn.`);\n    }\n  }\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    deck: remaining,\n    currentPlayerIndex: nextPlayerIndex,\n    gameLog: updatedLog\n  };\n}\n\n/**\n * Handle a player holding their current total\n * @param {Object} gameState - Current game state\n * @param {Object} player - Player holding\n * @param {number} playerIndex - Index of player in gameState.players array\n * @return {Object} Updated game state\n */\nexport function handleHold(gameState, player, playerIndex) {\n  if (player.total < 11) {\n    return gameState; // Can't hold below 11\n  }\n  const updatedPlayers = [...gameState.players];\n  const updatedLog = [...gameState.gameLog];\n\n  // Update player status to holding\n  updatedPlayers[playerIndex] = {\n    ...player,\n    status: 'holding'\n  };\n  updatedLog.push(`${player.isHuman ? 'You' : player.name} holds at ${player.total}.`);\n\n  // Move to next player\n  const nextPlayerIndex = findNextActivePlayerIndex(updatedPlayers, playerIndex);\n  if (nextPlayerIndex === playerIndex) {\n    // No active players left, move to revealing phase\n    return {\n      ...gameState,\n      phase: 'revealing',\n      players: updatedPlayers,\n      gameLog: [...updatedLog, \"All players have acted. Revealing results...\"]\n    };\n  }\n  updatedLog.push(`${updatedPlayers[nextPlayerIndex].isHuman ? 'Your' : updatedPlayers[nextPlayerIndex].name + \"'s\"} turn.`);\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    currentPlayerIndex: nextPlayerIndex,\n    gameLog: updatedLog\n  };\n}\n\n/**\n * Find the index of the next active player\n * @param {Array} players - List of players\n * @param {number} currentIndex - Current player index\n * @return {number} Index of next active player, or current index if none found\n */\nfunction findNextActivePlayerIndex(players, currentIndex) {\n  for (let i = 1; i <= players.length; i++) {\n    const nextIndex = (currentIndex + i) % players.length;\n    if (players[nextIndex].status === 'active') {\n      return nextIndex;\n    }\n  }\n  return currentIndex; // No active players found, return current\n}\n\n/**\n * Check if the game has ended and determine winner\n * @param {Object} gameState - Current game state\n * @return {Object} Updated game state with winner determined\n */\nexport function checkGameEnd(gameState) {\n  // Don't check if game is still in playing phase and there are active players\n  if (gameState.phase === 'playing' && gameState.players.some(p => p.status === 'active')) {\n    return gameState;\n  }\n\n  // If we're in revealing phase, move to game over\n  if (gameState.phase === 'revealing') {\n    const updatedPlayers = [...gameState.players];\n    const updatedLog = [...gameState.gameLog];\n\n    // Reveal all hidden cards\n    for (let i = 0; i < updatedPlayers.length; i++) {\n      if (!updatedPlayers[i].isHuman) {\n        updatedLog.push(`${updatedPlayers[i].name} reveals a total of ${updatedPlayers[i].total}.`);\n      }\n    }\n\n    // Find the winner\n    let winner = -1;\n    let highestValidTotal = 0;\n\n    // Check for anyone with exactly 17 (automatic win)\n    const perfectScores = updatedPlayers.filter(p => p.total === 17);\n    if (perfectScores.length > 0) {\n      winner = perfectScores[0].id;\n      updatedLog.push(`${perfectScores[0].isHuman ? 'You' : perfectScores[0].name} wins with a perfect score of 17!`);\n\n      // Update winner status\n      updatedPlayers[winner] = {\n        ...updatedPlayers[winner],\n        status: 'winner'\n      };\n      return {\n        ...gameState,\n        phase: 'gameOver',\n        players: updatedPlayers,\n        winner,\n        gameLog: updatedLog\n      };\n    }\n\n    // Otherwise find highest score not exceeding 17\n    for (let i = 0; i < updatedPlayers.length; i++) {\n      const player = updatedPlayers[i];\n      if (player.total <= 17 && player.total > highestValidTotal) {\n        highestValidTotal = player.total;\n        winner = player.id;\n      }\n    }\n    if (winner !== -1) {\n      updatedLog.push(`${updatedPlayers[winner].isHuman ? 'You' : updatedPlayers[winner].name} wins with a score of ${highestValidTotal}!`);\n\n      // Update winner status\n      updatedPlayers[winner] = {\n        ...updatedPlayers[winner],\n        status: 'winner'\n      };\n    } else {\n      updatedLog.push('No winner! All players went over 17.');\n    }\n    return {\n      ...gameState,\n      phase: 'gameOver',\n      players: updatedPlayers,\n      winner,\n      gameLog: updatedLog\n    };\n  }\n  return gameState;\n}","map":{"version":3,"names":["cardUtils","setupInitialGame","numPlayers","cardBackStyle","deck","shuffle","generateDeck","players","initialLog","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","push","getCardName","phase","currentPlayerIndex","winner","gameLog","gameId","Date","now","handleDrawCard","gameState","playerIndex","updatedPlayers","newTotal","getCardValue","updatedLog","isEliminated","nextPlayerIndex","findNextActivePlayerIndex","handleHold","currentIndex","length","nextIndex","checkGameEnd","some","p","highestValidTotal","perfectScores","filter"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/gameLogic.js"],"sourcesContent":["import { cardUtils } from '../../services/cardUtils';\n\n/**\n * Set up a new game with the specified number of players\n * @param {number} numPlayers - Number of players (including human)\n * @param {string} cardBackStyle - Style of card backs to use\n * @return {Object} Initial game state\n */\nexport function setupInitialGame(numPlayers, cardBackStyle = 'cardback') {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    for (let i = 0; i < numPlayers; i++) {\n        const playerName = i === 0 ? 'You' : `Bot ${i}`;\n        const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n        const drawnCard = drawn[0];\n        deck = remaining;\n\n        const player = {\n            id: i,\n            name: playerName,\n            isHuman: i === 0,\n            cards: [...drawn],\n            hiddenCards: i === 0 ? [] : [...drawn], // Initial card is hidden for bots\n            visibleCards: i === 0 ? [...drawn] : [], // Initial card is visible for human\n            total: cardUtils.calculateTotal(drawn),\n            status: 'active' // active, holding, eliminated, winner\n        };\n\n        players.push(player);\n\n        if (i === 0) {\n            initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n        } else {\n            initialLog.push(`${playerName} drew a card.`);\n        }\n    }\n\n    initialLog.push(\"Your turn.\");\n\n    return {\n        phase: 'playing',\n        players,\n        deck,\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: initialLog,\n        gameId: Date.now(),\n        cardBackStyle\n    };\n}\n\n/**\n * Handle a player drawing a card from the deck\n * @param {Object} gameState - Current game state\n * @param {Object} player - Player drawing a card\n * @param {number} playerIndex - Index of player in gameState.players array\n * @return {Object} Updated game state\n */\nexport function handleDrawCard(gameState, player, playerIndex) {\n    const updatedPlayers = [...gameState.players];\n    const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n    const newTotal = player.total + cardUtils.getCardValue(drawnCard);\n    \n    // Update log messages\n    const updatedLog = [...gameState.gameLog];\n    if (player.isHuman) {\n        updatedLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${newTotal}`);\n    } else {\n        updatedLog.push(`${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${newTotal}`);\n    }\n    \n    // Determine if player is eliminated (bust)\n    const isEliminated = newTotal > 17;\n    \n    // Update player's cards and status\n    updatedPlayers[playerIndex] = {\n        ...player,\n        cards: [...player.cards, drawnCard],\n        visibleCards: [...player.visibleCards, drawnCard], // Always add to visible cards\n        total: newTotal,\n        status: isEliminated ? 'eliminated' : 'active'\n    };\n    \n    if (isEliminated) {\n        updatedLog.push(`${player.isHuman ? 'You' : player.name} went over 17 and is eliminated!`);\n    }\n    \n    // Move to next player if current player is eliminated or if it's not the human player\n    let nextPlayerIndex = playerIndex;\n    if (isEliminated || !player.isHuman) {\n        nextPlayerIndex = findNextActivePlayerIndex(updatedPlayers, playerIndex);\n        \n        if (nextPlayerIndex === playerIndex) {\n            // No active players left, game over\n            return {\n                ...gameState,\n                phase: 'revealing',\n                players: updatedPlayers,\n                deck: remaining,\n                gameLog: [...updatedLog, \"All players have acted. Revealing results...\"]\n            };\n        } else {\n            updatedLog.push(`${updatedPlayers[nextPlayerIndex].isHuman ? 'Your' : updatedPlayers[nextPlayerIndex].name + \"'s\"} turn.`);\n        }\n    }\n    \n    return {\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: updatedLog\n    };\n}\n\n/**\n * Handle a player holding their current total\n * @param {Object} gameState - Current game state\n * @param {Object} player - Player holding\n * @param {number} playerIndex - Index of player in gameState.players array\n * @return {Object} Updated game state\n */\nexport function handleHold(gameState, player, playerIndex) {\n    if (player.total < 11) {\n        return gameState; // Can't hold below 11\n    }\n    \n    const updatedPlayers = [...gameState.players];\n    const updatedLog = [...gameState.gameLog];\n    \n    // Update player status to holding\n    updatedPlayers[playerIndex] = {\n        ...player,\n        status: 'holding'\n    };\n    \n    updatedLog.push(`${player.isHuman ? 'You' : player.name} holds at ${player.total}.`);\n    \n    // Move to next player\n    const nextPlayerIndex = findNextActivePlayerIndex(updatedPlayers, playerIndex);\n    \n    if (nextPlayerIndex === playerIndex) {\n        // No active players left, move to revealing phase\n        return {\n            ...gameState,\n            phase: 'revealing',\n            players: updatedPlayers,\n            gameLog: [...updatedLog, \"All players have acted. Revealing results...\"]\n        };\n    }\n    \n    updatedLog.push(`${updatedPlayers[nextPlayerIndex].isHuman ? 'Your' : updatedPlayers[nextPlayerIndex].name + \"'s\"} turn.`);\n    \n    return {\n        ...gameState,\n        players: updatedPlayers,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: updatedLog\n    };\n}\n\n/**\n * Find the index of the next active player\n * @param {Array} players - List of players\n * @param {number} currentIndex - Current player index\n * @return {number} Index of next active player, or current index if none found\n */\nfunction findNextActivePlayerIndex(players, currentIndex) {\n    for (let i = 1; i <= players.length; i++) {\n        const nextIndex = (currentIndex + i) % players.length;\n        if (players[nextIndex].status === 'active') {\n            return nextIndex;\n        }\n    }\n    return currentIndex; // No active players found, return current\n}\n\n/**\n * Check if the game has ended and determine winner\n * @param {Object} gameState - Current game state\n * @return {Object} Updated game state with winner determined\n */\nexport function checkGameEnd(gameState) {\n    // Don't check if game is still in playing phase and there are active players\n    if (gameState.phase === 'playing' && gameState.players.some(p => p.status === 'active')) {\n        return gameState;\n    }\n    \n    // If we're in revealing phase, move to game over\n    if (gameState.phase === 'revealing') {\n        const updatedPlayers = [...gameState.players];\n        const updatedLog = [...gameState.gameLog];\n        \n        // Reveal all hidden cards\n        for (let i = 0; i < updatedPlayers.length; i++) {\n            if (!updatedPlayers[i].isHuman) {\n                updatedLog.push(`${updatedPlayers[i].name} reveals a total of ${updatedPlayers[i].total}.`);\n            }\n        }\n        \n        // Find the winner\n        let winner = -1;\n        let highestValidTotal = 0;\n        \n        // Check for anyone with exactly 17 (automatic win)\n        const perfectScores = updatedPlayers.filter(p => p.total === 17);\n        if (perfectScores.length > 0) {\n            winner = perfectScores[0].id;\n            updatedLog.push(`${perfectScores[0].isHuman ? 'You' : perfectScores[0].name} wins with a perfect score of 17!`);\n            \n            // Update winner status\n            updatedPlayers[winner] = {\n                ...updatedPlayers[winner],\n                status: 'winner'\n            };\n            \n            return {\n                ...gameState,\n                phase: 'gameOver',\n                players: updatedPlayers,\n                winner,\n                gameLog: updatedLog\n            };\n        }\n        \n        // Otherwise find highest score not exceeding 17\n        for (let i = 0; i < updatedPlayers.length; i++) {\n            const player = updatedPlayers[i];\n            if (player.total <= 17 && player.total > highestValidTotal) {\n                highestValidTotal = player.total;\n                winner = player.id;\n            }\n        }\n        \n        if (winner !== -1) {\n            updatedLog.push(`${updatedPlayers[winner].isHuman ? 'You' : updatedPlayers[winner].name} wins with a score of ${highestValidTotal}!`);\n            \n            // Update winner status\n            updatedPlayers[winner] = {\n                ...updatedPlayers[winner],\n                status: 'winner'\n            };\n        } else {\n            updatedLog.push('No winner! All players went over 17.');\n        }\n        \n        return {\n            ...gameState,\n            phase: 'gameOver',\n            players: updatedPlayers,\n            winner,\n            gameLog: updatedLog\n        };\n    }\n    \n    return gameState;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}