{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js\";\nimport React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport '../styles/games.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameBoard({\n  gameState,\n  onDrawCard,\n  onHold,\n  onReset,\n  onReturnHome\n}) {\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    winner: winningPlayerId,\n    gameLog\n  } = gameState;\n\n  // Find the human player\n  const humanPlayerIndex = players.findIndex(player => player.isHuman);\n  const humanPlayer = players[humanPlayerIndex];\n\n  // Rearrange other players to be in positions around the table\n  // We'll put human at bottom, and distribute others above\n  const arrangePlayersForDisplay = () => {\n    if (players.length <= 1) return players;\n    const arranged = [];\n\n    // Add human player last (will be rendered at the bottom)\n    for (let i = 0; i < players.length; i++) {\n      if (i !== humanPlayerIndex) {\n        arranged.push({\n          ...players[i],\n          position: getPositionForPlayer(i, players.length)\n        });\n      }\n    }\n\n    // Add human player last\n    if (humanPlayer) {\n      arranged.push({\n        ...humanPlayer,\n        position: 'bottom' // Human player at bottom\n      });\n    }\n    return arranged;\n  };\n\n  // Calculate position for non-human players (top, left, right)\n  const getPositionForPlayer = (playerIndex, totalPlayers) => {\n    if (totalPlayers <= 2) return 'top';\n\n    // With 3 players: one at top, one at left\n    if (totalPlayers === 3) {\n      const positions = ['top', 'left'];\n      // Find position in the array excluding the human player index\n      const posIndex = playerIndex > humanPlayerIndex ? playerIndex - 1 : playerIndex;\n      return positions[posIndex % positions.length];\n    }\n\n    // With 4+ players: distribute across top, left, right\n    const positions = ['top-left', 'top', 'top-right', 'left', 'right'];\n    // Find position in the array excluding the human player index\n    const posIndex = playerIndex > humanPlayerIndex ? playerIndex - 1 : playerIndex;\n    return positions[posIndex % positions.length];\n  };\n  const arrangedPlayers = arrangePlayersForDisplay();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: arrangedPlayers.map(player => /*#__PURE__*/_jsxDEV(PlayerHand, {\n          player: player,\n          isCurrentTurn: player.id === currentPlayerIndex && phase === 'playing',\n          isHumanPlayer: player.isHuman,\n          gamePhase: phase,\n          showTotal: player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner',\n          isWinner: player.id === winningPlayerId,\n          gameId: gameState.gameId,\n          position: player.position // Pass position for styling\n        }, `player-${player.id}-${gameState.gameId || Date.now()}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onDrawCard,\n          disabled: humanPlayer.status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onHold,\n          disabled: humanPlayer.status !== 'active' || humanPlayer.total < 11,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(GameLog, {\n          messages: gameLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReset,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReturnHome,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","PlayerHand","GameLog","jsxDEV","_jsxDEV","GameBoard","gameState","onDrawCard","onHold","onReset","onReturnHome","players","currentPlayerIndex","phase","winner","winningPlayerId","gameLog","humanPlayerIndex","findIndex","player","isHuman","humanPlayer","arrangePlayersForDisplay","length","arranged","i","push","position","getPositionForPlayer","playerIndex","totalPlayers","positions","posIndex","arrangedPlayers","className","children","map","isCurrentTurn","id","isHumanPlayer","gamePhase","showTotal","status","isWinner","gameId","Date","now","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","total","messages","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js"],"sourcesContent":["import React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport '../styles/games.css';\n\nexport default function GameBoard({ gameState, onDrawCard, onHold, onReset, onReturnHome }) {\n    const { \n        players, \n        currentPlayerIndex, \n        phase, \n        winner: winningPlayerId, \n        gameLog \n    } = gameState;\n\n    // Find the human player\n    const humanPlayerIndex = players.findIndex(player => player.isHuman);\n    const humanPlayer = players[humanPlayerIndex];\n    \n    // Rearrange other players to be in positions around the table\n    // We'll put human at bottom, and distribute others above\n    const arrangePlayersForDisplay = () => {\n        if (players.length <= 1) return players;\n        \n        const arranged = [];\n        \n        // Add human player last (will be rendered at the bottom)\n        for (let i = 0; i < players.length; i++) {\n            if (i !== humanPlayerIndex) {\n                arranged.push({\n                    ...players[i],\n                    position: getPositionForPlayer(i, players.length)\n                });\n            }\n        }\n        \n        // Add human player last\n        if (humanPlayer) {\n            arranged.push({\n                ...humanPlayer,\n                position: 'bottom' // Human player at bottom\n            });\n        }\n        \n        return arranged;\n    };\n    \n    // Calculate position for non-human players (top, left, right)\n    const getPositionForPlayer = (playerIndex, totalPlayers) => {\n        if (totalPlayers <= 2) return 'top';\n        \n        // With 3 players: one at top, one at left\n        if (totalPlayers === 3) {\n            const positions = ['top', 'left'];\n            // Find position in the array excluding the human player index\n            const posIndex = playerIndex > humanPlayerIndex ? playerIndex - 1 : playerIndex;\n            return positions[posIndex % positions.length];\n        }\n        \n        // With 4+ players: distribute across top, left, right\n        const positions = ['top-left', 'top', 'top-right', 'left', 'right'];\n        // Find position in the array excluding the human player index\n        const posIndex = playerIndex > humanPlayerIndex ? playerIndex - 1 : playerIndex;\n        return positions[posIndex % positions.length];\n    };\n\n    const arrangedPlayers = arrangePlayersForDisplay();\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"game-table\">\n                <div className=\"players-container\">\n                    {arrangedPlayers.map((player) => (\n                        <PlayerHand\n                            key={`player-${player.id}-${gameState.gameId || Date.now()}`}\n                            player={player}\n                            isCurrentTurn={player.id === currentPlayerIndex && phase === 'playing'}\n                            isHumanPlayer={player.isHuman}\n                            gamePhase={phase}\n                            showTotal={player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner'}\n                            isWinner={player.id === winningPlayerId}\n                            gameId={gameState.gameId}\n                            position={player.position} // Pass position for styling\n                        />\n                    ))}\n                </div>\n                \n                {humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && (\n                    <div className=\"player-controls\">\n                        <button \n                            className=\"action-button\" \n                            onClick={onDrawCard}\n                            disabled={humanPlayer.status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        <button \n                            className=\"action-button\" \n                            onClick={onHold}\n                            disabled={humanPlayer.status !== 'active' || humanPlayer.total < 11}\n                        >\n                            Hold\n                        </button>\n                    </div>\n                )}\n                \n                <div className=\"game-info\">\n                    <GameLog messages={gameLog} />\n                    \n                    {phase === 'gameOver' && (\n                        <div className=\"game-over-controls\">\n                            <button className=\"action-button\" onClick={onReset}>Play Again</button>\n                            <button className=\"action-button\" onClick={onReturnHome}>Main Menu</button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}