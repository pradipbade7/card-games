{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { cardUtils } from '../../services/cardUtils'; // Update path\nimport { handleDrawCard, handleHold } from './gameLogic';\nexport default function useBotAI(gameState, setGameState) {\n  _s();\n  // Game of 17 specific bot decision-making logic\n  const shouldBotDraw = (botCards, otherPlayers) => {\n    const botTotal = cardUtils.calculateTotal(botCards);\n\n    // Base probabilities - never draw if at or over 17\n    if (botTotal >= 17) return false;\n\n    // Must draw if under 11 (game rule)\n    if (botTotal < 11) return true;\n\n    // Default probability based on bot's current total\n    let drawProbability;\n    switch (botTotal) {\n      case 11:\n        drawProbability = 0.9;\n        break;\n      // Almost always draw at 11\n      case 12:\n        drawProbability = 0.85;\n        break;\n      // Very likely to draw at 12\n      case 13:\n        drawProbability = 0.75;\n        break;\n      // Good chance to draw at 13\n      case 14:\n        drawProbability = 0.5;\n        break;\n      // 50/50 at 14\n      case 15:\n        drawProbability = 0.3;\n        break;\n      // Less likely at 15\n      case 16:\n        drawProbability = 0.15;\n        break;\n      // Rarely draw at 16\n      default:\n        drawProbability = 0;\n      // Don't draw if 17+\n    }\n\n    // Count number of players still in the game\n    const activePlayers = otherPlayers.filter(p => p.status !== 'eliminated').length;\n\n    // Adjust strategy based on number of opponents\n    if (activePlayers <= 1) {\n      // More conservative with fewer opponents\n      drawProbability *= 0.8;\n    }\n\n    // Check if any holding players are likely ahead\n    const holdingPlayersAhead = otherPlayers.some(playerData => {\n      if (playerData.status !== 'holding') return false;\n\n      // Calculate visible total excluding first card\n      const visibleTotal = cardUtils.calculateTotal(playerData.visibleCards.slice(1));\n\n      // Consider a player ahead if their visible cards suggest they're close to 17\n      // (remember we can't see their hidden card)\n      return visibleTotal >= botTotal - 3 && visibleTotal <= 16;\n    });\n\n    // Check if any players are definitely ahead (having won or having 17)\n    const playersDefinitelyAhead = otherPlayers.some(playerData => playerData.status === 'winner' || playerData.status === 'holding' && cardUtils.calculateTotal(playerData.visibleCards) === 17);\n\n    // If someone definitely has 17, take risks to match\n    if (playersDefinitelyAhead) {\n      drawProbability = 0.95; // Almost certainly draw\n    }\n    // If someone is likely ahead, increase draw probability\n    else if (holdingPlayersAhead) {\n      drawProbability += 0.15; // Increase willingness to draw\n    }\n\n    // Consider card count - more willing to take risks with 2-3 cards\n    // than with 5+ cards (chance of busting increases with more cards)\n    if (botCards.length >= 5) {\n      drawProbability *= 0.7; // Less likely to draw with many cards\n    } else if (botCards.length <= 3) {\n      drawProbability *= 1.2; // More likely to draw with few cards\n    }\n\n    // Ensure probability is within bounds\n    drawProbability = Math.max(0, Math.min(1, drawProbability));\n    return Math.random() < drawProbability;\n  };\n  const processBotTurn = useCallback(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n\n    // Get data from all other players\n    const otherPlayersData = gameState.players.filter((player, index) => index !== gameState.currentPlayerIndex);\n\n    // Bot decision based on visible information\n    let updatedGameState;\n    if (shouldBotDraw(currentPlayer.cards, otherPlayersData)) {\n      updatedGameState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n    } else {\n      updatedGameState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n    }\n    setGameState(updatedGameState);\n  }, [gameState, setGameState]);\n  return {\n    processBotTurn\n  };\n}\n_s(useBotAI, \"ph+a3mvihLl3fb35JehTA4aTodg=\");","map":{"version":3,"names":["useCallback","cardUtils","handleDrawCard","handleHold","useBotAI","gameState","setGameState","_s","shouldBotDraw","botCards","otherPlayers","botTotal","calculateTotal","drawProbability","activePlayers","filter","p","status","length","holdingPlayersAhead","some","playerData","visibleTotal","visibleCards","slice","playersDefinitelyAhead","Math","max","min","random","processBotTurn","currentPlayer","players","currentPlayerIndex","otherPlayersData","player","index","updatedGameState","cards"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/useBotAI.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { cardUtils } from '../../services/cardUtils'; // Update path\nimport { handleDrawCard, handleHold } from './gameLogic';\nexport default function useBotAI(gameState, setGameState) {\n    // Game of 17 specific bot decision-making logic\n    const shouldBotDraw = (botCards, otherPlayers) => {\n        const botTotal = cardUtils.calculateTotal(botCards);\n        \n        // Base probabilities - never draw if at or over 17\n        if (botTotal >= 17) return false;\n        \n        // Must draw if under 11 (game rule)\n        if (botTotal < 11) return true;\n        \n        // Default probability based on bot's current total\n        let drawProbability;\n        switch (botTotal) {\n            case 11: drawProbability = 0.9; break;  // Almost always draw at 11\n            case 12: drawProbability = 0.85; break; // Very likely to draw at 12\n            case 13: drawProbability = 0.75; break; // Good chance to draw at 13\n            case 14: drawProbability = 0.5; break;  // 50/50 at 14\n            case 15: drawProbability = 0.3; break;  // Less likely at 15\n            case 16: drawProbability = 0.15; break; // Rarely draw at 16\n            default: drawProbability = 0;           // Don't draw if 17+\n        }\n        \n        // Count number of players still in the game\n        const activePlayers = otherPlayers.filter(p => \n            p.status !== 'eliminated').length;\n        \n        // Adjust strategy based on number of opponents\n        if (activePlayers <= 1) {\n            // More conservative with fewer opponents\n            drawProbability *= 0.8;\n        }\n        \n        // Check if any holding players are likely ahead\n        const holdingPlayersAhead = otherPlayers.some(playerData => {\n            if (playerData.status !== 'holding') return false;\n            \n            // Calculate visible total excluding first card\n            const visibleTotal = cardUtils.calculateTotal(playerData.visibleCards.slice(1));\n            \n            // Consider a player ahead if their visible cards suggest they're close to 17\n            // (remember we can't see their hidden card)\n            return visibleTotal >= (botTotal - 3) && visibleTotal <= 16;\n        });\n        \n        // Check if any players are definitely ahead (having won or having 17)\n        const playersDefinitelyAhead = otherPlayers.some(playerData => \n            playerData.status === 'winner' || \n            (playerData.status === 'holding' && \n             cardUtils.calculateTotal(playerData.visibleCards) === 17)\n        );\n        \n        // If someone definitely has 17, take risks to match\n        if (playersDefinitelyAhead) {\n            drawProbability = 0.95; // Almost certainly draw\n        }\n        // If someone is likely ahead, increase draw probability\n        else if (holdingPlayersAhead) {\n            drawProbability += 0.15; // Increase willingness to draw\n        }\n        \n        // Consider card count - more willing to take risks with 2-3 cards\n        // than with 5+ cards (chance of busting increases with more cards)\n        if (botCards.length >= 5) {\n            drawProbability *= 0.7; // Less likely to draw with many cards\n        } else if (botCards.length <= 3) {\n            drawProbability *= 1.2; // More likely to draw with few cards\n        }\n        \n        // Ensure probability is within bounds\n        drawProbability = Math.max(0, Math.min(1, drawProbability));\n        \n        return Math.random() < drawProbability;\n    };\n\n    const processBotTurn = useCallback(() => {\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        \n        // Get data from all other players\n        const otherPlayersData = gameState.players\n            .filter((player, index) => index !== gameState.currentPlayerIndex);\n            \n        // Bot decision based on visible information\n        let updatedGameState;\n        \n        if (shouldBotDraw(currentPlayer.cards, otherPlayersData)) {\n            updatedGameState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n        } else {\n            updatedGameState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n        }\n        \n        setGameState(updatedGameState);\n    }, [gameState, setGameState]);\n\n    return { processBotTurn };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}