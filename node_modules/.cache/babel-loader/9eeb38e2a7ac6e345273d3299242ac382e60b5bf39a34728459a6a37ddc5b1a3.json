{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js\",\n  _s = $RefreshSig$();\n// Create a new component for the shared 3D scene\nimport React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Card mesh component to be used within the shared canvas\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CardMesh({\n  suit,\n  value,\n  flipped,\n  position,\n  rotation,\n  scale\n}) {\n  _s();\n  const frontTexture = React.useMemo(() => {\n    const texture = new THREE.TextureLoader().load(`/assets/cards/faces/${suit}/${value}.png`);\n    texture.minFilter = THREE.LinearFilter; // Optimize texture filtering\n    return texture;\n  }, [suit, value]);\n  const backTexture = React.useMemo(() => {\n    const texture = new THREE.TextureLoader().load('/assets/cards/backs/cardback.png');\n    texture.minFilter = THREE.LinearFilter; // Optimize texture filtering\n    return texture;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    rotation: rotation,\n    scale: scale,\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [1, 1.4]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: flipped ? backTexture : frontTexture,\n      side: THREE.DoubleSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n// The shared canvas for all cards\n_s(CardMesh, \"HbHW+Se/LJ3spK+8i4cAy/qOQrE=\");\n_c = CardMesh;\nexport default function CardScene({\n  cards\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [0, 0, 15],\n      fov: 40\n    },\n    gl: {\n      preserveDrawingBuffer: true,\n      antialias: true\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 1.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), cards.map(card => /*#__PURE__*/_jsxDEV(CardMesh, {\n      suit: card.suit,\n      value: card.value,\n      flipped: card.flipped,\n      position: card.position,\n      rotation: card.rotation,\n      scale: card.scale\n    }, `card-${card.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c2 = CardScene;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardMesh\");\n$RefreshReg$(_c2, \"CardScene\");","map":{"version":3,"names":["React","Canvas","THREE","jsxDEV","_jsxDEV","CardMesh","suit","value","flipped","position","rotation","scale","_s","frontTexture","useMemo","texture","TextureLoader","load","minFilter","LinearFilter","backTexture","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","DoubleSide","_c","CardScene","cards","camera","fov","gl","preserveDrawingBuffer","antialias","intensity","card","id","_c2","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js"],"sourcesContent":["// Create a new component for the shared 3D scene\nimport React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Card mesh component to be used within the shared canvas\nexport function CardMesh({ suit, value, flipped, position, rotation, scale }) {\n  const frontTexture = React.useMemo(() => {\n    const texture = new THREE.TextureLoader().load(`/assets/cards/faces/${suit}/${value}.png`);\n    texture.minFilter = THREE.LinearFilter; // Optimize texture filtering\n    return texture;\n  }, [suit, value]);\n  \n  const backTexture = React.useMemo(() => {\n    const texture = new THREE.TextureLoader().load('/assets/cards/backs/cardback.png');\n    texture.minFilter = THREE.LinearFilter; // Optimize texture filtering\n    return texture;\n  }, []);\n  \n  return (\n    <mesh position={position} rotation={rotation} scale={scale}>\n      <planeGeometry args={[1, 1.4]} />\n      <meshBasicMaterial \n        map={flipped ? backTexture : frontTexture} \n        side={THREE.DoubleSide}\n      />\n    </mesh>\n  );\n}\n\n// The shared canvas for all cards\nexport default function CardScene({ cards }) {\n  return (\n    <Canvas\n      camera={{ position: [0, 0, 15], fov: 40 }}\n      gl={{ preserveDrawingBuffer: true, antialias: true }}\n    >\n      <ambientLight intensity={1.0} />\n      <pointLight position={[10, 10, 10]} />\n      \n      {cards.map((card) => (\n        <CardMesh\n          key={`card-${card.id}`}\n          suit={card.suit}\n          value={card.value}\n          flipped={card.flipped}\n          position={card.position}\n          rotation={card.rotation}\n          scale={card.scale}\n        />\n      ))}\n    </Canvas>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}