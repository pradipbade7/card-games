{"ast":null,"code":"import { cardUtils } from '../../services/cardUtils'; // Update path\n\n// Initialize game with specified number of players\nexport function setupInitialGame(numPlayers, cardBackStyle = 'cardback') {\n  let deck = cardUtils.shuffle(cardUtils.generateDeck());\n  const players = [];\n  const initialLog = ['Game started!'];\n\n  // Randomly determine the first player (0 to numPlayers-1)\n  const firstPlayerIndex = Math.floor(Math.random() * numPlayers);\n\n  // Create all players\n  for (let i = 0; i < numPlayers; i++) {\n    const playerName = i === 0 ? 'You' : `Bot ${i}`;\n    const {\n      drawn,\n      remaining\n    } = cardUtils.drawCards(deck, 1);\n    const drawnCard = drawn[0];\n    deck = remaining;\n    const player = {\n      id: i,\n      name: playerName,\n      isHuman: i === 0,\n      cards: [...drawn],\n      hiddenCards: i === 0 ? [] : [...drawn],\n      visibleCards: i === 0 ? [...drawn] : [],\n      total: cardUtils.calculateTotal(drawn),\n      status: 'active' // active, holding, eliminated, winner\n    };\n    players.push(player);\n    if (i === 0) {\n      initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n    } else {\n      initialLog.push(`${playerName} drew a card.`);\n    }\n  }\n\n  // Log who goes first\n  const firstPlayerName = players[firstPlayerIndex].isHuman ? 'You' : players[firstPlayerIndex].name;\n  initialLog.push(`${firstPlayerName} will go first.`);\n  return {\n    phase: 'playing',\n    players,\n    deck,\n    currentPlayerIndex: firstPlayerIndex,\n    winner: null,\n    gameLog: initialLog,\n    gameId: Date.now(),\n    cardBackStyle: cardBackStyle\n  };\n}\n\n// Handle drawing a card\nexport function handleDrawCard(gameState, player, playerIndex) {\n  // Draw card\n  const {\n    drawn,\n    remaining\n  } = cardUtils.drawCards(gameState.deck, 1);\n  const drawnCard = drawn[0];\n  const newTotal = player.total + cardUtils.getCardValue(drawnCard);\n\n  // Update player cards\n  const updatedPlayers = [...gameState.players];\n  updatedPlayers[playerIndex] = {\n    ...player,\n    cards: [...player.cards, drawnCard],\n    visibleCards: [...player.visibleCards, drawnCard],\n    total: newTotal\n  };\n\n  // Create log message\n  let actionLog = `${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${newTotal}`;\n\n  // Check if player is eliminated (bust)\n  if (newTotal > 17) {\n    updatedPlayers[playerIndex].status = 'eliminated';\n\n    // Find next active player\n    let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== playerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    // Check if all players are done\n    const allDone = updatedPlayers.every(p => p.status !== 'active');\n    if (allDone) {\n      const gameEndCheck = checkGameEnd(updatedPlayers, `${player.name} drew ${cardUtils.getCardName(drawnCard)} and was eliminated with a total of ${newTotal}.`);\n      if (gameEndCheck.gameOver) {\n        return {\n          ...gameState,\n          players: gameEndCheck.players,\n          deck: remaining,\n          phase: 'revealing',\n          revealPhase: true,\n          pendingWinner: gameEndCheck.winner,\n          pendingWinnerMessage: gameEndCheck.winnerMessage,\n          gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n        };\n      }\n    }\n    return {\n      ...gameState,\n      players: updatedPlayers,\n      deck: remaining,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, actionLog, `${player.name} exceeded 17 and is eliminated!`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    };\n  }\n\n  // For human players, stay on their turn unless they get exactly 17\n  if (player.isHuman && newTotal !== 17) {\n    return {\n      ...gameState,\n      players: updatedPlayers,\n      deck: remaining,\n      gameLog: [...gameState.gameLog, actionLog]\n    };\n  }\n\n  // For AI players, or if player gets exactly 17, move to the next player\n  if (!player.isHuman || newTotal === 17) {\n    // Check for instant win with 17\n    if (newTotal === 17) {\n      updatedPlayers[playerIndex].status = 'winner';\n      return {\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        phase: 'gameOver',\n        winner: playerIndex,\n        gameLog: [...gameState.gameLog, actionLog, `${player.name} got exactly 17 and wins the game!`]\n      };\n    }\n\n    // For AI players, move to next\n    let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n    while (nextPlayerIndex !== playerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n      nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n    return {\n      ...gameState,\n      players: updatedPlayers,\n      deck: remaining,\n      currentPlayerIndex: nextPlayerIndex,\n      gameLog: [...gameState.gameLog, actionLog, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n    };\n  }\n\n  // Default case - just update game state\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    deck: remaining,\n    gameLog: [...gameState.gameLog, actionLog]\n  };\n}\n\n// Handle player holding\nexport function handleHold(gameState, currentPlayer, playerIndex) {\n  // Check if player has at least 2 cards (initial card + at least one drawn card)\n  if (currentPlayer.cards.length < 2) {\n    return gameState; // Cannot hold until drawing at least one more card\n  }\n\n  // Check if player has reached at least 11 points\n  if (currentPlayer.total < 11) {\n    return gameState; // Cannot hold below 11\n  }\n  const updatedPlayers = [...gameState.players];\n  updatedPlayers[playerIndex].status = 'holding';\n\n  // Find next active player\n  let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n  while (nextPlayerIndex !== playerIndex && (updatedPlayers[nextPlayerIndex].status === 'eliminated' || updatedPlayers[nextPlayerIndex].status === 'holding')) {\n    nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n  }\n  const allDone = updatedPlayers.every(p => p.status !== 'active');\n  if (allDone) {\n    const gameEndCheck = checkGameEnd(updatedPlayers, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`);\n    if (gameEndCheck.gameOver) {\n      return {\n        ...gameState,\n        players: gameEndCheck.players,\n        phase: 'revealing',\n        revealPhase: true,\n        pendingWinner: gameEndCheck.winner,\n        pendingWinnerMessage: gameEndCheck.winnerMessage,\n        gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n      };\n    }\n  }\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    currentPlayerIndex: nextPlayerIndex,\n    gameLog: [...gameState.gameLog, `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, `${updatedPlayers[nextPlayerIndex].name}'s turn.`]\n  };\n}\n\n// Check if the game has ended\nexport function checkGameEnd(players, currentAction = '') {\n  const allDone = players.every(p => p.status !== 'active');\n  if (allDone) {\n    const {\n      winnerIndex,\n      winMessage\n    } = determineWinner(players);\n    players.forEach(player => {\n      if (player.status !== 'eliminated') {\n        player.status = 'revealing';\n      }\n    });\n    return {\n      gameOver: true,\n      revealPhase: true,\n      players,\n      winner: winnerIndex,\n      winnerMessage: winMessage,\n      message: [currentAction].filter(Boolean)\n    };\n  }\n  return {\n    gameOver: false\n  };\n}\n\n// Determine the winner based on game rules\nexport function determineWinner(players) {\n  const exactWinner = players.findIndex(p => p.total === 17);\n  if (exactWinner !== -1) {\n    return {\n      winnerIndex: exactWinner,\n      winMessage: `${players[exactWinner].name} won with exactly 17!`\n    };\n  }\n  const allEliminated = players.every(p => p.status === 'eliminated');\n  if (allEliminated) {\n    return {\n      winnerIndex: -1,\n      winMessage: 'All players exceeded 17. Game is void.'\n    };\n  }\n  let maxTotal = 0;\n  let winnerIndex = -1;\n  players.forEach((player, idx) => {\n    if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n      maxTotal = player.total;\n      winnerIndex = idx;\n    }\n  });\n  if (winnerIndex !== -1) {\n    return {\n      winnerIndex,\n      winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`\n    };\n  }\n  return {\n    winnerIndex: -1,\n    winMessage: 'No winner could be determined.'\n  };\n}","map":{"version":3,"names":["cardUtils","setupInitialGame","numPlayers","cardBackStyle","deck","shuffle","generateDeck","players","initialLog","firstPlayerIndex","Math","floor","random","i","playerName","drawn","remaining","drawCards","drawnCard","player","id","name","isHuman","cards","hiddenCards","visibleCards","total","calculateTotal","status","push","getCardName","firstPlayerName","phase","currentPlayerIndex","winner","gameLog","gameId","Date","now","handleDrawCard","gameState","playerIndex","newTotal","getCardValue","updatedPlayers","actionLog","nextPlayerIndex","length","allDone","every","p","gameEndCheck","checkGameEnd","gameOver","revealPhase","pendingWinner","pendingWinnerMessage","winnerMessage","message","handleHold","currentPlayer","currentAction","winnerIndex","winMessage","determineWinner","forEach","filter","Boolean","exactWinner","findIndex","allEliminated","maxTotal","idx"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/gameLogic.js"],"sourcesContent":["import { cardUtils } from '../../services/cardUtils'; // Update path\n\n// Initialize game with specified number of players\nexport function setupInitialGame(numPlayers, cardBackStyle = 'cardback') {\n    let deck = cardUtils.shuffle(cardUtils.generateDeck());\n    const players = [];\n    const initialLog = ['Game started!'];\n\n    // Randomly determine the first player (0 to numPlayers-1)\n    const firstPlayerIndex = Math.floor(Math.random() * numPlayers);\n    \n    // Create all players\n    for (let i = 0; i < numPlayers; i++) {\n        const playerName = i === 0 ? 'You' : `Bot ${i}`;\n        const { drawn, remaining } = cardUtils.drawCards(deck, 1);\n        const drawnCard = drawn[0];\n        deck = remaining;\n\n        const player = {\n            id: i,\n            name: playerName,\n            isHuman: i === 0,\n            cards: [...drawn],\n            hiddenCards: i === 0 ? [] : [...drawn],\n            visibleCards: i === 0 ? [...drawn] : [],\n            total: cardUtils.calculateTotal(drawn),\n            status: 'active' // active, holding, eliminated, winner\n        };\n\n        players.push(player);\n\n        if (i === 0) {\n            initialLog.push(`You drew ${cardUtils.getCardName(drawnCard)}. Total: ${player.total}`);\n        } else {\n            initialLog.push(`${playerName} drew a card.`);\n        }\n    }\n\n    // Log who goes first\n    const firstPlayerName = players[firstPlayerIndex].isHuman ? 'You' : players[firstPlayerIndex].name;\n    initialLog.push(`${firstPlayerName} will go first.`);\n    \n    return {\n        phase: 'playing',\n        players,\n        deck,\n        currentPlayerIndex: firstPlayerIndex,\n        winner: null,\n        gameLog: initialLog,\n        gameId: Date.now(),\n        cardBackStyle: cardBackStyle\n    };\n}\n\n// Handle drawing a card\nexport function handleDrawCard(gameState, player, playerIndex) {\n    // Draw card\n    const { drawn, remaining } = cardUtils.drawCards(gameState.deck, 1);\n    const drawnCard = drawn[0];\n    const newTotal = player.total + cardUtils.getCardValue(drawnCard);\n    \n    // Update player cards\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[playerIndex] = {\n        ...player,\n        cards: [...player.cards, drawnCard],\n        visibleCards: [...player.visibleCards, drawnCard],\n        total: newTotal\n    };\n    \n    // Create log message\n    let actionLog = `${player.name} drew ${cardUtils.getCardName(drawnCard)}. Total: ${newTotal}`;\n    \n    // Check if player is eliminated (bust)\n    if (newTotal > 17) {\n        updatedPlayers[playerIndex].status = 'eliminated';\n        \n        // Find next active player\n        let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n        while (\n            nextPlayerIndex !== playerIndex &&\n            (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n            nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n        \n        // Check if all players are done\n        const allDone = updatedPlayers.every(p => p.status !== 'active');\n        if (allDone) {\n            const gameEndCheck = checkGameEnd(\n                updatedPlayers, \n                `${player.name} drew ${cardUtils.getCardName(drawnCard)} and was eliminated with a total of ${newTotal}.`\n            );\n            \n            if (gameEndCheck.gameOver) {\n                return {\n                    ...gameState,\n                    players: gameEndCheck.players,\n                    deck: remaining,\n                    phase: 'revealing',\n                    revealPhase: true,\n                    pendingWinner: gameEndCheck.winner,\n                    pendingWinnerMessage: gameEndCheck.winnerMessage,\n                    gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n                };\n            }\n        }\n\n        return {\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            currentPlayerIndex: nextPlayerIndex,\n            gameLog: [\n                ...gameState.gameLog, \n                actionLog,\n                `${player.name} exceeded 17 and is eliminated!`,\n                `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n            ]\n        };\n    }\n    \n    // For human players, stay on their turn unless they get exactly 17\n    if (player.isHuman && newTotal !== 17) {\n        return {\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            gameLog: [...gameState.gameLog, actionLog]\n        };\n    }\n    \n    // For AI players, or if player gets exactly 17, move to the next player\n    if (!player.isHuman || newTotal === 17) {\n        // Check for instant win with 17\n        if (newTotal === 17) {\n            updatedPlayers[playerIndex].status = 'winner';\n            \n            return {\n                ...gameState,\n                players: updatedPlayers,\n                deck: remaining,\n                phase: 'gameOver',\n                winner: playerIndex,\n                gameLog: [\n                    ...gameState.gameLog, \n                    actionLog,\n                    `${player.name} got exactly 17 and wins the game!`\n                ]\n            };\n        }\n        \n        // For AI players, move to next\n        let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n        while (\n            nextPlayerIndex !== playerIndex &&\n            (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n                updatedPlayers[nextPlayerIndex].status === 'holding')\n        ) {\n            nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n        }\n        \n        return {\n            ...gameState,\n            players: updatedPlayers,\n            deck: remaining,\n            currentPlayerIndex: nextPlayerIndex,\n            gameLog: [\n                ...gameState.gameLog, \n                actionLog,\n                `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n            ]\n        };\n    }\n    \n    // Default case - just update game state\n    return {\n        ...gameState,\n        players: updatedPlayers,\n        deck: remaining,\n        gameLog: [...gameState.gameLog, actionLog]\n    };\n}\n\n// Handle player holding\nexport function handleHold(gameState, currentPlayer, playerIndex) {\n    // Check if player has at least 2 cards (initial card + at least one drawn card)\n    if (currentPlayer.cards.length < 2) {\n        return gameState; // Cannot hold until drawing at least one more card\n    }\n    \n    // Check if player has reached at least 11 points\n    if (currentPlayer.total < 11) {\n        return gameState; // Cannot hold below 11\n    }\n    const updatedPlayers = [...gameState.players];\n    updatedPlayers[playerIndex].status = 'holding';\n\n    // Find next active player\n    let nextPlayerIndex = (playerIndex + 1) % gameState.players.length;\n    while (\n        nextPlayerIndex !== playerIndex &&\n        (updatedPlayers[nextPlayerIndex].status === 'eliminated' ||\n            updatedPlayers[nextPlayerIndex].status === 'holding')\n    ) {\n        nextPlayerIndex = (nextPlayerIndex + 1) % gameState.players.length;\n    }\n\n    const allDone = updatedPlayers.every((p) => p.status !== 'active');\n\n    if (allDone) {\n        const gameEndCheck = checkGameEnd(\n            updatedPlayers, \n            `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`\n        );\n        \n        if (gameEndCheck.gameOver) {\n            return {\n                ...gameState,\n                players: gameEndCheck.players,\n                phase: 'revealing',\n                revealPhase: true,\n                pendingWinner: gameEndCheck.winner,\n                pendingWinnerMessage: gameEndCheck.winnerMessage,\n                gameLog: [...gameState.gameLog, ...gameEndCheck.message]\n            };\n        }\n    }\n\n    return {\n        ...gameState,\n        players: updatedPlayers,\n        currentPlayerIndex: nextPlayerIndex,\n        gameLog: [\n            ...gameState.gameLog, \n            `${currentPlayer.name} decided to hold with a total of ${currentPlayer.total}.`, \n            `${updatedPlayers[nextPlayerIndex].name}'s turn.`\n        ]\n    };\n}\n\n// Check if the game has ended\nexport function checkGameEnd(players, currentAction = '') {\n    const allDone = players.every((p) => p.status !== 'active');\n\n    if (allDone) {\n        const { winnerIndex, winMessage } = determineWinner(players);\n\n        players.forEach((player) => {\n            if (player.status !== 'eliminated') {\n                player.status = 'revealing';\n            }\n        });\n\n        return {\n            gameOver: true,\n            revealPhase: true,\n            players,\n            winner: winnerIndex,\n            winnerMessage: winMessage,\n            message: [currentAction].filter(Boolean)\n        };\n    }\n\n    return { gameOver: false };\n}\n\n// Determine the winner based on game rules\nexport function determineWinner(players) {\n    const exactWinner = players.findIndex((p) => p.total === 17);\n    if (exactWinner !== -1) {\n        return {\n            winnerIndex: exactWinner,\n            winMessage: `${players[exactWinner].name} won with exactly 17!`,\n        };\n    }\n\n    const allEliminated = players.every((p) => p.status === 'eliminated');\n    if (allEliminated) {\n        return {\n            winnerIndex: -1,\n            winMessage: 'All players exceeded 17. Game is void.',\n        };\n    }\n\n    let maxTotal = 0;\n    let winnerIndex = -1;\n\n    players.forEach((player, idx) => {\n        if (player.status !== 'eliminated' && player.total <= 17 && player.total > maxTotal) {\n            maxTotal = player.total;\n            winnerIndex = idx;\n        }\n    });\n\n    if (winnerIndex !== -1) {\n        return {\n            winnerIndex,\n            winMessage: `${players[winnerIndex].name} wins with a total of ${maxTotal}!`,\n        };\n    }\n\n    return {\n        winnerIndex: -1,\n        winMessage: 'No winner could be determined.',\n    };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}