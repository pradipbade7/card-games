{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { textureManager } from '../utils/textureLoader';\n\n// The 3D Card mesh component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardMesh({\n  suit,\n  value,\n  flipped,\n  position,\n  scale\n}) {\n  _s();\n  const [frontTexture, setFrontTexture] = useState(null);\n  const [backTexture, setBackTexture] = useState(null);\n  const frontTexturePath = `/assets/cards/faces/${suit}/${value}.png`;\n  const backTexturePath = '/assets/cards/backs/cardback.png';\n  useEffect(() => {\n    // Get textures from the texture manager\n    setFrontTexture(textureManager.getTexture(frontTexturePath));\n    setBackTexture(textureManager.getTexture(backTexturePath));\n  }, [frontTexturePath, backTexturePath]);\n  if (!frontTexture || !backTexture) {\n    return null; // Don't render until textures are loaded\n  }\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    scale: scale,\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [1, 1.4]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: flipped ? backTexture : frontTexture,\n      side: 2 // DoubleSide = 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n// The Card component that wraps the 3D mesh in a Canvas\n_s(CardMesh, \"0gHjd+RBpA5ogKaNpD7vCTkCuTw=\");\n_c = CardMesh;\nexport default function Card({\n  suit,\n  value,\n  flipped,\n  position,\n  scale\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      shadows: true,\n      camera: {\n        position: [0, 0, 2]\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardMesh, {\n        suit: suit,\n        value: value,\n        flipped: flipped,\n        position: position,\n        scale: scale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Card;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardMesh\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","Canvas","textureManager","jsxDEV","_jsxDEV","CardMesh","suit","value","flipped","position","scale","_s","frontTexture","setFrontTexture","backTexture","setBackTexture","frontTexturePath","backTexturePath","getTexture","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","_c","Card","style","width","height","shadows","camera","intensity","_c2","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/Card.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { textureManager } from '../utils/textureLoader';\n\n// The 3D Card mesh component\nfunction CardMesh({ suit, value, flipped, position, scale }) {\n  const [frontTexture, setFrontTexture] = useState(null);\n  const [backTexture, setBackTexture] = useState(null);\n  \n  const frontTexturePath = `/assets/cards/faces/${suit}/${value}.png`;\n  const backTexturePath = '/assets/cards/backs/cardback.png';\n  \n  useEffect(() => {\n    // Get textures from the texture manager\n    setFrontTexture(textureManager.getTexture(frontTexturePath));\n    setBackTexture(textureManager.getTexture(backTexturePath));\n  }, [frontTexturePath, backTexturePath]);\n  \n  if (!frontTexture || !backTexture) {\n    return null; // Don't render until textures are loaded\n  }\n  \n  return (\n    <mesh position={position} scale={scale}>\n      <planeGeometry args={[1, 1.4]} />\n      <meshStandardMaterial \n        map={flipped ? backTexture : frontTexture}\n        side={2} // DoubleSide = 2\n      />\n    </mesh>\n  );\n}\n\n// The Card component that wraps the 3D mesh in a Canvas\nexport default function Card({ suit, value, flipped, position, scale }) {\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <Canvas shadows camera={{ position: [0, 0, 2] }}>\n        <ambientLight intensity={0.8} />\n        <pointLight position={[10, 10, 10]} />\n        <CardMesh \n          suit={suit}\n          value={value}\n          flipped={flipped}\n          position={position}\n          scale={scale}\n        />\n      </Canvas>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}