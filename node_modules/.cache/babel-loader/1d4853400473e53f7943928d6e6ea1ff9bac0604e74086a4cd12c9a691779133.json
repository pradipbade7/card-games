{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { setupInitialGame, handleDrawCard, handleHold, checkGameEnd } from './gameLogic';\nimport useBotAI from './useBotAI'; // Remove curly braces\n\nexport default function useGameState() {\n  _s();\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now()\n  });\n\n  // Bot AI hook\n  const {\n    processBotTurn\n  } = useBotAI(gameState, setGameState);\n\n  // Handle player drawing a card\n  const handlePlayerDrawCard = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.status !== 'active') return;\n    const newState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n    setGameState(newState);\n  };\n\n  // Handle player holding\n  const handlePlayerHold = () => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    if (currentPlayer.total < 11) {\n      setGameState({\n        ...gameState,\n        gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n      });\n      return;\n    }\n    const newState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n    setGameState(newState);\n  };\n\n  // Initialize a new game\n  const setupGame = (numPlayers, cardBackStyle = 'cardback') => {\n    const newGameState = setupInitialGame(numPlayers, cardBackStyle);\n    setGameState(newGameState);\n  };\n\n  // Reset the current game\n  const resetGame = () => {\n    const numPlayers = gameState.players.length;\n    // Clear Three.js cache to prevent memory leaks\n    THREE.Cache.clear();\n    setTimeout(() => {\n      setupGame(numPlayers);\n    }, 50);\n  };\n\n  // Return to home screen\n  const returnToHome = () => {\n    setGameState({\n      phase: 'setup',\n      players: [],\n      deck: [],\n      currentPlayerIndex: 0,\n      winner: null,\n      gameLog: []\n    });\n  };\n\n  // Bot turn effect\n  useEffect(() => {\n    if (gameState.phase !== 'playing') return;\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n    const botTurn = setTimeout(() => {\n      processBotTurn();\n    }, 1000);\n    return () => clearTimeout(botTurn);\n  }, [gameState, processBotTurn]);\n\n  // Reveal phase effect\n  useEffect(() => {\n    if (gameState.phase === 'revealing' && gameState.revealPhase) {\n      const revealTimer = setTimeout(() => {\n        const updatedPlayers = [...gameState.players];\n        if (gameState.pendingWinner !== -1) {\n          updatedPlayers[gameState.pendingWinner].status = 'winner';\n        }\n        setGameState({\n          ...gameState,\n          players: updatedPlayers,\n          phase: 'gameOver',\n          revealPhase: false,\n          winner: gameState.pendingWinner,\n          gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage]\n        });\n      }, 500);\n      return () => clearTimeout(revealTimer);\n    }\n  }, [gameState.phase, gameState.revealPhase, gameState.pendingWinner, gameState.pendingWinnerMessage]);\n  return {\n    gameState,\n    actions: {\n      handleDrawCard: handlePlayerDrawCard,\n      handleHold: handlePlayerHold,\n      setupGame,\n      resetGame,\n      returnToHome\n    }\n  };\n}\n_s(useGameState, \"aQhXPZbA2m6cuWG0gK4Kcdjk7gI=\", false, function () {\n  return [useBotAI];\n});","map":{"version":3,"names":["useState","useEffect","THREE","setupInitialGame","handleDrawCard","handleHold","checkGameEnd","useBotAI","useGameState","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","gameId","Date","now","processBotTurn","handlePlayerDrawCard","currentPlayer","status","newState","handlePlayerHold","isHuman","total","setupGame","numPlayers","cardBackStyle","newGameState","resetGame","length","Cache","clear","setTimeout","returnToHome","botTurn","clearTimeout","revealPhase","revealTimer","updatedPlayers","pendingWinner","pendingWinnerMessage","actions"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/useGameState.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { setupInitialGame, handleDrawCard, handleHold, checkGameEnd } from './gameLogic';\nimport useBotAI from './useBotAI'; // Remove curly braces\n\nexport default function useGameState() {\n    const [gameState, setGameState] = useState({\n        phase: 'setup',\n        players: [],\n        deck: [],\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: [],\n        gameId: Date.now(),\n    });\n\n    // Bot AI hook\n    const { processBotTurn } = useBotAI(gameState, setGameState);\n\n    // Handle player drawing a card\n    const handlePlayerDrawCard = () => {\n        if (gameState.phase !== 'playing') return;\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.status !== 'active') return;\n\n        const newState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n        setGameState(newState);\n    };\n\n    // Handle player holding\n    const handlePlayerHold = () => {\n        if (gameState.phase !== 'playing') return;\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || !currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        if (currentPlayer.total < 11) {\n            setGameState({\n                ...gameState,\n                gameLog: [...gameState.gameLog, 'You must draw until you reach at least 11.']\n            });\n            return;\n        }\n\n        const newState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n        setGameState(newState);\n    };\n\n    // Initialize a new game\n    const setupGame = (numPlayers, cardBackStyle = 'cardback') => {\n        const newGameState = setupInitialGame(numPlayers, cardBackStyle);\n        setGameState(newGameState);\n    };\n\n    // Reset the current game\n    const resetGame = () => {\n        const numPlayers = gameState.players.length;\n        // Clear Three.js cache to prevent memory leaks\n        THREE.Cache.clear();\n        \n        setTimeout(() => {\n            setupGame(numPlayers);\n        }, 50);\n    };\n\n    // Return to home screen\n    const returnToHome = () => {\n        setGameState({\n            phase: 'setup',\n            players: [],\n            deck: [],\n            currentPlayerIndex: 0,\n            winner: null,\n            gameLog: [],\n        });\n    };\n\n    // Bot turn effect\n    useEffect(() => {\n        if (gameState.phase !== 'playing') return;\n\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        if (!currentPlayer || currentPlayer.isHuman || currentPlayer.status !== 'active') return;\n\n        const botTurn = setTimeout(() => {\n            processBotTurn();\n        }, 1000);\n\n        return () => clearTimeout(botTurn);\n    }, [gameState, processBotTurn]);\n\n    // Reveal phase effect\n    useEffect(() => {\n        if (gameState.phase === 'revealing' && gameState.revealPhase) {\n            const revealTimer = setTimeout(() => {\n                const updatedPlayers = [...gameState.players];\n\n                if (gameState.pendingWinner !== -1) {\n                    updatedPlayers[gameState.pendingWinner].status = 'winner';\n                }\n\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    phase: 'gameOver',\n                    revealPhase: false,\n                    winner: gameState.pendingWinner,\n                    gameLog: [...gameState.gameLog, gameState.pendingWinnerMessage],\n                });\n            }, 500);\n\n            return () => clearTimeout(revealTimer);\n        }\n    }, [gameState.phase, gameState.revealPhase, gameState.pendingWinner, gameState.pendingWinnerMessage]);\n\n    return {\n        gameState,\n        actions: {\n            handleDrawCard: handlePlayerDrawCard,\n            handleHold: handlePlayerHold,\n            setupGame,\n            resetGame,\n            returnToHome\n        }\n    };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}