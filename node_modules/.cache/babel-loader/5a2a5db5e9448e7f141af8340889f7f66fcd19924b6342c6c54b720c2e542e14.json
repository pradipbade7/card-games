{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { cardUtils } from '../../services/cardUtils'; // Update path\nimport { handleDrawCard, handleHold } from './gameLogic';\nexport default function useBotAI(gameState, setGameState) {\n  _s();\n  // Game of 17 specific bot decision-making logic\n  const shouldBotDraw = (botCards, otherPlayersVisibleCards) => {\n    const botTotal = cardUtils.calculateTotal(botCards);\n\n    // Base probabilities\n    if (botTotal < 11) return true; // Must draw if under 11\n\n    let drawProbability;\n    switch (botTotal) {\n      case 11:\n      case 12:\n      case 13:\n        drawProbability = 0.8;\n        break;\n      case 14:\n        drawProbability = 0.3;\n        break;\n      case 15:\n        drawProbability = 0.1;\n        break;\n      case 16:\n        drawProbability = 0.05;\n        break;\n      default:\n        drawProbability = 0;\n      // Don't draw if 17+\n    }\n\n    // Adjust based on other players' visible cards\n    // Only consider holding players' visible cards (excluding their first card)\n    const holdingPlayersAhead = otherPlayersVisibleCards.some(playerData => {\n      if (playerData.status !== 'holding') return false;\n\n      // Calculate visible total excluding first card\n      const visibleTotal = cardUtils.calculateTotal(playerData.visibleCards.slice(1));\n      return visibleTotal >= botTotal;\n    });\n    if (holdingPlayersAhead) {\n      // Increase draw probability if other holding players appear to be ahead\n      drawProbability = 1;\n    }\n    return Math.random() < drawProbability;\n  };\n  const processBotTurn = useCallback(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n\n    // Get visible cards and status from other players for the bot to make decisions\n    const otherPlayersData = gameState.players.filter((player, index) => index !== gameState.currentPlayerIndex).map(player => ({\n      visibleCards: player.visibleCards,\n      status: player.status\n    }));\n\n    // Bot decision based on visible information\n    let updatedGameState;\n    if (shouldBotDraw(currentPlayer.cards, otherPlayersData)) {\n      updatedGameState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n    } else {\n      updatedGameState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n    }\n    setGameState(updatedGameState);\n  }, [gameState, setGameState]);\n  return {\n    processBotTurn\n  };\n}\n_s(useBotAI, \"ph+a3mvihLl3fb35JehTA4aTodg=\");","map":{"version":3,"names":["useCallback","cardUtils","handleDrawCard","handleHold","useBotAI","gameState","setGameState","_s","shouldBotDraw","botCards","otherPlayersVisibleCards","botTotal","calculateTotal","drawProbability","holdingPlayersAhead","some","playerData","status","visibleTotal","visibleCards","slice","Math","random","processBotTurn","currentPlayer","players","currentPlayerIndex","otherPlayersData","filter","player","index","map","updatedGameState","cards"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/useBotAI.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { cardUtils } from '../../services/cardUtils'; // Update path\nimport { handleDrawCard, handleHold } from './gameLogic';\n\nexport default function useBotAI(gameState, setGameState) {\n    // Game of 17 specific bot decision-making logic\n    const shouldBotDraw = (botCards, otherPlayersVisibleCards) => {\n        const botTotal = cardUtils.calculateTotal(botCards);\n        \n        // Base probabilities\n        if (botTotal < 11) return true; // Must draw if under 11\n        \n        let drawProbability;\n        switch (botTotal) {\n            case 11: case 12: case 13: drawProbability = 0.8; break;\n            case 14: drawProbability = 0.3; break;\n            case 15: drawProbability = 0.1; break;\n            case 16: drawProbability = 0.05; break;\n            default: drawProbability = 0; // Don't draw if 17+\n        }\n        \n        // Adjust based on other players' visible cards\n        // Only consider holding players' visible cards (excluding their first card)\n        const holdingPlayersAhead = otherPlayersVisibleCards.some(playerData => {\n            if (playerData.status !== 'holding') return false;\n            \n            // Calculate visible total excluding first card\n            const visibleTotal = cardUtils.calculateTotal(playerData.visibleCards.slice(1));\n            return visibleTotal >= botTotal;\n        });\n        \n        if (holdingPlayersAhead) {\n            // Increase draw probability if other holding players appear to be ahead\n            drawProbability = 1;\n        }\n        \n        return Math.random() < drawProbability;\n    };\n\n    const processBotTurn = useCallback(() => {\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        \n        // Get visible cards and status from other players for the bot to make decisions\n        const otherPlayersData = gameState.players\n            .filter((player, index) => index !== gameState.currentPlayerIndex)\n            .map(player => ({\n                visibleCards: player.visibleCards,\n                status: player.status\n            }));\n            \n        // Bot decision based on visible information\n        let updatedGameState;\n        \n        if (shouldBotDraw(currentPlayer.cards, otherPlayersData)) {\n            updatedGameState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n        } else {\n            updatedGameState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n        }\n        \n        setGameState(updatedGameState);\n    }, [gameState, setGameState]);\n\n    return { processBotTurn };\n}"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,SAAS,QAAQ,0BAA0B,CAAC,CAAC;AACtD,SAASC,cAAc,EAAEC,UAAU,QAAQ,aAAa;AAExD,eAAe,SAASC,QAAQA,CAACC,SAAS,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACtD;EACA,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,wBAAwB,KAAK;IAC1D,MAAMC,QAAQ,GAAGV,SAAS,CAACW,cAAc,CAACH,QAAQ,CAAC;;IAEnD;IACA,IAAIE,QAAQ,GAAG,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC;;IAEhC,IAAIE,eAAe;IACnB,QAAQF,QAAQ;MACZ,KAAK,EAAE;MAAE,KAAK,EAAE;MAAE,KAAK,EAAE;QAAEE,eAAe,GAAG,GAAG;QAAE;MAClD,KAAK,EAAE;QAAEA,eAAe,GAAG,GAAG;QAAE;MAChC,KAAK,EAAE;QAAEA,eAAe,GAAG,GAAG;QAAE;MAChC,KAAK,EAAE;QAAEA,eAAe,GAAG,IAAI;QAAE;MACjC;QAASA,eAAe,GAAG,CAAC;MAAE;IAClC;;IAEA;IACA;IACA,MAAMC,mBAAmB,GAAGJ,wBAAwB,CAACK,IAAI,CAACC,UAAU,IAAI;MACpE,IAAIA,UAAU,CAACC,MAAM,KAAK,SAAS,EAAE,OAAO,KAAK;;MAEjD;MACA,MAAMC,YAAY,GAAGjB,SAAS,CAACW,cAAc,CAACI,UAAU,CAACG,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/E,OAAOF,YAAY,IAAIP,QAAQ;IACnC,CAAC,CAAC;IAEF,IAAIG,mBAAmB,EAAE;MACrB;MACAD,eAAe,GAAG,CAAC;IACvB;IAEA,OAAOQ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGT,eAAe;EAC1C,CAAC;EAED,MAAMU,cAAc,GAAGvB,WAAW,CAAC,MAAM;IACrC,MAAMwB,aAAa,GAAGnB,SAAS,CAACoB,OAAO,CAACpB,SAAS,CAACqB,kBAAkB,CAAC;;IAErE;IACA,MAAMC,gBAAgB,GAAGtB,SAAS,CAACoB,OAAO,CACrCG,MAAM,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAKA,KAAK,KAAKzB,SAAS,CAACqB,kBAAkB,CAAC,CACjEK,GAAG,CAACF,MAAM,KAAK;MACZV,YAAY,EAAEU,MAAM,CAACV,YAAY;MACjCF,MAAM,EAAEY,MAAM,CAACZ;IACnB,CAAC,CAAC,CAAC;;IAEP;IACA,IAAIe,gBAAgB;IAEpB,IAAIxB,aAAa,CAACgB,aAAa,CAACS,KAAK,EAAEN,gBAAgB,CAAC,EAAE;MACtDK,gBAAgB,GAAG9B,cAAc,CAACG,SAAS,EAAEmB,aAAa,EAAEnB,SAAS,CAACqB,kBAAkB,CAAC;IAC7F,CAAC,MAAM;MACHM,gBAAgB,GAAG7B,UAAU,CAACE,SAAS,EAAEmB,aAAa,EAAEnB,SAAS,CAACqB,kBAAkB,CAAC;IACzF;IAEApB,YAAY,CAAC0B,gBAAgB,CAAC;EAClC,CAAC,EAAE,CAAC3B,SAAS,EAAEC,YAAY,CAAC,CAAC;EAE7B,OAAO;IAAEiB;EAAe,CAAC;AAC7B;AAAChB,EAAA,CA3DuBH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}