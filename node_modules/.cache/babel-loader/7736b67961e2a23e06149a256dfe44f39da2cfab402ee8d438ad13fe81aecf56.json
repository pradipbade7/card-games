{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { cardUtils } from '../../services/cardUtils'; // Update path\nimport { handleDrawCard, handleHold } from './gameLogic';\nexport default function useBotAI(gameState, setGameState) {\n  _s();\n  // Game of 17 specific bot decision-making logic\n  const shouldBotDraw = (botCards, otherPlayersVisibleCards) => {\n    const botTotal = cardUtils.calculateTotal(botCards);\n\n    // Base probabilities\n    if (botTotal < 11) return true; // Must draw if under 11\n\n    let drawProbability = 1;\n    // switch (botTotal) {\n    //     case 11: case 12: case 13: drawProbability = 0.8; break;\n    //     case 14: drawProbability = 0.3; break;\n    //     case 15: drawProbability = 0.1; break;\n    //     case 16: drawProbability = 0.05; break;\n    //     default: drawProbability = 0; // Don't draw if 17+\n    // }\n\n    // Adjust based on other players' visible cards\n    const otherPlayersAhead = otherPlayersVisibleCards.some(player => {\n      const visibleTotal = cardUtils.calculateTotal(player);\n      return visibleTotal >= 14 && visibleTotal <= 16;\n    });\n    if (otherPlayersAhead) {\n      // Increase draw probability if other players appear to be ahead\n      drawProbability += 0.2;\n    }\n    return Math.random() < drawProbability;\n  };\n  const processBotTurn = useCallback(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n\n    // Get visible cards from other players for the bot to make decisions\n    const otherPlayersVisibleCards = gameState.players.map((player, index) => {\n      if (index === gameState.currentPlayerIndex) return [];\n      return player.visibleCards;\n    }).filter(cards => cards.length > 0);\n    const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n    const shouldDraw = mustDrawFirstCard || currentPlayer.total < 11 || shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards);\n    if (shouldDraw) {\n      // Bot decides to draw\n      const newState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n      setGameState(newState);\n    } else {\n      // Bot decides to hold\n      const newState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n      setGameState(newState);\n    }\n  }, [gameState, setGameState]);\n  return {\n    processBotTurn\n  };\n}\n_s(useBotAI, \"ph+a3mvihLl3fb35JehTA4aTodg=\");","map":{"version":3,"names":["useCallback","cardUtils","handleDrawCard","handleHold","useBotAI","gameState","setGameState","_s","shouldBotDraw","botCards","otherPlayersVisibleCards","botTotal","calculateTotal","drawProbability","otherPlayersAhead","some","player","visibleTotal","Math","random","processBotTurn","currentPlayer","players","currentPlayerIndex","map","index","visibleCards","filter","cards","length","mustDrawFirstCard","shouldDraw","total","newState"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/useBotAI.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { cardUtils } from '../../services/cardUtils'; // Update path\nimport { handleDrawCard, handleHold } from './gameLogic';\n\nexport default function useBotAI(gameState, setGameState) {\n    // Game of 17 specific bot decision-making logic\n    const shouldBotDraw = (botCards, otherPlayersVisibleCards) => {\n        const botTotal = cardUtils.calculateTotal(botCards);\n        \n        // Base probabilities\n        if (botTotal < 11) return true; // Must draw if under 11\n        \n        let drawProbability = 1;\n        // switch (botTotal) {\n        //     case 11: case 12: case 13: drawProbability = 0.8; break;\n        //     case 14: drawProbability = 0.3; break;\n        //     case 15: drawProbability = 0.1; break;\n        //     case 16: drawProbability = 0.05; break;\n        //     default: drawProbability = 0; // Don't draw if 17+\n        // }\n        \n        // Adjust based on other players' visible cards\n        const otherPlayersAhead = otherPlayersVisibleCards.some(player => {\n            const visibleTotal = cardUtils.calculateTotal(player);\n            return visibleTotal >= 14 && visibleTotal <= 16;\n        });\n        \n        if (otherPlayersAhead) {\n            // Increase draw probability if other players appear to be ahead\n            drawProbability += 0.2;\n        }\n        \n        return Math.random() < drawProbability;\n    };\n\n    const processBotTurn = useCallback(() => {\n        const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n        \n        // Get visible cards from other players for the bot to make decisions\n        const otherPlayersVisibleCards = gameState.players\n            .map((player, index) => {\n                if (index === gameState.currentPlayerIndex) return [];\n                return player.visibleCards;\n            })\n            .filter((cards) => cards.length > 0);\n\n        const mustDrawFirstCard = currentPlayer.cards.length <= 1;\n        const shouldDraw = mustDrawFirstCard || \n                           currentPlayer.total < 11 || \n                           shouldBotDraw(currentPlayer.cards, otherPlayersVisibleCards);\n\n        if (shouldDraw) {\n            // Bot decides to draw\n            const newState = handleDrawCard(gameState, currentPlayer, gameState.currentPlayerIndex);\n            setGameState(newState);\n        } else {\n            // Bot decides to hold\n            const newState = handleHold(gameState, currentPlayer, gameState.currentPlayerIndex);\n            setGameState(newState);\n        }\n    }, [gameState, setGameState]);\n\n    return { processBotTurn };\n}"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,SAAS,QAAQ,0BAA0B,CAAC,CAAC;AACtD,SAASC,cAAc,EAAEC,UAAU,QAAQ,aAAa;AAExD,eAAe,SAASC,QAAQA,CAACC,SAAS,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACtD;EACA,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,wBAAwB,KAAK;IAC1D,MAAMC,QAAQ,GAAGV,SAAS,CAACW,cAAc,CAACH,QAAQ,CAAC;;IAEnD;IACA,IAAIE,QAAQ,GAAG,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC;;IAEhC,IAAIE,eAAe,GAAG,CAAC;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMC,iBAAiB,GAAGJ,wBAAwB,CAACK,IAAI,CAACC,MAAM,IAAI;MAC9D,MAAMC,YAAY,GAAGhB,SAAS,CAACW,cAAc,CAACI,MAAM,CAAC;MACrD,OAAOC,YAAY,IAAI,EAAE,IAAIA,YAAY,IAAI,EAAE;IACnD,CAAC,CAAC;IAEF,IAAIH,iBAAiB,EAAE;MACnB;MACAD,eAAe,IAAI,GAAG;IAC1B;IAEA,OAAOK,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGN,eAAe;EAC1C,CAAC;EAED,MAAMO,cAAc,GAAGpB,WAAW,CAAC,MAAM;IACrC,MAAMqB,aAAa,GAAGhB,SAAS,CAACiB,OAAO,CAACjB,SAAS,CAACkB,kBAAkB,CAAC;;IAErE;IACA,MAAMb,wBAAwB,GAAGL,SAAS,CAACiB,OAAO,CAC7CE,GAAG,CAAC,CAACR,MAAM,EAAES,KAAK,KAAK;MACpB,IAAIA,KAAK,KAAKpB,SAAS,CAACkB,kBAAkB,EAAE,OAAO,EAAE;MACrD,OAAOP,MAAM,CAACU,YAAY;IAC9B,CAAC,CAAC,CACDC,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;IAExC,MAAMC,iBAAiB,GAAGT,aAAa,CAACO,KAAK,CAACC,MAAM,IAAI,CAAC;IACzD,MAAME,UAAU,GAAGD,iBAAiB,IACjBT,aAAa,CAACW,KAAK,GAAG,EAAE,IACxBxB,aAAa,CAACa,aAAa,CAACO,KAAK,EAAElB,wBAAwB,CAAC;IAE/E,IAAIqB,UAAU,EAAE;MACZ;MACA,MAAME,QAAQ,GAAG/B,cAAc,CAACG,SAAS,EAAEgB,aAAa,EAAEhB,SAAS,CAACkB,kBAAkB,CAAC;MACvFjB,YAAY,CAAC2B,QAAQ,CAAC;IAC1B,CAAC,MAAM;MACH;MACA,MAAMA,QAAQ,GAAG9B,UAAU,CAACE,SAAS,EAAEgB,aAAa,EAAEhB,SAAS,CAACkB,kBAAkB,CAAC;MACnFjB,YAAY,CAAC2B,QAAQ,CAAC;IAC1B;EACJ,CAAC,EAAE,CAAC5B,SAAS,EAAEC,YAAY,CAAC,CAAC;EAE7B,OAAO;IAAEc;EAAe,CAAC;AAC7B;AAACb,EAAA,CA3DuBH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}