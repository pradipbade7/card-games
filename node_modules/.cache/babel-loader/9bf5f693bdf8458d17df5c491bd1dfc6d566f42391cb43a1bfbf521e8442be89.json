{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { setupInitialGame, handleDrawCard, handleHold, checkGameEnd, handleAITurn } from './gameLogic';\n\n/**\n * Custom hook for managing game state for Game of 17\n */\nexport default function useGameState() {\n  _s();\n  // Game state\n  const [gameState, setGameState] = useState({\n    phase: 'setup',\n    // setup, playing, revealing, gameOver\n    players: [],\n    deck: [],\n    currentPlayerIndex: 0,\n    winner: null,\n    gameLog: [],\n    gameId: Date.now(),\n    cardBackStyle: 'cardback',\n    aiActionInProgress: false\n  });\n\n  // Timer for AI actions\n  const aiTimer = useRef(null);\n\n  // Handle AI turns with delay\n  useEffect(() => {\n    // Clear any existing timer on component unmount or when dependencies change\n    return () => {\n      if (aiTimer.current) {\n        clearTimeout(aiTimer.current);\n      }\n    };\n  }, []);\n\n  // Effect to handle AI turns\n  useEffect(() => {\n    if (gameState.aiActionInProgress && gameState.phase === 'playing') {\n      // Clear any existing timer\n      if (aiTimer.current) {\n        clearTimeout(aiTimer.current);\n      }\n\n      // Set a delay before AI takes action, to make it feel more natural\n      aiTimer.current = setTimeout(() => {\n        setGameState(prevState => {\n          // Double-check that conditions are still valid\n          if (prevState.aiActionInProgress && prevState.phase === 'playing') {\n            const updatedState = handleAITurn(prevState);\n\n            // Check if the game has ended after the AI's turn\n            return updatedState;\n          }\n          return prevState;\n        });\n      }, 1000); // 1 second delay for AI turns\n    }\n  }, [gameState.currentPlayerIndex, gameState.aiActionInProgress, gameState.phase]);\n\n  // Set up a new game\n  const setupGame = (numPlayers, cardBackStyle = 'cardback') => {\n    const newGameState = setupInitialGame(numPlayers, cardBackStyle);\n    setGameState(newGameState);\n  };\n\n  // Handle human player drawing a card\n  const handlePlayerDrawCard = () => {\n    const {\n      currentPlayerIndex,\n      players\n    } = gameState;\n    const currentPlayer = players[currentPlayerIndex];\n    if (currentPlayer && currentPlayer.isHuman && currentPlayer.status === 'active') {\n      const updatedState = handleDrawCard(gameState, currentPlayer, currentPlayerIndex);\n      setGameState(updatedState);\n    }\n  };\n\n  // Handle human player holding\n  const handlePlayerHold = () => {\n    const {\n      currentPlayerIndex,\n      players\n    } = gameState;\n    const currentPlayer = players[currentPlayerIndex];\n    if (currentPlayer && currentPlayer.isHuman && currentPlayer.status === 'active' && currentPlayer.total >= 11) {\n      const updatedState = handleHold(gameState, currentPlayer, currentPlayerIndex);\n      setGameState(updatedState);\n    }\n  };\n\n  // Reset the game\n  const resetGame = () => {\n    if (gameState.cardBackStyle) {\n      setupGame(gameState.players.length, gameState.cardBackStyle);\n    } else {\n      setupGame(gameState.players.length);\n    }\n  };\n\n  // Return to setup screen\n  const returnToHome = () => {\n    setGameState({\n      ...gameState,\n      phase: 'setup'\n    });\n  };\n  return {\n    gameState,\n    actions: {\n      handleDrawCard: handlePlayerDrawCard,\n      handleHold: handlePlayerHold,\n      setupGame,\n      resetGame,\n      returnToHome\n    }\n  };\n}\n_s(useGameState, \"qLXyeYlEnmPXSbw2RqzdDEH7Rc0=\");","map":{"version":3,"names":["useState","useEffect","useRef","setupInitialGame","handleDrawCard","handleHold","checkGameEnd","handleAITurn","useGameState","_s","gameState","setGameState","phase","players","deck","currentPlayerIndex","winner","gameLog","gameId","Date","now","cardBackStyle","aiActionInProgress","aiTimer","current","clearTimeout","setTimeout","prevState","updatedState","setupGame","numPlayers","newGameState","handlePlayerDrawCard","currentPlayer","isHuman","status","handlePlayerHold","total","resetGame","length","returnToHome","actions"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/useGameState.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { setupInitialGame, handleDrawCard, handleHold, checkGameEnd, handleAITurn } from './gameLogic';\n\n/**\n * Custom hook for managing game state for Game of 17\n */\nexport default function useGameState() {\n    // Game state\n    const [gameState, setGameState] = useState({\n        phase: 'setup', // setup, playing, revealing, gameOver\n        players: [],\n        deck: [],\n        currentPlayerIndex: 0,\n        winner: null,\n        gameLog: [],\n        gameId: Date.now(),\n        cardBackStyle: 'cardback',\n        aiActionInProgress: false\n    });\n\n    // Timer for AI actions\n    const aiTimer = useRef(null);\n\n    // Handle AI turns with delay\n    useEffect(() => {\n        // Clear any existing timer on component unmount or when dependencies change\n        return () => {\n            if (aiTimer.current) {\n                clearTimeout(aiTimer.current);\n            }\n        };\n    }, []);\n\n    // Effect to handle AI turns\n    useEffect(() => {\n        if (gameState.aiActionInProgress && gameState.phase === 'playing') {\n            // Clear any existing timer\n            if (aiTimer.current) {\n                clearTimeout(aiTimer.current);\n            }\n            \n            // Set a delay before AI takes action, to make it feel more natural\n            aiTimer.current = setTimeout(() => {\n                setGameState(prevState => {\n                    // Double-check that conditions are still valid\n                    if (prevState.aiActionInProgress && prevState.phase === 'playing') {\n                        const updatedState = handleAITurn(prevState);\n                        \n                        // Check if the game has ended after the AI's turn\n                        return updatedState;\n                    }\n                    return prevState;\n                });\n            }, 1000); // 1 second delay for AI turns\n        }\n    }, [gameState.currentPlayerIndex, gameState.aiActionInProgress, gameState.phase]);\n\n    // Set up a new game\n    const setupGame = (numPlayers, cardBackStyle = 'cardback') => {\n        const newGameState = setupInitialGame(numPlayers, cardBackStyle);\n        setGameState(newGameState);\n    };\n\n    // Handle human player drawing a card\n    const handlePlayerDrawCard = () => {\n        const { currentPlayerIndex, players } = gameState;\n        const currentPlayer = players[currentPlayerIndex];\n        \n        if (currentPlayer && currentPlayer.isHuman && currentPlayer.status === 'active') {\n            const updatedState = handleDrawCard(gameState, currentPlayer, currentPlayerIndex);\n            setGameState(updatedState);\n        }\n    };\n\n    // Handle human player holding\n    const handlePlayerHold = () => {\n        const { currentPlayerIndex, players } = gameState;\n        const currentPlayer = players[currentPlayerIndex];\n        \n        if (currentPlayer && currentPlayer.isHuman && currentPlayer.status === 'active' && currentPlayer.total >= 11) {\n            const updatedState = handleHold(gameState, currentPlayer, currentPlayerIndex);\n            setGameState(updatedState);\n        }\n    };\n\n    // Reset the game\n    const resetGame = () => {\n        if (gameState.cardBackStyle) {\n            setupGame(gameState.players.length, gameState.cardBackStyle);\n        } else {\n            setupGame(gameState.players.length);\n        }\n    };\n\n    // Return to setup screen\n    const returnToHome = () => {\n        setGameState({\n            ...gameState,\n            phase: 'setup'\n        });\n    };\n\n    return {\n        gameState,\n        actions: {\n            handleDrawCard: handlePlayerDrawCard,\n            handleHold: handlePlayerHold,\n            setupGame,\n            resetGame,\n            returnToHome\n        }\n    };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}