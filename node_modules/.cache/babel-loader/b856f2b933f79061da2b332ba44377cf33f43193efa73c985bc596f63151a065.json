{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/PlayerHand.js\";\nimport React, { Suspense } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayerHand({\n  player,\n  isCurrentTurn,\n  isHumanPlayer,\n  gamePhase\n}) {\n  const {\n    name,\n    cards,\n    visibleCards,\n    hiddenCards,\n    total,\n    status\n  } = player;\n\n  // Helper function to get status text\n  const getStatusText = () => {\n    switch (status) {\n      case 'active':\n        return isCurrentTurn ? 'Playing...' : 'Waiting';\n      case 'holding':\n        return `Holding at ${total}`;\n      case 'eliminated':\n        return 'Busted!';\n      case 'winner':\n        return 'Winner!';\n      default:\n        return '';\n    }\n  };\n  const CardFallback = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '60px',\n      height: '84px',\n      backgroundColor: '#1b4332',\n      border: '1px solid #43aa8b',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n\n  // Determine whether to show hidden cards (show them when game is over or player is eliminated/winner)\n  const showAllCards = gamePhase === 'gameOver' || status === 'eliminated' || status === 'winner';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `player-hand ${isCurrentTurn ? 'active-turn' : ''} ${status}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Total: \", isHumanPlayer || status !== 'active' || showAllCards ? total : '?']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: getStatusText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: [!showAllCards && hiddenCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(CardFallback, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            suit: card.suit,\n            value: card.value,\n            flipped: true // Always show back while hidden\n            ,\n            position: [0, 0, 0],\n            scale: [1.2, 1.2, 1.2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, `hidden-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)), showAllCards && hiddenCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(CardFallback, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            suit: card.suit,\n            value: card.value,\n            flipped: false // Show face when game is over\n            ,\n            position: [0, 0, 0],\n            scale: [1.2, 1.2, 1.2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, `revealed-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)), visibleCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(CardFallback, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            suit: card.suit,\n            value: card.value,\n            flipped: false // Show face\n            ,\n            position: [0, 0, 0],\n            scale: [1.2, 1.2, 1.2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, `visible-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = PlayerHand;\nvar _c;\n$RefreshReg$(_c, \"PlayerHand\");","map":{"version":3,"names":["React","Suspense","Card","jsxDEV","_jsxDEV","PlayerHand","player","isCurrentTurn","isHumanPlayer","gamePhase","name","cards","visibleCards","hiddenCards","total","status","getStatusText","CardFallback","style","width","height","backgroundColor","border","borderRadius","display","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","showAllCards","className","map","card","index","fallback","suit","value","flipped","position","scale","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/components/PlayerHand.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport Card from './Card';\n\nexport default function PlayerHand({ player, isCurrentTurn, isHumanPlayer, gamePhase }) {\n  const { name, cards, visibleCards, hiddenCards, total, status } = player;\n  \n  // Helper function to get status text\n  const getStatusText = () => {\n    switch(status) {\n      case 'active': return isCurrentTurn ? 'Playing...' : 'Waiting';\n      case 'holding': return `Holding at ${total}`;\n      case 'eliminated': return 'Busted!';\n      case 'winner': return 'Winner!';\n      default: return '';\n    }\n  };\n  \n  const CardFallback = () => (\n    <div style={{ \n      width: '60px', \n      height: '84px', \n      backgroundColor: '#1b4332',\n      border: '1px solid #43aa8b',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n      <span>Loading</span>\n    </div>\n  );\n  \n  // Determine whether to show hidden cards (show them when game is over or player is eliminated/winner)\n  const showAllCards = gamePhase === 'gameOver' || status === 'eliminated' || status === 'winner';\n  \n  return (\n    <div className={`player-hand ${isCurrentTurn ? 'active-turn' : ''} ${status}`}>\n      <div className=\"player-info\">\n        <h3>{name}</h3>\n        <div className=\"player-status\">\n          <span>Total: {isHumanPlayer || status !== 'active' || showAllCards ? total : '?'}</span>\n          <span>{getStatusText()}</span>\n        </div>\n      </div>\n      \n      <div className=\"cards-container\">\n        {/* Hidden cards (for bots) - show as hidden unless game is over or player is eliminated/winner */}\n        {!showAllCards && hiddenCards.map((card, index) => (\n          <div key={`hidden-${index}`} className=\"card-wrapper\">\n            <Suspense fallback={<CardFallback />}>\n              <Card\n                suit={card.suit}\n                value={card.value}\n                flipped={true} // Always show back while hidden\n                position={[0, 0, 0]}\n                scale={[1.2, 1.2, 1.2]}\n              />\n            </Suspense>\n          </div>\n        ))}\n        \n        {/* Show hidden cards as visible when game is over or player is eliminated/winner */}\n        {showAllCards && hiddenCards.map((card, index) => (\n          <div key={`revealed-${index}`} className=\"card-wrapper\">\n            <Suspense fallback={<CardFallback />}>\n              <Card\n                suit={card.suit}\n                value={card.value}\n                flipped={false} // Show face when game is over\n                position={[0, 0, 0]}\n                scale={[1.2, 1.2, 1.2]}\n              />\n            </Suspense>\n          </div>\n        ))}\n        \n        {/* Visible cards */}\n        {visibleCards.map((card, index) => (\n          <div key={`visible-${index}`} className=\"card-wrapper\">\n            <Suspense fallback={<CardFallback />}>\n              <Card\n                suit={card.suit}\n                value={card.value}\n                flipped={false} // Show face\n                position={[0, 0, 0]}\n                scale={[1.2, 1.2, 1.2]}\n              />\n            </Suspense>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}