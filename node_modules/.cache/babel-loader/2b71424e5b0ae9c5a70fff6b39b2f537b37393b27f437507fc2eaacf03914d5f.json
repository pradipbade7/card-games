{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js\";\nimport React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameBoard({\n  gameState,\n  onDrawCard,\n  onHold,\n  onReset,\n  onReturnHome\n}) {\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    winner: winningPlayerId,\n    gameLog\n  } = gameState;\n\n  // Find the human player\n  const humanPlayerIndex = players.findIndex(player => player.isHuman);\n  const humanPlayer = players[humanPlayerIndex];\n\n  // Position players evenly around a circle\n  const positionPlayersInCircle = () => {\n    if (players.length <= 1) return players;\n    const arrangedPlayers = [...players];\n    const totalPlayers = players.length;\n    const angleStep = 360 / totalPlayers;\n\n    // Calculate position for each player based on their index\n    for (let i = 0; i < totalPlayers; i++) {\n      // Calculate player's angle from bottom center (human player is always at 0 degrees)\n      // Non-human players are placed at equal intervals going clockwise from human\n      let playerAngle;\n      if (players[i].isHuman) {\n        playerAngle = 0; // Human player is always at bottom (0 degrees)\n      } else {\n        // Calculate bot placement: \n        // First, determine this bot's position relative to human player\n        const orderAfterHuman = i > humanPlayerIndex ? i - humanPlayerIndex : totalPlayers - humanPlayerIndex + i;\n\n        // Calculate angle based on position order (clockwise)\n        playerAngle = orderAfterHuman * angleStep % 360;\n      }\n\n      // Convert angle to position coordinates around the table\n      // Table center is (50%, 50%) with radius depending on table size\n      // We use cos for x-axis (horizontal) and sin for y-axis (vertical)\n      // Note: In CSS, y-axis is inverted (top is 0), so we use -sin\n\n      // For a circular table:\n      // - Radius is 40% of container width/height for proper spacing\n      // - Positions are calculated as percentage from center (50%, 50%)\n      const radius = 40; // Percentage of container\n      const xPos = 50 - radius * Math.sin(playerAngle * Math.PI / 180);\n      const yPos = 50 - radius * Math.cos(playerAngle * Math.PI / 180);\n\n      // Store calculated position and angle\n      arrangedPlayers[i] = {\n        ...players[i],\n        position: {\n          left: `${xPos}%`,\n          top: `${yPos}%`,\n          angle: playerAngle\n        }\n      };\n    }\n    return arrangedPlayers;\n  };\n  const positionedPlayers = positionPlayersInCircle();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: positionedPlayers.map(player => {\n          // Calculate rotation for player hand\n          // Cards should be rotated to face the center of the table\n          let cardRotation = 0;\n\n          // If it's not the human player, calculate the rotation to face center\n          if (!player.isHuman) {\n            // Position angle + 180Â° makes cards face inward\n            cardRotation = player.position.angle + 180;\n          }\n\n          // Create custom style based on calculated position\n          const playerStyle = {\n            position: 'absolute',\n            left: player.position.left,\n            top: player.position.top,\n            transform: `translate(-50%, -50%) rotate(${cardRotation}deg)`,\n            width: player.isHuman ? '350px' : '280px',\n            zIndex: player.isHuman ? 5 : 2\n          };\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-position ${player.isHuman ? 'human-player' : 'bot-player'}`,\n            style: playerStyle,\n            children: /*#__PURE__*/_jsxDEV(PlayerHand, {\n              player: player,\n              isCurrentTurn: player.id === currentPlayerIndex && phase === 'playing',\n              isHumanPlayer: player.isHuman,\n              gamePhase: phase,\n              showTotal: player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner',\n              isWinner: player.id === winningPlayerId,\n              gameId: gameState.gameId,\n              cardBackStyle: cardBackStyle || 'cardback'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this)\n          }, `player-${player.id}-${gameState.gameId || Date.now()}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), phase === 'playing' && humanPlayer.id === currentPlayerIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onDrawCard,\n          disabled: humanPlayer.status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onHold,\n          disabled: humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(GameLog, {\n          messages: gameLog || []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReset,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReturnHome,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","PlayerHand","GameLog","jsxDEV","_jsxDEV","GameBoard","gameState","onDrawCard","onHold","onReset","onReturnHome","players","currentPlayerIndex","phase","winner","winningPlayerId","gameLog","humanPlayerIndex","findIndex","player","isHuman","humanPlayer","positionPlayersInCircle","length","arrangedPlayers","totalPlayers","angleStep","i","playerAngle","orderAfterHuman","radius","xPos","Math","sin","PI","yPos","cos","position","left","top","angle","positionedPlayers","className","children","map","cardRotation","playerStyle","transform","width","zIndex","style","isCurrentTurn","id","isHumanPlayer","gamePhase","showTotal","status","isWinner","gameId","cardBackStyle","fileName","_jsxFileName","lineNumber","columnNumber","Date","now","onClick","disabled","total","cards","messages","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js"],"sourcesContent":["import React from 'react';\nimport PlayerHand from './PlayerHand';\nimport GameLog from './GameLog';\n\nexport default function GameBoard({ gameState, onDrawCard, onHold, onReset, onReturnHome }) {\n    const { \n        players, \n        currentPlayerIndex, \n        phase, \n        winner: winningPlayerId, \n        gameLog \n    } = gameState;\n\n    // Find the human player\n    const humanPlayerIndex = players.findIndex(player => player.isHuman);\n    const humanPlayer = players[humanPlayerIndex];\n    \n    // Position players evenly around a circle\n    const positionPlayersInCircle = () => {\n        if (players.length <= 1) return players;\n        \n        const arrangedPlayers = [...players];\n        const totalPlayers = players.length;\n        const angleStep = 360 / totalPlayers;\n        \n        // Calculate position for each player based on their index\n        for (let i = 0; i < totalPlayers; i++) {\n            // Calculate player's angle from bottom center (human player is always at 0 degrees)\n            // Non-human players are placed at equal intervals going clockwise from human\n            let playerAngle;\n            \n            if (players[i].isHuman) {\n                playerAngle = 0; // Human player is always at bottom (0 degrees)\n            } else {\n                // Calculate bot placement: \n                // First, determine this bot's position relative to human player\n                const orderAfterHuman = (i > humanPlayerIndex) ? \n                    (i - humanPlayerIndex) : \n                    (totalPlayers - humanPlayerIndex + i);\n                \n                // Calculate angle based on position order (clockwise)\n                playerAngle = (orderAfterHuman * angleStep) % 360;\n            }\n            \n            // Convert angle to position coordinates around the table\n            // Table center is (50%, 50%) with radius depending on table size\n            // We use cos for x-axis (horizontal) and sin for y-axis (vertical)\n            // Note: In CSS, y-axis is inverted (top is 0), so we use -sin\n            \n            // For a circular table:\n            // - Radius is 40% of container width/height for proper spacing\n            // - Positions are calculated as percentage from center (50%, 50%)\n            const radius = 40; // Percentage of container\n            const xPos = 50 - radius * Math.sin((playerAngle * Math.PI) / 180);\n            const yPos = 50 - radius * Math.cos((playerAngle * Math.PI) / 180);\n            \n            // Store calculated position and angle\n            arrangedPlayers[i] = {\n                ...players[i],\n                position: {\n                    left: `${xPos}%`,\n                    top: `${yPos}%`,\n                    angle: playerAngle\n                }\n            };\n        }\n        \n        return arrangedPlayers;\n    };\n    \n    const positionedPlayers = positionPlayersInCircle();\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"game-table\">\n                <div className=\"players-container\">\n                    {positionedPlayers.map(player => {\n                        // Calculate rotation for player hand\n                        // Cards should be rotated to face the center of the table\n                        let cardRotation = 0;\n                        \n                        // If it's not the human player, calculate the rotation to face center\n                        if (!player.isHuman) {\n                            // Position angle + 180Â° makes cards face inward\n                            cardRotation = player.position.angle + 180;\n                        }\n                        \n                        // Create custom style based on calculated position\n                        const playerStyle = {\n                            position: 'absolute',\n                            left: player.position.left,\n                            top: player.position.top,\n                            transform: `translate(-50%, -50%) rotate(${cardRotation}deg)`,\n                            width: player.isHuman ? '350px' : '280px',\n                            zIndex: player.isHuman ? 5 : 2\n                        };\n                        \n                        return (\n                            <div \n                                key={`player-${player.id}-${gameState.gameId || Date.now()}`}\n                                className={`player-position ${player.isHuman ? 'human-player' : 'bot-player'}`}\n                                style={playerStyle}\n                            >\n                                <PlayerHand \n                                    player={player}\n                                    isCurrentTurn={player.id === currentPlayerIndex && phase === 'playing'}\n                                    isHumanPlayer={player.isHuman}\n                                    gamePhase={phase}\n                                    showTotal={player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner'}\n                                    isWinner={player.id === winningPlayerId}\n                                    gameId={gameState.gameId}\n                                    cardBackStyle={cardBackStyle || 'cardback'}\n                                />\n                            </div>\n                        );\n                    })}\n                </div>\n                \n                {phase === 'playing' && humanPlayer.id === currentPlayerIndex && (\n                    <div className=\"player-controls\">\n                        <button \n                            className=\"action-button\" \n                            onClick={onDrawCard}\n                            disabled={humanPlayer.status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        <button \n                            className=\"action-button\" \n                            onClick={onHold}\n                            disabled={humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2}\n                        >\n                            Hold\n                        </button>\n                    </div>\n                )}\n                \n                <div className=\"game-info\">\n                    <GameLog messages={gameLog || []} />\n                    \n                    {phase === 'gameOver' && (\n                        <div className=\"game-over-controls\">\n                            <button className=\"action-button\" onClick={onReset}>Play Again</button>\n                            <button className=\"action-button\" onClick={onReturnHome}>Main Menu</button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}