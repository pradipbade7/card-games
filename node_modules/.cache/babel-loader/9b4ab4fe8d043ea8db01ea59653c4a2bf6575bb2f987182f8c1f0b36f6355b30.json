{"ast":null,"code":"var _jsxFileName = \"/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\n// import GameLog from './GameLog';\nimport Confetti from '../../components/ui/Confetti';\nimport useBotAI from './useBotAI';\nimport { isSoundEnabled, toggleSound } from '../../services/audioService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameBoard({\n  gameState,\n  setGameState,\n  onDrawCard,\n  onHold,\n  onReset,\n  onReturnHome\n}) {\n  _s();\n  var _players$winningPlaye;\n  const {\n    players,\n    currentPlayerIndex,\n    phase,\n    winner: winningPlayerId,\n    gameLog\n  } = gameState;\n\n  // Get current player\n  const currentPlayer = players[currentPlayerIndex];\n\n  // Inside your GameBoard component\n  useEffect(() => {\n    // When animation is in progress, set a timer to wait for animation to complete\n    if (gameState.animationInProgress) {\n      const timer = setTimeout(() => {\n        // Clear the animation flag and proceed with the game\n        setGameState(prevState => ({\n          ...prevState,\n          animationInProgress: false\n        }));\n      }, 800); // Adjust timing to match your animation duration\n\n      return () => clearTimeout(timer);\n    }\n  }, [gameState.animationInProgress, setGameState]);\n\n  // Modify your bot turn processing logic\n  useEffect(() => {\n    // Only process bot turn if it's a bot's turn AND no animation is in progress\n    if (currentPlayer && !currentPlayer.isHuman && phase === 'playing' && !gameState.animationInProgress) {\n      const timer = setTimeout(() => {\n        processBotTurn();\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [currentPlayer, phase, gameState.animationInProgress, processBotTurn, players]);\n  const humanWon = winningPlayerId !== null && ((_players$winningPlaye = players[winningPlayerId]) === null || _players$winningPlaye === void 0 ? void 0 : _players$winningPlaye.isHuman);\n\n  // Add state for sound toggle\n  const [soundOn, setSoundOn] = useState(isSoundEnabled());\n\n  // Handle sound toggle\n  const handleToggleSound = () => {\n    const newState = toggleSound();\n    setSoundOn(newState);\n  };\n  // Find the human player\n  const humanPlayerIndex = players.findIndex(player => player.isHuman);\n  const humanPlayer = players[humanPlayerIndex];\n\n  // Arrange players around the table\n  const arrangePlayersForDisplay = () => {\n    if (players.length <= 1) return players;\n\n    // Clone players for manipulation\n    const arrangedPlayers = [...players];\n\n    // Assign positions based on number of players\n    switch (players.length) {\n      case 2:\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Find the other player\n        const otherPlayerIdx = humanPlayerIndex === 0 ? 1 : 0;\n        arrangedPlayers[otherPlayerIdx] = {\n          ...players[otherPlayerIdx],\n          position: 'top'\n        };\n        break;\n      case 3:\n        // 3 players: human at bottom, others at top-left and top-right\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Position the other players\n        let position3p = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            arrangedPlayers[i] = {\n              ...players[i],\n              position: position3p === 0 ? 'top-left' : 'top-right'\n            };\n            position3p++;\n          }\n        }\n        break;\n      case 4:\n        // 4 players: human at bottom, opponents at top, left, and right\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Positions for 4 players (excluding human)\n        const positions4p = ['left', 'top', 'right'];\n        let posIdx = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            arrangedPlayers[i] = {\n              ...players[i],\n              position: positions4p[posIdx]\n            };\n            posIdx++;\n          }\n        }\n        break;\n      case 5:\n        // 4 players: human at bottom, opponents at top, left, and right\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // Positions for 4 players (excluding human)\n        const positions5p = ['bottom-left', 'top-left', 'top-right', 'bottom-right'];\n        let posIdx4 = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            arrangedPlayers[i] = {\n              ...players[i],\n              position: positions5p[posIdx4]\n            };\n            posIdx4++;\n          }\n        }\n        break;\n      default:\n        // 5+ players: distribute around the table\n        arrangedPlayers[humanPlayerIndex] = {\n          ...humanPlayer,\n          position: 'bottom'\n        };\n\n        // More positions for additional players\n        const positionsMany = ['bottom-left', 'top-left', 'top', 'top-right', 'bottom-right'];\n        let posIdxMany = 0;\n        for (let i = 0; i < players.length; i++) {\n          if (i !== humanPlayerIndex) {\n            if (posIdxMany < positionsMany.length) {\n              arrangedPlayers[i] = {\n                ...players[i],\n                position: positionsMany[posIdxMany]\n              };\n              posIdxMany++;\n            } else {\n              // If more players than positions, double up on some positions\n              arrangedPlayers[i] = {\n                ...players[i],\n                position: positionsMany[posIdxMany % positionsMany.length]\n              };\n              posIdxMany++;\n            }\n          }\n        }\n    }\n    return arrangedPlayers;\n  };\n  // // Dynamically arrange players in a circular layout\n  // const arrangePlayersForDisplay = () => {\n  //     if (players.length <= 1) return players;\n\n  //     const arrangedPlayers = [...players];\n  //     const totalPlayers = players.length;\n  //     const radius = 200; // Adjust as needed\n  //     const centerX = window.innerWidth / 2;\n  //     const centerY = window.innerHeight / 2;\n\n  //     arrangedPlayers.forEach((player, i) => {\n  //         if (i === humanPlayerIndex) {\n  //             arrangedPlayers[i] = { ...player, x: centerX, y: centerY + radius, position: 'bottom' };\n  //         } else {\n  //             const angle = ((i - (i > humanPlayerIndex ? 1 : 0)) * (360 / (totalPlayers - 1))) * (Math.PI / 180);\n  //             arrangedPlayers[i] = {\n  //                 ...player,\n  //                 x: centerX + radius * Math.cos(angle),\n  //                 y: centerY + radius * Math.sin(angle),\n  //                 position: 'auto'\n  //             };\n  //         }\n  //     });\n  //     return arrangedPlayers;\n  // };\n  const arrangedPlayers = arrangePlayersForDisplay();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(Confetti, {\n      show: humanWon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `sound-toggle ${soundOn ? 'sound-on' : 'sound-off'}`,\n      onClick: handleToggleSound,\n      title: soundOn ? \"Mute Sound\" : \"Enable Sound\",\n      children: soundOn ? /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"24px\",\n        viewBox: \"0 -960 960 960\",\n        width: \"24px\",\n        fill: \"#e3e3e3\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M560-131v-82q90-26 145-100t55-168q0-94-55-168T560-749v-82q124 28 202 125.5T840-481q0 127-78 224.5T560-131ZM120-360v-240h160l200-200v640L280-360H120Zm440 40v-322q47 22 73.5 66t26.5 96q0 51-26.5 94.5T560-320ZM400-606l-86 86H200v80h114l86 86v-252ZM300-480Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 135\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"24px\",\n        viewBox: \"0 -960 960 960\",\n        width: \"24px\",\n        fill: \"#e3e3e3\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M792-56 671-177q-25 16-53 27.5T560-131v-82q14-5 27.5-10t25.5-12L480-368v208L280-360H120v-240h128L56-792l56-56 736 736-56 56Zm-8-232-58-58q17-31 25.5-65t8.5-70q0-94-55-168T560-749v-82q124 28 202 125.5T840-481q0 53-14.5 102T784-288ZM650-422l-90-90v-130q47 22 73.5 66t26.5 96q0 15-2.5 29.5T650-422ZM480-592 376-696l104-104v208Zm-80 238v-94l-72-72H200v80h114l86 86Zm-36-130Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 517\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 410\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: arrangedPlayers.map(player => /*#__PURE__*/_jsxDEV(PlayerHand, {\n          player: player,\n          isCurrentTurn: player.id === currentPlayerIndex && phase === 'playing',\n          isHumanPlayer: player.isHuman,\n          gamePhase: phase,\n          showTotal: player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner',\n          isWinner: player.id === winningPlayerId,\n          gameId: gameState.gameId,\n          position: player.position,\n          cardBackStyle: gameState.cardBackStyle || 'cardback'\n        }, `player-${player.id}-${gameState.gameId || Date.now()}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onDrawCard,\n          disabled: humanPlayer.status !== 'active',\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: onHold,\n          disabled: humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2,\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }, this), phase === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"item-center\",\n          children: players[winningPlayerId].isHuman ? '🎉 You Win! 🎉' : 'Game Over!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }, this), winningPlayerId !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"winner-announcement\",\n          children: !players[winningPlayerId].isHuman && `${players[winningPlayerId].name} Wins!`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReset,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button\",\n            onClick: onReturnHome,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 9\n  }, this);\n}\n_s(GameBoard, \"gaoATtR+91u39LGD/Wol7Q5vM0A=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","Confetti","useBotAI","isSoundEnabled","toggleSound","jsxDEV","_jsxDEV","GameBoard","gameState","setGameState","onDrawCard","onHold","onReset","onReturnHome","_s","_players$winningPlaye","players","currentPlayerIndex","phase","winner","winningPlayerId","gameLog","currentPlayer","animationInProgress","timer","setTimeout","prevState","clearTimeout","isHuman","processBotTurn","humanWon","soundOn","setSoundOn","handleToggleSound","newState","humanPlayerIndex","findIndex","player","humanPlayer","arrangePlayersForDisplay","length","arrangedPlayers","position","otherPlayerIdx","position3p","i","positions4p","posIdx","positions5p","posIdx4","positionsMany","posIdxMany","className","children","show","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","xmlns","height","viewBox","width","fill","d","map","isCurrentTurn","id","isHumanPlayer","gamePhase","showTotal","status","isWinner","gameId","cardBackStyle","Date","now","disabled","total","cards","name","_c","$RefreshReg$"],"sources":["/Users/pradipbade/Documents/Projects/Small Projects/react-3d-card-game/src/games/gameOf17/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\n// import GameLog from './GameLog';\nimport Confetti from '../../components/ui/Confetti';\nimport useBotAI from './useBotAI';\n\nimport { isSoundEnabled, toggleSound } from '../../services/audioService';\n\n\nexport default function GameBoard({ gameState, setGameState, onDrawCard, onHold, onReset, onReturnHome }) {\n    const {\n        players,\n        currentPlayerIndex,\n        phase,\n        winner: winningPlayerId,\n        gameLog\n    } = gameState;\n\n  // Get current player\n  const currentPlayer = players[currentPlayerIndex];\n\n    // Inside your GameBoard component\n    useEffect(() => {\n        // When animation is in progress, set a timer to wait for animation to complete\n        if (gameState.animationInProgress) {\n            const timer = setTimeout(() => {\n                // Clear the animation flag and proceed with the game\n                setGameState(prevState => ({\n                    ...prevState,\n                    animationInProgress: false\n                }));\n            }, 800); // Adjust timing to match your animation duration\n\n            return () => clearTimeout(timer);\n        }\n    }, [gameState.animationInProgress, setGameState]);\n\n    // Modify your bot turn processing logic\n    useEffect(() => {\n        // Only process bot turn if it's a bot's turn AND no animation is in progress\n        if (currentPlayer &&\n            !currentPlayer.isHuman &&\n            phase === 'playing' &&\n            !gameState.animationInProgress) {\n\n            const timer = setTimeout(() => {\n                processBotTurn();\n            }, 1000);\n\n            return () => clearTimeout(timer);\n        }\n    }, [currentPlayer, phase, gameState.animationInProgress, processBotTurn,players])\n\n\n    const humanWon = winningPlayerId !== null && players[winningPlayerId]?.isHuman;\n\n    // Add state for sound toggle\n    const [soundOn, setSoundOn] = useState(isSoundEnabled());\n\n    // Handle sound toggle\n    const handleToggleSound = () => {\n        const newState = toggleSound();\n        setSoundOn(newState);\n    };\n    // Find the human player\n    const humanPlayerIndex = players.findIndex(player => player.isHuman);\n    const humanPlayer = players[humanPlayerIndex];\n\n    // Arrange players around the table\n    const arrangePlayersForDisplay = () => {\n        if (players.length <= 1) return players;\n\n        // Clone players for manipulation\n        const arrangedPlayers = [...players];\n\n        // Assign positions based on number of players\n        switch (players.length) {\n            case 2:\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n\n                // Find the other player\n                const otherPlayerIdx = humanPlayerIndex === 0 ? 1 : 0;\n                arrangedPlayers[otherPlayerIdx] = {\n                    ...players[otherPlayerIdx],\n                    position: 'top'\n                };\n                break;\n\n            case 3:\n                // 3 players: human at bottom, others at top-left and top-right\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n\n                // Position the other players\n                let position3p = 0;\n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        arrangedPlayers[i] = {\n                            ...players[i],\n                            position: position3p === 0 ? 'top-left' : 'top-right'\n                        };\n                        position3p++;\n                    }\n                }\n                break;\n\n            case 4:\n                // 4 players: human at bottom, opponents at top, left, and right\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n\n                // Positions for 4 players (excluding human)\n                const positions4p = ['left', 'top', 'right'];\n                let posIdx = 0;\n\n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        arrangedPlayers[i] = {\n                            ...players[i],\n                            position: positions4p[posIdx]\n                        };\n                        posIdx++;\n                    }\n                }\n                break;\n\n            case 5:\n                // 4 players: human at bottom, opponents at top, left, and right\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n\n                // Positions for 4 players (excluding human)\n                const positions5p = ['bottom-left', 'top-left', 'top-right', 'bottom-right'];\n                let posIdx4 = 0;\n\n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        arrangedPlayers[i] = {\n                            ...players[i],\n                            position: positions5p[posIdx4]\n                        };\n                        posIdx4++;\n                    }\n                }\n                break;\n\n            default:\n                // 5+ players: distribute around the table\n                arrangedPlayers[humanPlayerIndex] = {\n                    ...humanPlayer,\n                    position: 'bottom'\n                };\n\n                // More positions for additional players\n                const positionsMany = ['bottom-left', 'top-left', 'top', 'top-right', 'bottom-right'];\n                let posIdxMany = 0;\n\n                for (let i = 0; i < players.length; i++) {\n                    if (i !== humanPlayerIndex) {\n                        if (posIdxMany < positionsMany.length) {\n                            arrangedPlayers[i] = {\n                                ...players[i],\n                                position: positionsMany[posIdxMany]\n                            };\n                            posIdxMany++;\n                        } else {\n                            // If more players than positions, double up on some positions\n                            arrangedPlayers[i] = {\n                                ...players[i],\n                                position: positionsMany[posIdxMany % positionsMany.length]\n                            };\n                            posIdxMany++;\n                        }\n                    }\n                }\n        }\n\n        return arrangedPlayers;\n    };\n    // // Dynamically arrange players in a circular layout\n    // const arrangePlayersForDisplay = () => {\n    //     if (players.length <= 1) return players;\n\n    //     const arrangedPlayers = [...players];\n    //     const totalPlayers = players.length;\n    //     const radius = 200; // Adjust as needed\n    //     const centerX = window.innerWidth / 2;\n    //     const centerY = window.innerHeight / 2;\n\n    //     arrangedPlayers.forEach((player, i) => {\n    //         if (i === humanPlayerIndex) {\n    //             arrangedPlayers[i] = { ...player, x: centerX, y: centerY + radius, position: 'bottom' };\n    //         } else {\n    //             const angle = ((i - (i > humanPlayerIndex ? 1 : 0)) * (360 / (totalPlayers - 1))) * (Math.PI / 180);\n    //             arrangedPlayers[i] = {\n    //                 ...player,\n    //                 x: centerX + radius * Math.cos(angle),\n    //                 y: centerY + radius * Math.sin(angle),\n    //                 position: 'auto'\n    //             };\n    //         }\n    //     });\n    //     return arrangedPlayers;\n    // };\n    const arrangedPlayers = arrangePlayersForDisplay();\n\n    return (\n        <div className=\"game-board\">\n            {/* Show confetti only when human player wins */}\n            <Confetti show={humanWon} />\n\n            {/* Sound toggle button */}\n            <button\n                className={`sound-toggle ${soundOn ? 'sound-on' : 'sound-off'}`}\n                onClick={handleToggleSound}\n                title={soundOn ? \"Mute Sound\" : \"Enable Sound\"}\n            >\n                {/* Font Awesome or similar icon, or use Unicode characters */}\n                {soundOn ? <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#e3e3e3\"><path d=\"M560-131v-82q90-26 145-100t55-168q0-94-55-168T560-749v-82q124 28 202 125.5T840-481q0 127-78 224.5T560-131ZM120-360v-240h160l200-200v640L280-360H120Zm440 40v-322q47 22 73.5 66t26.5 96q0 51-26.5 94.5T560-320ZM400-606l-86 86H200v80h114l86 86v-252ZM300-480Z\" /></svg> : <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#e3e3e3\"><path d=\"M792-56 671-177q-25 16-53 27.5T560-131v-82q14-5 27.5-10t25.5-12L480-368v208L280-360H120v-240h128L56-792l56-56 736 736-56 56Zm-8-232-58-58q17-31 25.5-65t8.5-70q0-94-55-168T560-749v-82q124 28 202 125.5T840-481q0 53-14.5 102T784-288ZM650-422l-90-90v-130q47 22 73.5 66t26.5 96q0 15-2.5 29.5T650-422ZM480-592 376-696l104-104v208Zm-80 238v-94l-72-72H200v80h114l86 86Zm-36-130Z\" /></svg>}\n            </button>\n            <div className=\"game-table\">\n                <div className=\"players-container\">\n                    {arrangedPlayers.map((player) => (\n                        <PlayerHand\n                            key={`player-${player.id}-${gameState.gameId || Date.now()}`}\n                            player={player}\n                            isCurrentTurn={player.id === currentPlayerIndex && phase === 'playing'}\n                            isHumanPlayer={player.isHuman}\n                            gamePhase={phase}\n                            showTotal={player.isHuman || phase === 'gameOver' || phase === 'revealing' || player.status === 'eliminated' || player.status === 'winner'}\n                            isWinner={player.id === winningPlayerId}\n                            gameId={gameState.gameId}\n                            position={player.position}\n                            cardBackStyle={gameState.cardBackStyle || 'cardback'}\n                        />\n                    ))}\n                </div>\n\n                {humanPlayer && phase === 'playing' && humanPlayer.id === currentPlayerIndex && (\n                    <div className=\"player-controls\">\n                        <button\n                            className=\"action-button\"\n                            onClick={onDrawCard}\n                            disabled={humanPlayer.status !== 'active'}\n                        >\n                            Draw Card\n                        </button>\n                        <button\n                            className=\"action-button\"\n                            onClick={onHold}\n                            disabled={humanPlayer.status !== 'active' || humanPlayer.total < 11 || humanPlayer.cards.length < 2}\n                        >\n                            Hold\n                        </button>\n                    </div>\n                )}\n                {/* <GameLog messages={gameLog || []} /> */}\n                {phase === 'gameOver' && (\n                    <div className=\"game-info\">\n\n                        <h2 className='item-center'>\n                            {players[winningPlayerId].isHuman ? '🎉 You Win! 🎉'\n                                : 'Game Over!'}\n                        </h2>\n                        {winningPlayerId !== null && (\n                            <p className=\"winner-announcement\">\n                                {!players[winningPlayerId].isHuman && `${players[winningPlayerId].name} Wins!`}\n                            </p>\n                        )}\n                        <div className=\"game-over-controls\">\n                            <button className=\"action-button\" onClick={onReset}>Play Again</button>\n                            <button className=\"action-button\" onClick={onReturnHome}>Main Menu</button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}